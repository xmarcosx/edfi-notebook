# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_application_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_application_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_application_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletes_applications(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_applications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :return: list[TpdmApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deletes_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def deletes_applications_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_applications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :return: list[TpdmApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_applications" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 500:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_applications`, must be a value less than or equal to `500`")  # noqa: E501
        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_applications`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications/deletes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TpdmApplication]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_applications(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str application_identifier: Identifier assigned to the application for an open staff position.
        :param str applicant_identifier: Identifier assigned to a person making formal application for an open staff position.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str academic_subject_descriptor: The academic subject for which the application is made.
        :param str high_needs_academic_subject_descriptor: The high need academic subject for the application, if any.
        :param str highly_qualified_academic_subject_descriptor: The academic subject(s) in which the staff is deemed to be \"highly qualified\".
        :param str application_source_descriptor: Specifies the source for the application (e.g., Job fair, website, referral).
        :param str application_status_descriptor: Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).
        :param str hire_status_descriptor: Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).
        :param str hiring_source_descriptor: The source for the application (e.g.,job fair, website, referral, etc.).
        :param str highest_completed_level_of_education_descriptor: The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        :param str withdraw_reason_descriptor: Reason applicant withdrew application.
        :param date accepted_date: The date of job acceptance, if offered.
        :param date application_date: The month, day, and year the application was submitted.
        :param bool current_employee: Indicator as to whether the applicant is a current employee of the school district.
        :param date first_contact_date: Date applicant was first contacted after submitting application.
        :param bool highly_qualified_teacher: An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        :param str id: 
        :param date withdraw_date: The date the application was withdrawn by the applicant.
        :param float years_of_prior_professional_experience: The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        :param float years_of_prior_teaching_experience: The total number of years that an individual has previously held a teaching position in one or more education institutions.
        :return: list[TpdmApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_applications_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str application_identifier: Identifier assigned to the application for an open staff position.
        :param str applicant_identifier: Identifier assigned to a person making formal application for an open staff position.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str academic_subject_descriptor: The academic subject for which the application is made.
        :param str high_needs_academic_subject_descriptor: The high need academic subject for the application, if any.
        :param str highly_qualified_academic_subject_descriptor: The academic subject(s) in which the staff is deemed to be \"highly qualified\".
        :param str application_source_descriptor: Specifies the source for the application (e.g., Job fair, website, referral).
        :param str application_status_descriptor: Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).
        :param str hire_status_descriptor: Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).
        :param str hiring_source_descriptor: The source for the application (e.g.,job fair, website, referral, etc.).
        :param str highest_completed_level_of_education_descriptor: The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        :param str withdraw_reason_descriptor: Reason applicant withdrew application.
        :param date accepted_date: The date of job acceptance, if offered.
        :param date application_date: The month, day, and year the application was submitted.
        :param bool current_employee: Indicator as to whether the applicant is a current employee of the school district.
        :param date first_contact_date: Date applicant was first contacted after submitting application.
        :param bool highly_qualified_teacher: An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        :param str id: 
        :param date withdraw_date: The date the application was withdrawn by the applicant.
        :param float years_of_prior_professional_experience: The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        :param float years_of_prior_teaching_experience: The total number of years that an individual has previously held a teaching position in one or more education institutions.
        :return: list[TpdmApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'total_count', 'application_identifier', 'applicant_identifier', 'education_organization_id', 'academic_subject_descriptor', 'high_needs_academic_subject_descriptor', 'highly_qualified_academic_subject_descriptor', 'application_source_descriptor', 'application_status_descriptor', 'hire_status_descriptor', 'hiring_source_descriptor', 'highest_completed_level_of_education_descriptor', 'withdraw_reason_descriptor', 'accepted_date', 'application_date', 'current_employee', 'first_contact_date', 'highly_qualified_teacher', 'id', 'withdraw_date', 'years_of_prior_professional_experience', 'years_of_prior_teaching_experience']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 500:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_applications`, must be a value less than or equal to `500`")  # noqa: E501
        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_applications`, must be a value greater than or equal to `0`")  # noqa: E501
        if ('application_identifier' in params and
                len(params['application_identifier']) > 20):
            raise ValueError("Invalid value for parameter `application_identifier` when calling `get_applications`, length must be less than or equal to `20`")  # noqa: E501
        if ('applicant_identifier' in params and
                len(params['applicant_identifier']) > 32):
            raise ValueError("Invalid value for parameter `applicant_identifier` when calling `get_applications`, length must be less than or equal to `32`")  # noqa: E501
        if ('academic_subject_descriptor' in params and
                len(params['academic_subject_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `academic_subject_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('high_needs_academic_subject_descriptor' in params and
                len(params['high_needs_academic_subject_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `high_needs_academic_subject_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('highly_qualified_academic_subject_descriptor' in params and
                len(params['highly_qualified_academic_subject_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `highly_qualified_academic_subject_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('application_source_descriptor' in params and
                len(params['application_source_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `application_source_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('application_status_descriptor' in params and
                len(params['application_status_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `application_status_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('hire_status_descriptor' in params and
                len(params['hire_status_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `hire_status_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('hiring_source_descriptor' in params and
                len(params['hiring_source_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `hiring_source_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('highest_completed_level_of_education_descriptor' in params and
                len(params['highest_completed_level_of_education_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `highest_completed_level_of_education_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        if ('withdraw_reason_descriptor' in params and
                len(params['withdraw_reason_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `withdraw_reason_descriptor` when calling `get_applications`, length must be less than or equal to `306`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501
        if 'total_count' in params:
            query_params.append(('totalCount', params['total_count']))  # noqa: E501
        if 'application_identifier' in params:
            query_params.append(('applicationIdentifier', params['application_identifier']))  # noqa: E501
        if 'applicant_identifier' in params:
            query_params.append(('applicantIdentifier', params['applicant_identifier']))  # noqa: E501
        if 'education_organization_id' in params:
            query_params.append(('educationOrganizationId', params['education_organization_id']))  # noqa: E501
        if 'academic_subject_descriptor' in params:
            query_params.append(('academicSubjectDescriptor', params['academic_subject_descriptor']))  # noqa: E501
        if 'high_needs_academic_subject_descriptor' in params:
            query_params.append(('highNeedsAcademicSubjectDescriptor', params['high_needs_academic_subject_descriptor']))  # noqa: E501
        if 'highly_qualified_academic_subject_descriptor' in params:
            query_params.append(('highlyQualifiedAcademicSubjectDescriptor', params['highly_qualified_academic_subject_descriptor']))  # noqa: E501
        if 'application_source_descriptor' in params:
            query_params.append(('applicationSourceDescriptor', params['application_source_descriptor']))  # noqa: E501
        if 'application_status_descriptor' in params:
            query_params.append(('applicationStatusDescriptor', params['application_status_descriptor']))  # noqa: E501
        if 'hire_status_descriptor' in params:
            query_params.append(('hireStatusDescriptor', params['hire_status_descriptor']))  # noqa: E501
        if 'hiring_source_descriptor' in params:
            query_params.append(('hiringSourceDescriptor', params['hiring_source_descriptor']))  # noqa: E501
        if 'highest_completed_level_of_education_descriptor' in params:
            query_params.append(('highestCompletedLevelOfEducationDescriptor', params['highest_completed_level_of_education_descriptor']))  # noqa: E501
        if 'withdraw_reason_descriptor' in params:
            query_params.append(('withdrawReasonDescriptor', params['withdraw_reason_descriptor']))  # noqa: E501
        if 'accepted_date' in params:
            query_params.append(('acceptedDate', params['accepted_date']))  # noqa: E501
        if 'application_date' in params:
            query_params.append(('applicationDate', params['application_date']))  # noqa: E501
        if 'current_employee' in params:
            query_params.append(('currentEmployee', params['current_employee']))  # noqa: E501
        if 'first_contact_date' in params:
            query_params.append(('firstContactDate', params['first_contact_date']))  # noqa: E501
        if 'highly_qualified_teacher' in params:
            query_params.append(('highlyQualifiedTeacher', params['highly_qualified_teacher']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'withdraw_date' in params:
            query_params.append(('withdrawDate', params['withdraw_date']))  # noqa: E501
        if 'years_of_prior_professional_experience' in params:
            query_params.append(('yearsOfPriorProfessionalExperience', params['years_of_prior_professional_experience']))  # noqa: E501
        if 'years_of_prior_teaching_experience' in params:
            query_params.append(('yearsOfPriorTeachingExperience', params['years_of_prior_teaching_experience']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TpdmApplication]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_applications_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :return: TpdmApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_applications_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_applications_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_applications_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :return: TpdmApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_applications_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TpdmApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_application(self, application, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_application(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TpdmApplication application: The JSON representation of the \"application\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_application_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.post_application_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def post_application_with_http_info(self, application, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_application_with_http_info(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TpdmApplication application: The JSON representation of the \"application\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `post_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_application(self, id, application, **kwargs):  # noqa: E501
        """Updates or creates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_application(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param TpdmApplication application: The JSON representation of the \"application\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_application_with_http_info(id, application, **kwargs)  # noqa: E501
        else:
            (data) = self.put_application_with_http_info(id, application, **kwargs)  # noqa: E501
            return data

    def put_application_with_http_info(self, id, application, **kwargs):  # noqa: E501
        """Updates or creates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_application_with_http_info(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param TpdmApplication application: The JSON representation of the \"application\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'application', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_application`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `put_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/tpdm/applications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
