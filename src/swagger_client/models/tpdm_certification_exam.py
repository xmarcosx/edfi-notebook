# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmCertificationExam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'certification_exam_identifier': 'str',
        'namespace': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'certification_exam_title': 'str',
        'certification_exam_type_descriptor': 'str',
        'effective_date': 'date',
        'end_date': 'date',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'certification_exam_identifier': 'certificationExamIdentifier',
        'namespace': 'namespace',
        'education_organization_reference': 'educationOrganizationReference',
        'certification_exam_title': 'certificationExamTitle',
        'certification_exam_type_descriptor': 'certificationExamTypeDescriptor',
        'effective_date': 'effectiveDate',
        'end_date': 'endDate',
        'etag': '_etag'
    }

    def __init__(self, id=None, certification_exam_identifier=None, namespace=None, education_organization_reference=None, certification_exam_title=None, certification_exam_type_descriptor=None, effective_date=None, end_date=None, etag=None):  # noqa: E501
        """TpdmCertificationExam - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._certification_exam_identifier = None
        self._namespace = None
        self._education_organization_reference = None
        self._certification_exam_title = None
        self._certification_exam_type_descriptor = None
        self._effective_date = None
        self._end_date = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.certification_exam_identifier = certification_exam_identifier
        self.namespace = namespace
        if education_organization_reference is not None:
            self.education_organization_reference = education_organization_reference
        self.certification_exam_title = certification_exam_title
        if certification_exam_type_descriptor is not None:
            self.certification_exam_type_descriptor = certification_exam_type_descriptor
        if effective_date is not None:
            self.effective_date = effective_date
        if end_date is not None:
            self.end_date = end_date
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmCertificationExam.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmCertificationExam.

          # noqa: E501

        :param id: The id of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def certification_exam_identifier(self):
        """Gets the certification_exam_identifier of this TpdmCertificationExam.  # noqa: E501

        Identifier or serial number assigned to the CertificationExam.  # noqa: E501

        :return: The certification_exam_identifier of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._certification_exam_identifier

    @certification_exam_identifier.setter
    def certification_exam_identifier(self, certification_exam_identifier):
        """Sets the certification_exam_identifier of this TpdmCertificationExam.

        Identifier or serial number assigned to the CertificationExam.  # noqa: E501

        :param certification_exam_identifier: The certification_exam_identifier of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """
        if certification_exam_identifier is None:
            raise ValueError("Invalid value for `certification_exam_identifier`, must not be `None`")  # noqa: E501
        if certification_exam_identifier is not None and len(certification_exam_identifier) > 60:
            raise ValueError("Invalid value for `certification_exam_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._certification_exam_identifier = certification_exam_identifier

    @property
    def namespace(self):
        """Gets the namespace of this TpdmCertificationExam.  # noqa: E501

        Namespace for the CertificationExam.  # noqa: E501

        :return: The namespace of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TpdmCertificationExam.

        Namespace for the CertificationExam.  # noqa: E501

        :param namespace: The namespace of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if namespace is not None and len(namespace) > 255:
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmCertificationExam.  # noqa: E501


        :return: The education_organization_reference of this TpdmCertificationExam.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmCertificationExam.


        :param education_organization_reference: The education_organization_reference of this TpdmCertificationExam.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """

        self._education_organization_reference = education_organization_reference

    @property
    def certification_exam_title(self):
        """Gets the certification_exam_title of this TpdmCertificationExam.  # noqa: E501

        The title of the Certification Exam.  # noqa: E501

        :return: The certification_exam_title of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._certification_exam_title

    @certification_exam_title.setter
    def certification_exam_title(self, certification_exam_title):
        """Sets the certification_exam_title of this TpdmCertificationExam.

        The title of the Certification Exam.  # noqa: E501

        :param certification_exam_title: The certification_exam_title of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """
        if certification_exam_title is None:
            raise ValueError("Invalid value for `certification_exam_title`, must not be `None`")  # noqa: E501
        if certification_exam_title is not None and len(certification_exam_title) > 60:
            raise ValueError("Invalid value for `certification_exam_title`, length must be less than or equal to `60`")  # noqa: E501

        self._certification_exam_title = certification_exam_title

    @property
    def certification_exam_type_descriptor(self):
        """Gets the certification_exam_type_descriptor of this TpdmCertificationExam.  # noqa: E501

        The type or category of Certification Exam.  # noqa: E501

        :return: The certification_exam_type_descriptor of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._certification_exam_type_descriptor

    @certification_exam_type_descriptor.setter
    def certification_exam_type_descriptor(self, certification_exam_type_descriptor):
        """Sets the certification_exam_type_descriptor of this TpdmCertificationExam.

        The type or category of Certification Exam.  # noqa: E501

        :param certification_exam_type_descriptor: The certification_exam_type_descriptor of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """
        if certification_exam_type_descriptor is not None and len(certification_exam_type_descriptor) > 306:
            raise ValueError("Invalid value for `certification_exam_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._certification_exam_type_descriptor = certification_exam_type_descriptor

    @property
    def effective_date(self):
        """Gets the effective_date of this TpdmCertificationExam.  # noqa: E501

        The year, month and day on which the CertificationExam is offered.  # noqa: E501

        :return: The effective_date of this TpdmCertificationExam.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this TpdmCertificationExam.

        The year, month and day on which the CertificationExam is offered.  # noqa: E501

        :param effective_date: The effective_date of this TpdmCertificationExam.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def end_date(self):
        """Gets the end_date of this TpdmCertificationExam.  # noqa: E501

        The month, day, and year on which the CertificationExam offering is expected to end.  # noqa: E501

        :return: The end_date of this TpdmCertificationExam.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TpdmCertificationExam.

        The month, day, and year on which the CertificationExam offering is expected to end.  # noqa: E501

        :param end_date: The end_date of this TpdmCertificationExam.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def etag(self):
        """Gets the etag of this TpdmCertificationExam.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmCertificationExam.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmCertificationExam.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmCertificationExam.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmCertificationExam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmCertificationExam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
