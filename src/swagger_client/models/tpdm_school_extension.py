# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmSchoolExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'federal_locale_code_descriptor': 'str',
        'school_status_descriptor': 'str',
        'improving_school': 'bool'
    }

    attribute_map = {
        'federal_locale_code_descriptor': 'federalLocaleCodeDescriptor',
        'school_status_descriptor': 'schoolStatusDescriptor',
        'improving_school': 'improvingSchool'
    }

    def __init__(self, federal_locale_code_descriptor=None, school_status_descriptor=None, improving_school=None):  # noqa: E501
        """TpdmSchoolExtension - a model defined in Swagger"""  # noqa: E501

        self._federal_locale_code_descriptor = None
        self._school_status_descriptor = None
        self._improving_school = None
        self.discriminator = None

        if federal_locale_code_descriptor is not None:
            self.federal_locale_code_descriptor = federal_locale_code_descriptor
        if school_status_descriptor is not None:
            self.school_status_descriptor = school_status_descriptor
        if improving_school is not None:
            self.improving_school = improving_school

    @property
    def federal_locale_code_descriptor(self):
        """Gets the federal_locale_code_descriptor of this TpdmSchoolExtension.  # noqa: E501

        The federal locale code associated with an education organization.  # noqa: E501

        :return: The federal_locale_code_descriptor of this TpdmSchoolExtension.  # noqa: E501
        :rtype: str
        """
        return self._federal_locale_code_descriptor

    @federal_locale_code_descriptor.setter
    def federal_locale_code_descriptor(self, federal_locale_code_descriptor):
        """Sets the federal_locale_code_descriptor of this TpdmSchoolExtension.

        The federal locale code associated with an education organization.  # noqa: E501

        :param federal_locale_code_descriptor: The federal_locale_code_descriptor of this TpdmSchoolExtension.  # noqa: E501
        :type: str
        """
        if federal_locale_code_descriptor is not None and len(federal_locale_code_descriptor) > 306:
            raise ValueError("Invalid value for `federal_locale_code_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._federal_locale_code_descriptor = federal_locale_code_descriptor

    @property
    def school_status_descriptor(self):
        """Gets the school_status_descriptor of this TpdmSchoolExtension.  # noqa: E501

        The status of school e.g. priority or focus.  # noqa: E501

        :return: The school_status_descriptor of this TpdmSchoolExtension.  # noqa: E501
        :rtype: str
        """
        return self._school_status_descriptor

    @school_status_descriptor.setter
    def school_status_descriptor(self, school_status_descriptor):
        """Sets the school_status_descriptor of this TpdmSchoolExtension.

        The status of school e.g. priority or focus.  # noqa: E501

        :param school_status_descriptor: The school_status_descriptor of this TpdmSchoolExtension.  # noqa: E501
        :type: str
        """
        if school_status_descriptor is not None and len(school_status_descriptor) > 306:
            raise ValueError("Invalid value for `school_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._school_status_descriptor = school_status_descriptor

    @property
    def improving_school(self):
        """Gets the improving_school of this TpdmSchoolExtension.  # noqa: E501

        An indication of whether a school is identified as an improving school.  # noqa: E501

        :return: The improving_school of this TpdmSchoolExtension.  # noqa: E501
        :rtype: bool
        """
        return self._improving_school

    @improving_school.setter
    def improving_school(self, improving_school):
        """Sets the improving_school of this TpdmSchoolExtension.

        An indication of whether a school is identified as an improving school.  # noqa: E501

        :param improving_school: The improving_school of this TpdmSchoolExtension.  # noqa: E501
        :type: bool
        """

        self._improving_school = improving_school

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmSchoolExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmSchoolExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
