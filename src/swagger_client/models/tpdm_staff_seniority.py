# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmStaffSeniority(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_field_descriptor': 'str',
        'name_of_institution': 'str',
        'years_experience': 'float'
    }

    attribute_map = {
        'credential_field_descriptor': 'credentialFieldDescriptor',
        'name_of_institution': 'nameOfInstitution',
        'years_experience': 'yearsExperience'
    }

    def __init__(self, credential_field_descriptor=None, name_of_institution=None, years_experience=None):  # noqa: E501
        """TpdmStaffSeniority - a model defined in Swagger"""  # noqa: E501

        self._credential_field_descriptor = None
        self._name_of_institution = None
        self._years_experience = None
        self.discriminator = None

        self.credential_field_descriptor = credential_field_descriptor
        self.name_of_institution = name_of_institution
        self.years_experience = years_experience

    @property
    def credential_field_descriptor(self):
        """Gets the credential_field_descriptor of this TpdmStaffSeniority.  # noqa: E501

        The field of the credential being applied.  # noqa: E501

        :return: The credential_field_descriptor of this TpdmStaffSeniority.  # noqa: E501
        :rtype: str
        """
        return self._credential_field_descriptor

    @credential_field_descriptor.setter
    def credential_field_descriptor(self, credential_field_descriptor):
        """Sets the credential_field_descriptor of this TpdmStaffSeniority.

        The field of the credential being applied.  # noqa: E501

        :param credential_field_descriptor: The credential_field_descriptor of this TpdmStaffSeniority.  # noqa: E501
        :type: str
        """
        if credential_field_descriptor is None:
            raise ValueError("Invalid value for `credential_field_descriptor`, must not be `None`")  # noqa: E501
        if credential_field_descriptor is not None and len(credential_field_descriptor) > 306:
            raise ValueError("Invalid value for `credential_field_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credential_field_descriptor = credential_field_descriptor

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this TpdmStaffSeniority.  # noqa: E501

        The name of the education organization worked.  # noqa: E501

        :return: The name_of_institution of this TpdmStaffSeniority.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this TpdmStaffSeniority.

        The name of the education organization worked.  # noqa: E501

        :param name_of_institution: The name_of_institution of this TpdmStaffSeniority.  # noqa: E501
        :type: str
        """
        if name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if name_of_institution is not None and len(name_of_institution) > 75:
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def years_experience(self):
        """Gets the years_experience of this TpdmStaffSeniority.  # noqa: E501

        The number of years of experience.  # noqa: E501

        :return: The years_experience of this TpdmStaffSeniority.  # noqa: E501
        :rtype: float
        """
        return self._years_experience

    @years_experience.setter
    def years_experience(self, years_experience):
        """Sets the years_experience of this TpdmStaffSeniority.

        The number of years of experience.  # noqa: E501

        :param years_experience: The years_experience of this TpdmStaffSeniority.  # noqa: E501
        :type: float
        """
        if years_experience is None:
            raise ValueError("Invalid value for `years_experience`, must not be `None`")  # noqa: E501

        self._years_experience = years_experience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmStaffSeniority, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmStaffSeniority):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
