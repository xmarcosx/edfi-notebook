# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmTeacherCandidateIndicator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicator_name': 'str',
        'begin_date': 'date',
        'designated_by': 'str',
        'end_date': 'date',
        'indicator': 'str',
        'indicator_group': 'str'
    }

    attribute_map = {
        'indicator_name': 'indicatorName',
        'begin_date': 'beginDate',
        'designated_by': 'designatedBy',
        'end_date': 'endDate',
        'indicator': 'indicator',
        'indicator_group': 'indicatorGroup'
    }

    def __init__(self, indicator_name=None, begin_date=None, designated_by=None, end_date=None, indicator=None, indicator_group=None):  # noqa: E501
        """TpdmTeacherCandidateIndicator - a model defined in Swagger"""  # noqa: E501

        self._indicator_name = None
        self._begin_date = None
        self._designated_by = None
        self._end_date = None
        self._indicator = None
        self._indicator_group = None
        self.discriminator = None

        self.indicator_name = indicator_name
        if begin_date is not None:
            self.begin_date = begin_date
        if designated_by is not None:
            self.designated_by = designated_by
        if end_date is not None:
            self.end_date = end_date
        self.indicator = indicator
        if indicator_group is not None:
            self.indicator_group = indicator_group

    @property
    def indicator_name(self):
        """Gets the indicator_name of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The name of the indicator or metric.  # noqa: E501

        :return: The indicator_name of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator_name

    @indicator_name.setter
    def indicator_name(self, indicator_name):
        """Sets the indicator_name of this TpdmTeacherCandidateIndicator.

        The name of the indicator or metric.  # noqa: E501

        :param indicator_name: The indicator_name of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: str
        """
        if indicator_name is None:
            raise ValueError("Invalid value for `indicator_name`, must not be `None`")  # noqa: E501
        if indicator_name is not None and len(indicator_name) > 200:
            raise ValueError("Invalid value for `indicator_name`, length must be less than or equal to `200`")  # noqa: E501

        self._indicator_name = indicator_name

    @property
    def begin_date(self):
        """Gets the begin_date of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The date when the indicator was assigned or computed.  # noqa: E501

        :return: The begin_date of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this TpdmTeacherCandidateIndicator.

        The date when the indicator was assigned or computed.  # noqa: E501

        :param begin_date: The begin_date of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: date
        """

        self._begin_date = begin_date

    @property
    def designated_by(self):
        """Gets the designated_by of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The person, organization, or department that designated the program association.  # noqa: E501

        :return: The designated_by of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: str
        """
        return self._designated_by

    @designated_by.setter
    def designated_by(self, designated_by):
        """Sets the designated_by of this TpdmTeacherCandidateIndicator.

        The person, organization, or department that designated the program association.  # noqa: E501

        :param designated_by: The designated_by of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: str
        """
        if designated_by is not None and len(designated_by) > 60:
            raise ValueError("Invalid value for `designated_by`, length must be less than or equal to `60`")  # noqa: E501

        self._designated_by = designated_by

    @property
    def end_date(self):
        """Gets the end_date of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The date the indicator or metric was sunset or removed.  # noqa: E501

        :return: The end_date of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TpdmTeacherCandidateIndicator.

        The date the indicator or metric was sunset or removed.  # noqa: E501

        :param end_date: The end_date of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def indicator(self):
        """Gets the indicator of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The value of the indicator or metric.  # noqa: E501

        :return: The indicator of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this TpdmTeacherCandidateIndicator.

        The value of the indicator or metric.  # noqa: E501

        :param indicator: The indicator of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: str
        """
        if indicator is None:
            raise ValueError("Invalid value for `indicator`, must not be `None`")  # noqa: E501
        if indicator is not None and len(indicator) > 35:
            raise ValueError("Invalid value for `indicator`, length must be less than or equal to `35`")  # noqa: E501

        self._indicator = indicator

    @property
    def indicator_group(self):
        """Gets the indicator_group of this TpdmTeacherCandidateIndicator.  # noqa: E501

        The name for a group of indicators.  # noqa: E501

        :return: The indicator_group of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator_group

    @indicator_group.setter
    def indicator_group(self, indicator_group):
        """Sets the indicator_group of this TpdmTeacherCandidateIndicator.

        The name for a group of indicators.  # noqa: E501

        :param indicator_group: The indicator_group of this TpdmTeacherCandidateIndicator.  # noqa: E501
        :type: str
        """
        if indicator_group is not None and len(indicator_group) > 200:
            raise ValueError("Invalid value for `indicator_group`, length must be less than or equal to `200`")  # noqa: E501

        self._indicator_group = indicator_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmTeacherCandidateIndicator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmTeacherCandidateIndicator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
