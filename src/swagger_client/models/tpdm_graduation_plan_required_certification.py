# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmGraduationPlanRequiredCertification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certification_title': 'str',
        'certification_route_descriptor': 'str',
        'certification_reference': 'TpdmCertificationReference'
    }

    attribute_map = {
        'certification_title': 'certificationTitle',
        'certification_route_descriptor': 'certificationRouteDescriptor',
        'certification_reference': 'certificationReference'
    }

    def __init__(self, certification_title=None, certification_route_descriptor=None, certification_reference=None):  # noqa: E501
        """TpdmGraduationPlanRequiredCertification - a model defined in Swagger"""  # noqa: E501

        self._certification_title = None
        self._certification_route_descriptor = None
        self._certification_reference = None
        self.discriminator = None

        self.certification_title = certification_title
        if certification_route_descriptor is not None:
            self.certification_route_descriptor = certification_route_descriptor
        if certification_reference is not None:
            self.certification_reference = certification_reference

    @property
    def certification_title(self):
        """Gets the certification_title of this TpdmGraduationPlanRequiredCertification.  # noqa: E501

        The title of the Certification required for Graduation.  # noqa: E501

        :return: The certification_title of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_title

    @certification_title.setter
    def certification_title(self, certification_title):
        """Sets the certification_title of this TpdmGraduationPlanRequiredCertification.

        The title of the Certification required for Graduation.  # noqa: E501

        :param certification_title: The certification_title of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :type: str
        """
        if certification_title is None:
            raise ValueError("Invalid value for `certification_title`, must not be `None`")  # noqa: E501
        if certification_title is not None and len(certification_title) > 64:
            raise ValueError("Invalid value for `certification_title`, length must be less than or equal to `64`")  # noqa: E501

        self._certification_title = certification_title

    @property
    def certification_route_descriptor(self):
        """Gets the certification_route_descriptor of this TpdmGraduationPlanRequiredCertification.  # noqa: E501

        The process, program ,or pathway used to obtain certification.  # noqa: E501

        :return: The certification_route_descriptor of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_route_descriptor

    @certification_route_descriptor.setter
    def certification_route_descriptor(self, certification_route_descriptor):
        """Sets the certification_route_descriptor of this TpdmGraduationPlanRequiredCertification.

        The process, program ,or pathway used to obtain certification.  # noqa: E501

        :param certification_route_descriptor: The certification_route_descriptor of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :type: str
        """
        if certification_route_descriptor is not None and len(certification_route_descriptor) > 306:
            raise ValueError("Invalid value for `certification_route_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._certification_route_descriptor = certification_route_descriptor

    @property
    def certification_reference(self):
        """Gets the certification_reference of this TpdmGraduationPlanRequiredCertification.  # noqa: E501


        :return: The certification_reference of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :rtype: TpdmCertificationReference
        """
        return self._certification_reference

    @certification_reference.setter
    def certification_reference(self, certification_reference):
        """Sets the certification_reference of this TpdmGraduationPlanRequiredCertification.


        :param certification_reference: The certification_reference of this TpdmGraduationPlanRequiredCertification.  # noqa: E501
        :type: TpdmCertificationReference
        """

        self._certification_reference = certification_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmGraduationPlanRequiredCertification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmGraduationPlanRequiredCertification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
