# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmStaffTeacherEducatorResearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'research_experience_date': 'date',
        'research_experience_description': 'str',
        'research_experience_title': 'str'
    }

    attribute_map = {
        'research_experience_date': 'researchExperienceDate',
        'research_experience_description': 'researchExperienceDescription',
        'research_experience_title': 'researchExperienceTitle'
    }

    def __init__(self, research_experience_date=None, research_experience_description=None, research_experience_title=None):  # noqa: E501
        """TpdmStaffTeacherEducatorResearch - a model defined in Swagger"""  # noqa: E501

        self._research_experience_date = None
        self._research_experience_description = None
        self._research_experience_title = None
        self.discriminator = None

        self.research_experience_date = research_experience_date
        if research_experience_description is not None:
            self.research_experience_description = research_experience_description
        if research_experience_title is not None:
            self.research_experience_title = research_experience_title

    @property
    def research_experience_date(self):
        """Gets the research_experience_date of this TpdmStaffTeacherEducatorResearch.  # noqa: E501

        Month, day, and year of the start or effective date of a staff member's teacher educator position for an Education Organization.  # noqa: E501

        :return: The research_experience_date of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :rtype: date
        """
        return self._research_experience_date

    @research_experience_date.setter
    def research_experience_date(self, research_experience_date):
        """Sets the research_experience_date of this TpdmStaffTeacherEducatorResearch.

        Month, day, and year of the start or effective date of a staff member's teacher educator position for an Education Organization.  # noqa: E501

        :param research_experience_date: The research_experience_date of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :type: date
        """
        if research_experience_date is None:
            raise ValueError("Invalid value for `research_experience_date`, must not be `None`")  # noqa: E501

        self._research_experience_date = research_experience_date

    @property
    def research_experience_description(self):
        """Gets the research_experience_description of this TpdmStaffTeacherEducatorResearch.  # noqa: E501

        The description of the research experience.  # noqa: E501

        :return: The research_experience_description of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :rtype: str
        """
        return self._research_experience_description

    @research_experience_description.setter
    def research_experience_description(self, research_experience_description):
        """Sets the research_experience_description of this TpdmStaffTeacherEducatorResearch.

        The description of the research experience.  # noqa: E501

        :param research_experience_description: The research_experience_description of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :type: str
        """
        if research_experience_description is not None and len(research_experience_description) > 1024:
            raise ValueError("Invalid value for `research_experience_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._research_experience_description = research_experience_description

    @property
    def research_experience_title(self):
        """Gets the research_experience_title of this TpdmStaffTeacherEducatorResearch.  # noqa: E501

        The title of the research experience.  # noqa: E501

        :return: The research_experience_title of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :rtype: str
        """
        return self._research_experience_title

    @research_experience_title.setter
    def research_experience_title(self, research_experience_title):
        """Sets the research_experience_title of this TpdmStaffTeacherEducatorResearch.

        The title of the research experience.  # noqa: E501

        :param research_experience_title: The research_experience_title of this TpdmStaffTeacherEducatorResearch.  # noqa: E501
        :type: str
        """
        if research_experience_title is not None and len(research_experience_title) > 60:
            raise ValueError("Invalid value for `research_experience_title`, length must be less than or equal to `60`")  # noqa: E501

        self._research_experience_title = research_experience_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmStaffTeacherEducatorResearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmStaffTeacherEducatorResearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
