# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmCredentialEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'credential_event_date': 'date',
        'credential_event_type_descriptor': 'str',
        'credential_reference': 'EdFiCredentialReference',
        'credential_event_reason': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'credential_event_date': 'credentialEventDate',
        'credential_event_type_descriptor': 'credentialEventTypeDescriptor',
        'credential_reference': 'credentialReference',
        'credential_event_reason': 'credentialEventReason',
        'etag': '_etag'
    }

    def __init__(self, id=None, credential_event_date=None, credential_event_type_descriptor=None, credential_reference=None, credential_event_reason=None, etag=None):  # noqa: E501
        """TpdmCredentialEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._credential_event_date = None
        self._credential_event_type_descriptor = None
        self._credential_reference = None
        self._credential_event_reason = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.credential_event_date = credential_event_date
        self.credential_event_type_descriptor = credential_event_type_descriptor
        self.credential_reference = credential_reference
        if credential_event_reason is not None:
            self.credential_event_reason = credential_event_reason
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmCredentialEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmCredentialEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmCredentialEvent.

          # noqa: E501

        :param id: The id of this TpdmCredentialEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def credential_event_date(self):
        """Gets the credential_event_date of this TpdmCredentialEvent.  # noqa: E501

        The year, month and day of the Credential Event.  # noqa: E501

        :return: The credential_event_date of this TpdmCredentialEvent.  # noqa: E501
        :rtype: date
        """
        return self._credential_event_date

    @credential_event_date.setter
    def credential_event_date(self, credential_event_date):
        """Sets the credential_event_date of this TpdmCredentialEvent.

        The year, month and day of the Credential Event.  # noqa: E501

        :param credential_event_date: The credential_event_date of this TpdmCredentialEvent.  # noqa: E501
        :type: date
        """
        if credential_event_date is None:
            raise ValueError("Invalid value for `credential_event_date`, must not be `None`")  # noqa: E501

        self._credential_event_date = credential_event_date

    @property
    def credential_event_type_descriptor(self):
        """Gets the credential_event_type_descriptor of this TpdmCredentialEvent.  # noqa: E501

        The type of event associated with a person's Credential (e.g, suspension, revocation, or renewal).  # noqa: E501

        :return: The credential_event_type_descriptor of this TpdmCredentialEvent.  # noqa: E501
        :rtype: str
        """
        return self._credential_event_type_descriptor

    @credential_event_type_descriptor.setter
    def credential_event_type_descriptor(self, credential_event_type_descriptor):
        """Sets the credential_event_type_descriptor of this TpdmCredentialEvent.

        The type of event associated with a person's Credential (e.g, suspension, revocation, or renewal).  # noqa: E501

        :param credential_event_type_descriptor: The credential_event_type_descriptor of this TpdmCredentialEvent.  # noqa: E501
        :type: str
        """
        if credential_event_type_descriptor is None:
            raise ValueError("Invalid value for `credential_event_type_descriptor`, must not be `None`")  # noqa: E501
        if credential_event_type_descriptor is not None and len(credential_event_type_descriptor) > 306:
            raise ValueError("Invalid value for `credential_event_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credential_event_type_descriptor = credential_event_type_descriptor

    @property
    def credential_reference(self):
        """Gets the credential_reference of this TpdmCredentialEvent.  # noqa: E501


        :return: The credential_reference of this TpdmCredentialEvent.  # noqa: E501
        :rtype: EdFiCredentialReference
        """
        return self._credential_reference

    @credential_reference.setter
    def credential_reference(self, credential_reference):
        """Sets the credential_reference of this TpdmCredentialEvent.


        :param credential_reference: The credential_reference of this TpdmCredentialEvent.  # noqa: E501
        :type: EdFiCredentialReference
        """
        if credential_reference is None:
            raise ValueError("Invalid value for `credential_reference`, must not be `None`")  # noqa: E501

        self._credential_reference = credential_reference

    @property
    def credential_event_reason(self):
        """Gets the credential_event_reason of this TpdmCredentialEvent.  # noqa: E501

        The reason for the credential event, or any other descriptive text.  # noqa: E501

        :return: The credential_event_reason of this TpdmCredentialEvent.  # noqa: E501
        :rtype: str
        """
        return self._credential_event_reason

    @credential_event_reason.setter
    def credential_event_reason(self, credential_event_reason):
        """Sets the credential_event_reason of this TpdmCredentialEvent.

        The reason for the credential event, or any other descriptive text.  # noqa: E501

        :param credential_event_reason: The credential_event_reason of this TpdmCredentialEvent.  # noqa: E501
        :type: str
        """
        if credential_event_reason is not None and len(credential_event_reason) > 1024:
            raise ValueError("Invalid value for `credential_event_reason`, length must be less than or equal to `1024`")  # noqa: E501

        self._credential_event_reason = credential_event_reason

    @property
    def etag(self):
        """Gets the etag of this TpdmCredentialEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmCredentialEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmCredentialEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmCredentialEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmCredentialEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmCredentialEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
