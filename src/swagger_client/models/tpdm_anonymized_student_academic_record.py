# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmAnonymizedStudentAcademicRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'fact_as_of_date': 'date',
        'term_descriptor': 'str',
        'anonymized_student_reference': 'TpdmAnonymizedStudentReference',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'cumulative_grade_point_average': 'float',
        'gpa_max': 'float',
        'session_grade_point_average': 'float',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fact_as_of_date': 'factAsOfDate',
        'term_descriptor': 'termDescriptor',
        'anonymized_student_reference': 'anonymizedStudentReference',
        'education_organization_reference': 'educationOrganizationReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'cumulative_grade_point_average': 'cumulativeGradePointAverage',
        'gpa_max': 'gpaMax',
        'session_grade_point_average': 'sessionGradePointAverage',
        'etag': '_etag'
    }

    def __init__(self, id=None, fact_as_of_date=None, term_descriptor=None, anonymized_student_reference=None, education_organization_reference=None, school_year_type_reference=None, cumulative_grade_point_average=None, gpa_max=None, session_grade_point_average=None, etag=None):  # noqa: E501
        """TpdmAnonymizedStudentAcademicRecord - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._fact_as_of_date = None
        self._term_descriptor = None
        self._anonymized_student_reference = None
        self._education_organization_reference = None
        self._school_year_type_reference = None
        self._cumulative_grade_point_average = None
        self._gpa_max = None
        self._session_grade_point_average = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.fact_as_of_date = fact_as_of_date
        self.term_descriptor = term_descriptor
        self.anonymized_student_reference = anonymized_student_reference
        self.education_organization_reference = education_organization_reference
        self.school_year_type_reference = school_year_type_reference
        if cumulative_grade_point_average is not None:
            self.cumulative_grade_point_average = cumulative_grade_point_average
        if gpa_max is not None:
            self.gpa_max = gpa_max
        if session_grade_point_average is not None:
            self.session_grade_point_average = session_grade_point_average
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmAnonymizedStudentAcademicRecord.

          # noqa: E501

        :param id: The id of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def fact_as_of_date(self):
        """Gets the fact_as_of_date of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        The date for which the data element is relevant  # noqa: E501

        :return: The fact_as_of_date of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: date
        """
        return self._fact_as_of_date

    @fact_as_of_date.setter
    def fact_as_of_date(self, fact_as_of_date):
        """Sets the fact_as_of_date of this TpdmAnonymizedStudentAcademicRecord.

        The date for which the data element is relevant  # noqa: E501

        :param fact_as_of_date: The fact_as_of_date of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: date
        """
        if fact_as_of_date is None:
            raise ValueError("Invalid value for `fact_as_of_date`, must not be `None`")  # noqa: E501

        self._fact_as_of_date = fact_as_of_date

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        The term for the session during the school year.  # noqa: E501

        :return: The term_descriptor of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this TpdmAnonymizedStudentAcademicRecord.

        The term for the session during the school year.  # noqa: E501

        :param term_descriptor: The term_descriptor of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if term_descriptor is None:
            raise ValueError("Invalid value for `term_descriptor`, must not be `None`")  # noqa: E501
        if term_descriptor is not None and len(term_descriptor) > 306:
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def anonymized_student_reference(self):
        """Gets the anonymized_student_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501


        :return: The anonymized_student_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: TpdmAnonymizedStudentReference
        """
        return self._anonymized_student_reference

    @anonymized_student_reference.setter
    def anonymized_student_reference(self, anonymized_student_reference):
        """Sets the anonymized_student_reference of this TpdmAnonymizedStudentAcademicRecord.


        :param anonymized_student_reference: The anonymized_student_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: TpdmAnonymizedStudentReference
        """
        if anonymized_student_reference is None:
            raise ValueError("Invalid value for `anonymized_student_reference`, must not be `None`")  # noqa: E501

        self._anonymized_student_reference = anonymized_student_reference

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501


        :return: The education_organization_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmAnonymizedStudentAcademicRecord.


        :param education_organization_reference: The education_organization_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501


        :return: The school_year_type_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this TpdmAnonymizedStudentAcademicRecord.


        :param school_year_type_reference: The school_year_type_reference of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def cumulative_grade_point_average(self):
        """Gets the cumulative_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        The average cumulative grade point average for a student  # noqa: E501

        :return: The cumulative_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_grade_point_average

    @cumulative_grade_point_average.setter
    def cumulative_grade_point_average(self, cumulative_grade_point_average):
        """Sets the cumulative_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.

        The average cumulative grade point average for a student  # noqa: E501

        :param cumulative_grade_point_average: The cumulative_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_grade_point_average = cumulative_grade_point_average

    @property
    def gpa_max(self):
        """Gets the gpa_max of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        The maximum grade point average that can be achieved by a student  # noqa: E501

        :return: The gpa_max of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._gpa_max

    @gpa_max.setter
    def gpa_max(self, gpa_max):
        """Sets the gpa_max of this TpdmAnonymizedStudentAcademicRecord.

        The maximum grade point average that can be achieved by a student  # noqa: E501

        :param gpa_max: The gpa_max of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._gpa_max = gpa_max

    @property
    def session_grade_point_average(self):
        """Gets the session_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        The number of grade points an individual earned for this session.  # noqa: E501

        :return: The session_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_grade_point_average

    @session_grade_point_average.setter
    def session_grade_point_average(self, session_grade_point_average):
        """Sets the session_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.

        The number of grade points an individual earned for this session.  # noqa: E501

        :param session_grade_point_average: The session_grade_point_average of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_grade_point_average = session_grade_point_average

    @property
    def etag(self):
        """Gets the etag of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmAnonymizedStudentAcademicRecord.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmAnonymizedStudentAcademicRecord.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmAnonymizedStudentAcademicRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmAnonymizedStudentAcademicRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
