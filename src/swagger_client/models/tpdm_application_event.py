# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmApplicationEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'application_event_type_descriptor': 'str',
        'event_date': 'date',
        'sequence_number': 'int',
        'application_reference': 'TpdmApplicationReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'application_evaluation_score': 'float',
        'application_event_result_descriptor': 'str',
        'event_end_date': 'date',
        'term_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'application_event_type_descriptor': 'applicationEventTypeDescriptor',
        'event_date': 'eventDate',
        'sequence_number': 'sequenceNumber',
        'application_reference': 'applicationReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'application_evaluation_score': 'applicationEvaluationScore',
        'application_event_result_descriptor': 'applicationEventResultDescriptor',
        'event_end_date': 'eventEndDate',
        'term_descriptor': 'termDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, application_event_type_descriptor=None, event_date=None, sequence_number=None, application_reference=None, school_year_type_reference=None, application_evaluation_score=None, application_event_result_descriptor=None, event_end_date=None, term_descriptor=None, etag=None):  # noqa: E501
        """TpdmApplicationEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._application_event_type_descriptor = None
        self._event_date = None
        self._sequence_number = None
        self._application_reference = None
        self._school_year_type_reference = None
        self._application_evaluation_score = None
        self._application_event_result_descriptor = None
        self._event_end_date = None
        self._term_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.application_event_type_descriptor = application_event_type_descriptor
        self.event_date = event_date
        self.sequence_number = sequence_number
        self.application_reference = application_reference
        self.school_year_type_reference = school_year_type_reference
        if application_evaluation_score is not None:
            self.application_evaluation_score = application_evaluation_score
        if application_event_result_descriptor is not None:
            self.application_event_result_descriptor = application_event_result_descriptor
        if event_end_date is not None:
            self.event_end_date = event_end_date
        if term_descriptor is not None:
            self.term_descriptor = term_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmApplicationEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmApplicationEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmApplicationEvent.

          # noqa: E501

        :param id: The id of this TpdmApplicationEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def application_event_type_descriptor(self):
        """Gets the application_event_type_descriptor of this TpdmApplicationEvent.  # noqa: E501

        Description of application event (e.g., added to pool, phone screen, interview, sample lesson).  # noqa: E501

        :return: The application_event_type_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :rtype: str
        """
        return self._application_event_type_descriptor

    @application_event_type_descriptor.setter
    def application_event_type_descriptor(self, application_event_type_descriptor):
        """Sets the application_event_type_descriptor of this TpdmApplicationEvent.

        Description of application event (e.g., added to pool, phone screen, interview, sample lesson).  # noqa: E501

        :param application_event_type_descriptor: The application_event_type_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :type: str
        """
        if application_event_type_descriptor is None:
            raise ValueError("Invalid value for `application_event_type_descriptor`, must not be `None`")  # noqa: E501
        if application_event_type_descriptor is not None and len(application_event_type_descriptor) > 306:
            raise ValueError("Invalid value for `application_event_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._application_event_type_descriptor = application_event_type_descriptor

    @property
    def event_date(self):
        """Gets the event_date of this TpdmApplicationEvent.  # noqa: E501

        The date of the application event, or begin date if an interval.  # noqa: E501

        :return: The event_date of this TpdmApplicationEvent.  # noqa: E501
        :rtype: date
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this TpdmApplicationEvent.

        The date of the application event, or begin date if an interval.  # noqa: E501

        :param event_date: The event_date of this TpdmApplicationEvent.  # noqa: E501
        :type: date
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def sequence_number(self):
        """Gets the sequence_number of this TpdmApplicationEvent.  # noqa: E501

        The sequence number of the application events. This is used to discriminate between mutiple events of the same type in the same day.  # noqa: E501

        :return: The sequence_number of this TpdmApplicationEvent.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this TpdmApplicationEvent.

        The sequence number of the application events. This is used to discriminate between mutiple events of the same type in the same day.  # noqa: E501

        :param sequence_number: The sequence_number of this TpdmApplicationEvent.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def application_reference(self):
        """Gets the application_reference of this TpdmApplicationEvent.  # noqa: E501


        :return: The application_reference of this TpdmApplicationEvent.  # noqa: E501
        :rtype: TpdmApplicationReference
        """
        return self._application_reference

    @application_reference.setter
    def application_reference(self, application_reference):
        """Sets the application_reference of this TpdmApplicationEvent.


        :param application_reference: The application_reference of this TpdmApplicationEvent.  # noqa: E501
        :type: TpdmApplicationReference
        """
        if application_reference is None:
            raise ValueError("Invalid value for `application_reference`, must not be `None`")  # noqa: E501

        self._application_reference = application_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this TpdmApplicationEvent.  # noqa: E501


        :return: The school_year_type_reference of this TpdmApplicationEvent.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this TpdmApplicationEvent.


        :param school_year_type_reference: The school_year_type_reference of this TpdmApplicationEvent.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def application_evaluation_score(self):
        """Gets the application_evaluation_score of this TpdmApplicationEvent.  # noqa: E501

        Application evaluation score, if applicable.  # noqa: E501

        :return: The application_evaluation_score of this TpdmApplicationEvent.  # noqa: E501
        :rtype: float
        """
        return self._application_evaluation_score

    @application_evaluation_score.setter
    def application_evaluation_score(self, application_evaluation_score):
        """Sets the application_evaluation_score of this TpdmApplicationEvent.

        Application evaluation score, if applicable.  # noqa: E501

        :param application_evaluation_score: The application_evaluation_score of this TpdmApplicationEvent.  # noqa: E501
        :type: float
        """

        self._application_evaluation_score = application_evaluation_score

    @property
    def application_event_result_descriptor(self):
        """Gets the application_event_result_descriptor of this TpdmApplicationEvent.  # noqa: E501

        The recommendation, result or conclusion of the application event (e.g., Continue, exit, recommend for hire).  # noqa: E501

        :return: The application_event_result_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :rtype: str
        """
        return self._application_event_result_descriptor

    @application_event_result_descriptor.setter
    def application_event_result_descriptor(self, application_event_result_descriptor):
        """Sets the application_event_result_descriptor of this TpdmApplicationEvent.

        The recommendation, result or conclusion of the application event (e.g., Continue, exit, recommend for hire).  # noqa: E501

        :param application_event_result_descriptor: The application_event_result_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :type: str
        """
        if application_event_result_descriptor is not None and len(application_event_result_descriptor) > 306:
            raise ValueError("Invalid value for `application_event_result_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._application_event_result_descriptor = application_event_result_descriptor

    @property
    def event_end_date(self):
        """Gets the event_end_date of this TpdmApplicationEvent.  # noqa: E501

        The end date of the event, if an interval.  # noqa: E501

        :return: The event_end_date of this TpdmApplicationEvent.  # noqa: E501
        :rtype: date
        """
        return self._event_end_date

    @event_end_date.setter
    def event_end_date(self, event_end_date):
        """Sets the event_end_date of this TpdmApplicationEvent.

        The end date of the event, if an interval.  # noqa: E501

        :param event_end_date: The event_end_date of this TpdmApplicationEvent.  # noqa: E501
        :type: date
        """

        self._event_end_date = event_end_date

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this TpdmApplicationEvent.  # noqa: E501

        This descriptor defines the term of a session during the school year (e.g., Fall Semester).  # noqa: E501

        :return: The term_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this TpdmApplicationEvent.

        This descriptor defines the term of a session during the school year (e.g., Fall Semester).  # noqa: E501

        :param term_descriptor: The term_descriptor of this TpdmApplicationEvent.  # noqa: E501
        :type: str
        """
        if term_descriptor is not None and len(term_descriptor) > 306:
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmApplicationEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmApplicationEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmApplicationEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmApplicationEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmApplicationEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmApplicationEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
