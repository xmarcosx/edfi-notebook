# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmStaffExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender_descriptor': 'str',
        'probation_complete_date': 'date',
        'tenured': 'bool',
        'tenure_track': 'bool',
        'background_checks': 'list[TpdmStaffBackgroundCheck]',
        'highly_qualified_academic_subjects': 'list[TpdmStaffHighlyQualifiedAcademicSubject]',
        'seniorities': 'list[TpdmStaffSeniority]',
        'teacher_preparation_programs': 'list[TpdmStaffTeacherPreparationProgram]',
        'salary': 'TpdmStaffSalary',
        'teacher_educator_research': 'TpdmStaffTeacherEducatorResearch'
    }

    attribute_map = {
        'gender_descriptor': 'genderDescriptor',
        'probation_complete_date': 'probationCompleteDate',
        'tenured': 'tenured',
        'tenure_track': 'tenureTrack',
        'background_checks': 'backgroundChecks',
        'highly_qualified_academic_subjects': 'highlyQualifiedAcademicSubjects',
        'seniorities': 'seniorities',
        'teacher_preparation_programs': 'teacherPreparationPrograms',
        'salary': 'salary',
        'teacher_educator_research': 'teacherEducatorResearch'
    }

    def __init__(self, gender_descriptor=None, probation_complete_date=None, tenured=None, tenure_track=None, background_checks=None, highly_qualified_academic_subjects=None, seniorities=None, teacher_preparation_programs=None, salary=None, teacher_educator_research=None):  # noqa: E501
        """TpdmStaffExtension - a model defined in Swagger"""  # noqa: E501

        self._gender_descriptor = None
        self._probation_complete_date = None
        self._tenured = None
        self._tenure_track = None
        self._background_checks = None
        self._highly_qualified_academic_subjects = None
        self._seniorities = None
        self._teacher_preparation_programs = None
        self._salary = None
        self._teacher_educator_research = None
        self.discriminator = None

        if gender_descriptor is not None:
            self.gender_descriptor = gender_descriptor
        if probation_complete_date is not None:
            self.probation_complete_date = probation_complete_date
        if tenured is not None:
            self.tenured = tenured
        if tenure_track is not None:
            self.tenure_track = tenure_track
        if background_checks is not None:
            self.background_checks = background_checks
        if highly_qualified_academic_subjects is not None:
            self.highly_qualified_academic_subjects = highly_qualified_academic_subjects
        if seniorities is not None:
            self.seniorities = seniorities
        if teacher_preparation_programs is not None:
            self.teacher_preparation_programs = teacher_preparation_programs
        if salary is not None:
            self.salary = salary
        if teacher_educator_research is not None:
            self.teacher_educator_research = teacher_educator_research

    @property
    def gender_descriptor(self):
        """Gets the gender_descriptor of this TpdmStaffExtension.  # noqa: E501

        The gender with which a person associates.  # noqa: E501

        :return: The gender_descriptor of this TpdmStaffExtension.  # noqa: E501
        :rtype: str
        """
        return self._gender_descriptor

    @gender_descriptor.setter
    def gender_descriptor(self, gender_descriptor):
        """Sets the gender_descriptor of this TpdmStaffExtension.

        The gender with which a person associates.  # noqa: E501

        :param gender_descriptor: The gender_descriptor of this TpdmStaffExtension.  # noqa: E501
        :type: str
        """
        if gender_descriptor is not None and len(gender_descriptor) > 306:
            raise ValueError("Invalid value for `gender_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._gender_descriptor = gender_descriptor

    @property
    def probation_complete_date(self):
        """Gets the probation_complete_date of this TpdmStaffExtension.  # noqa: E501

        The date the probation period ended or is scheduled to end.  # noqa: E501

        :return: The probation_complete_date of this TpdmStaffExtension.  # noqa: E501
        :rtype: date
        """
        return self._probation_complete_date

    @probation_complete_date.setter
    def probation_complete_date(self, probation_complete_date):
        """Sets the probation_complete_date of this TpdmStaffExtension.

        The date the probation period ended or is scheduled to end.  # noqa: E501

        :param probation_complete_date: The probation_complete_date of this TpdmStaffExtension.  # noqa: E501
        :type: date
        """

        self._probation_complete_date = probation_complete_date

    @property
    def tenured(self):
        """Gets the tenured of this TpdmStaffExtension.  # noqa: E501

        Indicator of whether the staff member is tenured.  # noqa: E501

        :return: The tenured of this TpdmStaffExtension.  # noqa: E501
        :rtype: bool
        """
        return self._tenured

    @tenured.setter
    def tenured(self, tenured):
        """Sets the tenured of this TpdmStaffExtension.

        Indicator of whether the staff member is tenured.  # noqa: E501

        :param tenured: The tenured of this TpdmStaffExtension.  # noqa: E501
        :type: bool
        """

        self._tenured = tenured

    @property
    def tenure_track(self):
        """Gets the tenure_track of this TpdmStaffExtension.  # noqa: E501

        An indication that the staff is on track for tenure.  # noqa: E501

        :return: The tenure_track of this TpdmStaffExtension.  # noqa: E501
        :rtype: bool
        """
        return self._tenure_track

    @tenure_track.setter
    def tenure_track(self, tenure_track):
        """Sets the tenure_track of this TpdmStaffExtension.

        An indication that the staff is on track for tenure.  # noqa: E501

        :param tenure_track: The tenure_track of this TpdmStaffExtension.  # noqa: E501
        :type: bool
        """

        self._tenure_track = tenure_track

    @property
    def background_checks(self):
        """Gets the background_checks of this TpdmStaffExtension.  # noqa: E501

        An unordered collection of staffBackgroundChecks. Staff background check history and disposition.  # noqa: E501

        :return: The background_checks of this TpdmStaffExtension.  # noqa: E501
        :rtype: list[TpdmStaffBackgroundCheck]
        """
        return self._background_checks

    @background_checks.setter
    def background_checks(self, background_checks):
        """Sets the background_checks of this TpdmStaffExtension.

        An unordered collection of staffBackgroundChecks. Staff background check history and disposition.  # noqa: E501

        :param background_checks: The background_checks of this TpdmStaffExtension.  # noqa: E501
        :type: list[TpdmStaffBackgroundCheck]
        """

        self._background_checks = background_checks

    @property
    def highly_qualified_academic_subjects(self):
        """Gets the highly_qualified_academic_subjects of this TpdmStaffExtension.  # noqa: E501

        An unordered collection of staffHighlyQualifiedAcademicSubjects. The academic subject(s) in which the staff is deemed to be \"highly qualified\".  # noqa: E501

        :return: The highly_qualified_academic_subjects of this TpdmStaffExtension.  # noqa: E501
        :rtype: list[TpdmStaffHighlyQualifiedAcademicSubject]
        """
        return self._highly_qualified_academic_subjects

    @highly_qualified_academic_subjects.setter
    def highly_qualified_academic_subjects(self, highly_qualified_academic_subjects):
        """Sets the highly_qualified_academic_subjects of this TpdmStaffExtension.

        An unordered collection of staffHighlyQualifiedAcademicSubjects. The academic subject(s) in which the staff is deemed to be \"highly qualified\".  # noqa: E501

        :param highly_qualified_academic_subjects: The highly_qualified_academic_subjects of this TpdmStaffExtension.  # noqa: E501
        :type: list[TpdmStaffHighlyQualifiedAcademicSubject]
        """

        self._highly_qualified_academic_subjects = highly_qualified_academic_subjects

    @property
    def seniorities(self):
        """Gets the seniorities of this TpdmStaffExtension.  # noqa: E501

        An unordered collection of staffSeniorities. Entries of job experience contributing to computations of seniority.  # noqa: E501

        :return: The seniorities of this TpdmStaffExtension.  # noqa: E501
        :rtype: list[TpdmStaffSeniority]
        """
        return self._seniorities

    @seniorities.setter
    def seniorities(self, seniorities):
        """Sets the seniorities of this TpdmStaffExtension.

        An unordered collection of staffSeniorities. Entries of job experience contributing to computations of seniority.  # noqa: E501

        :param seniorities: The seniorities of this TpdmStaffExtension.  # noqa: E501
        :type: list[TpdmStaffSeniority]
        """

        self._seniorities = seniorities

    @property
    def teacher_preparation_programs(self):
        """Gets the teacher_preparation_programs of this TpdmStaffExtension.  # noqa: E501

        An unordered collection of staffTeacherPreparationPrograms. The Teacher Preparation Program(s) completed by the teacher.  # noqa: E501

        :return: The teacher_preparation_programs of this TpdmStaffExtension.  # noqa: E501
        :rtype: list[TpdmStaffTeacherPreparationProgram]
        """
        return self._teacher_preparation_programs

    @teacher_preparation_programs.setter
    def teacher_preparation_programs(self, teacher_preparation_programs):
        """Sets the teacher_preparation_programs of this TpdmStaffExtension.

        An unordered collection of staffTeacherPreparationPrograms. The Teacher Preparation Program(s) completed by the teacher.  # noqa: E501

        :param teacher_preparation_programs: The teacher_preparation_programs of this TpdmStaffExtension.  # noqa: E501
        :type: list[TpdmStaffTeacherPreparationProgram]
        """

        self._teacher_preparation_programs = teacher_preparation_programs

    @property
    def salary(self):
        """Gets the salary of this TpdmStaffExtension.  # noqa: E501


        :return: The salary of this TpdmStaffExtension.  # noqa: E501
        :rtype: TpdmStaffSalary
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this TpdmStaffExtension.


        :param salary: The salary of this TpdmStaffExtension.  # noqa: E501
        :type: TpdmStaffSalary
        """

        self._salary = salary

    @property
    def teacher_educator_research(self):
        """Gets the teacher_educator_research of this TpdmStaffExtension.  # noqa: E501


        :return: The teacher_educator_research of this TpdmStaffExtension.  # noqa: E501
        :rtype: TpdmStaffTeacherEducatorResearch
        """
        return self._teacher_educator_research

    @teacher_educator_research.setter
    def teacher_educator_research(self, teacher_educator_research):
        """Sets the teacher_educator_research of this TpdmStaffExtension.


        :param teacher_educator_research: The teacher_educator_research of this TpdmStaffExtension.  # noqa: E501
        :type: TpdmStaffTeacherEducatorResearch
        """

        self._teacher_educator_research = teacher_educator_research

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmStaffExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmStaffExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
