# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmProspectCurrentPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'academic_subject_descriptor': 'str',
        'location': 'str',
        'name_of_institution': 'str',
        'position_title': 'str',
        'grade_levels': 'list[TpdmProspectCurrentPositionGradeLevel]'
    }

    attribute_map = {
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'location': 'location',
        'name_of_institution': 'nameOfInstitution',
        'position_title': 'positionTitle',
        'grade_levels': 'gradeLevels'
    }

    def __init__(self, academic_subject_descriptor=None, location=None, name_of_institution=None, position_title=None, grade_levels=None):  # noqa: E501
        """TpdmProspectCurrentPosition - a model defined in Swagger"""  # noqa: E501

        self._academic_subject_descriptor = None
        self._location = None
        self._name_of_institution = None
        self._position_title = None
        self._grade_levels = None
        self.discriminator = None

        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        self.location = location
        self.name_of_institution = name_of_institution
        self.position_title = position_title
        if grade_levels is not None:
            self.grade_levels = grade_levels

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this TpdmProspectCurrentPosition.  # noqa: E501

        The academic subject the staff person's assignment to a school.  # noqa: E501

        :return: The academic_subject_descriptor of this TpdmProspectCurrentPosition.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this TpdmProspectCurrentPosition.

        The academic subject the staff person's assignment to a school.  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this TpdmProspectCurrentPosition.  # noqa: E501
        :type: str
        """
        if academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306:
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def location(self):
        """Gets the location of this TpdmProspectCurrentPosition.  # noqa: E501

        The location, typically City and State, for the institution.  # noqa: E501

        :return: The location of this TpdmProspectCurrentPosition.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TpdmProspectCurrentPosition.

        The location, typically City and State, for the institution.  # noqa: E501

        :param location: The location of this TpdmProspectCurrentPosition.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if location is not None and len(location) > 75:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `75`")  # noqa: E501

        self._location = location

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this TpdmProspectCurrentPosition.  # noqa: E501

        The formal name of the education organization.  # noqa: E501

        :return: The name_of_institution of this TpdmProspectCurrentPosition.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this TpdmProspectCurrentPosition.

        The formal name of the education organization.  # noqa: E501

        :param name_of_institution: The name_of_institution of this TpdmProspectCurrentPosition.  # noqa: E501
        :type: str
        """
        if name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if name_of_institution is not None and len(name_of_institution) > 75:
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def position_title(self):
        """Gets the position_title of this TpdmProspectCurrentPosition.  # noqa: E501

        The descriptive name of an individual's position.  # noqa: E501

        :return: The position_title of this TpdmProspectCurrentPosition.  # noqa: E501
        :rtype: str
        """
        return self._position_title

    @position_title.setter
    def position_title(self, position_title):
        """Sets the position_title of this TpdmProspectCurrentPosition.

        The descriptive name of an individual's position.  # noqa: E501

        :param position_title: The position_title of this TpdmProspectCurrentPosition.  # noqa: E501
        :type: str
        """
        if position_title is None:
            raise ValueError("Invalid value for `position_title`, must not be `None`")  # noqa: E501
        if position_title is not None and len(position_title) > 100:
            raise ValueError("Invalid value for `position_title`, length must be less than or equal to `100`")  # noqa: E501

        self._position_title = position_title

    @property
    def grade_levels(self):
        """Gets the grade_levels of this TpdmProspectCurrentPosition.  # noqa: E501

        An unordered collection of prospectCurrentPositionGradeLevels. The set of grade levels for which the individual's assignment is responsible.  # noqa: E501

        :return: The grade_levels of this TpdmProspectCurrentPosition.  # noqa: E501
        :rtype: list[TpdmProspectCurrentPositionGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this TpdmProspectCurrentPosition.

        An unordered collection of prospectCurrentPositionGradeLevels. The set of grade levels for which the individual's assignment is responsible.  # noqa: E501

        :param grade_levels: The grade_levels of this TpdmProspectCurrentPosition.  # noqa: E501
        :type: list[TpdmProspectCurrentPositionGradeLevel]
        """

        self._grade_levels = grade_levels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmProspectCurrentPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmProspectCurrentPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
