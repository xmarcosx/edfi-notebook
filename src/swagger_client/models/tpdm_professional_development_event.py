# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmProfessionalDevelopmentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'namespace': 'str',
        'professional_development_title': 'str',
        'multiple_session': 'bool',
        'professional_development_offered_by_descriptor': 'str',
        'professional_development_reason': 'str',
        'required': 'bool',
        'total_hours': 'int',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'professional_development_title': 'professionalDevelopmentTitle',
        'multiple_session': 'multipleSession',
        'professional_development_offered_by_descriptor': 'professionalDevelopmentOfferedByDescriptor',
        'professional_development_reason': 'professionalDevelopmentReason',
        'required': 'required',
        'total_hours': 'totalHours',
        'etag': '_etag'
    }

    def __init__(self, id=None, namespace=None, professional_development_title=None, multiple_session=None, professional_development_offered_by_descriptor=None, professional_development_reason=None, required=None, total_hours=None, etag=None):  # noqa: E501
        """TpdmProfessionalDevelopmentEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._professional_development_title = None
        self._multiple_session = None
        self._professional_development_offered_by_descriptor = None
        self._professional_development_reason = None
        self._required = None
        self._total_hours = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.namespace = namespace
        self.professional_development_title = professional_development_title
        if multiple_session is not None:
            self.multiple_session = multiple_session
        self.professional_development_offered_by_descriptor = professional_development_offered_by_descriptor
        if professional_development_reason is not None:
            self.professional_development_reason = professional_development_reason
        if required is not None:
            self.required = required
        if total_hours is not None:
            self.total_hours = total_hours
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmProfessionalDevelopmentEvent.

          # noqa: E501

        :param id: The id of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        Namespace for the event, typically associated with the issuing authority.  # noqa: E501

        :return: The namespace of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TpdmProfessionalDevelopmentEvent.

        Namespace for the event, typically associated with the issuing authority.  # noqa: E501

        :param namespace: The namespace of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if namespace is not None and len(namespace) > 255:
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def professional_development_title(self):
        """Gets the professional_development_title of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        The title or name for a professional development.  # noqa: E501

        :return: The professional_development_title of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._professional_development_title

    @professional_development_title.setter
    def professional_development_title(self, professional_development_title):
        """Sets the professional_development_title of this TpdmProfessionalDevelopmentEvent.

        The title or name for a professional development.  # noqa: E501

        :param professional_development_title: The professional_development_title of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """
        if professional_development_title is None:
            raise ValueError("Invalid value for `professional_development_title`, must not be `None`")  # noqa: E501
        if professional_development_title is not None and len(professional_development_title) > 60:
            raise ValueError("Invalid value for `professional_development_title`, length must be less than or equal to `60`")  # noqa: E501

        self._professional_development_title = professional_development_title

    @property
    def multiple_session(self):
        """Gets the multiple_session of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        An indication of whether or not a professional development event is comprised of multiple sessions or not.  # noqa: E501

        :return: The multiple_session of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_session

    @multiple_session.setter
    def multiple_session(self, multiple_session):
        """Sets the multiple_session of this TpdmProfessionalDevelopmentEvent.

        An indication of whether or not a professional development event is comprised of multiple sessions or not.  # noqa: E501

        :param multiple_session: The multiple_session of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: bool
        """

        self._multiple_session = multiple_session

    @property
    def professional_development_offered_by_descriptor(self):
        """Gets the professional_development_offered_by_descriptor of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        A code describing an organization that is offering a specific professional development.  # noqa: E501

        :return: The professional_development_offered_by_descriptor of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._professional_development_offered_by_descriptor

    @professional_development_offered_by_descriptor.setter
    def professional_development_offered_by_descriptor(self, professional_development_offered_by_descriptor):
        """Sets the professional_development_offered_by_descriptor of this TpdmProfessionalDevelopmentEvent.

        A code describing an organization that is offering a specific professional development.  # noqa: E501

        :param professional_development_offered_by_descriptor: The professional_development_offered_by_descriptor of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """
        if professional_development_offered_by_descriptor is None:
            raise ValueError("Invalid value for `professional_development_offered_by_descriptor`, must not be `None`")  # noqa: E501
        if professional_development_offered_by_descriptor is not None and len(professional_development_offered_by_descriptor) > 306:
            raise ValueError("Invalid value for `professional_development_offered_by_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._professional_development_offered_by_descriptor = professional_development_offered_by_descriptor

    @property
    def professional_development_reason(self):
        """Gets the professional_development_reason of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        The reported reason for a teacher candidate's professional development.  # noqa: E501

        :return: The professional_development_reason of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._professional_development_reason

    @professional_development_reason.setter
    def professional_development_reason(self, professional_development_reason):
        """Sets the professional_development_reason of this TpdmProfessionalDevelopmentEvent.

        The reported reason for a teacher candidate's professional development.  # noqa: E501

        :param professional_development_reason: The professional_development_reason of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """
        if professional_development_reason is not None and len(professional_development_reason) > 60:
            raise ValueError("Invalid value for `professional_development_reason`, length must be less than or equal to `60`")  # noqa: E501

        self._professional_development_reason = professional_development_reason

    @property
    def required(self):
        """Gets the required of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        An indication of whether a teacher candidate is active in a professional development.  # noqa: E501

        :return: The required of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TpdmProfessionalDevelopmentEvent.

        An indication of whether a teacher candidate is active in a professional development.  # noqa: E501

        :param required: The required of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def total_hours(self):
        """Gets the total_hours of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        The number of total hours the professional development contains.  # noqa: E501

        :return: The total_hours of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: int
        """
        return self._total_hours

    @total_hours.setter
    def total_hours(self, total_hours):
        """Sets the total_hours of this TpdmProfessionalDevelopmentEvent.

        The number of total hours the professional development contains.  # noqa: E501

        :param total_hours: The total_hours of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: int
        """

        self._total_hours = total_hours

    @property
    def etag(self):
        """Gets the etag of this TpdmProfessionalDevelopmentEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmProfessionalDevelopmentEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmProfessionalDevelopmentEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmProfessionalDevelopmentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmProfessionalDevelopmentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
