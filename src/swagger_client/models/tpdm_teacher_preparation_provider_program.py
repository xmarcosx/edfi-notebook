# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmTeacherPreparationProviderProgram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'program_name': 'str',
        'program_type_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'grade_levels': 'list[TpdmTeacherPreparationProviderProgramGradeLevel]',
        'major_specialization': 'str',
        'minor_specialization': 'str',
        'program_id': 'str',
        'teacher_preparation_program_type_descriptor': 'str',
        'tpp_program_pathway_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'program_name': 'programName',
        'program_type_descriptor': 'programTypeDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'grade_levels': 'gradeLevels',
        'major_specialization': 'majorSpecialization',
        'minor_specialization': 'minorSpecialization',
        'program_id': 'programId',
        'teacher_preparation_program_type_descriptor': 'teacherPreparationProgramTypeDescriptor',
        'tpp_program_pathway_descriptor': 'tppProgramPathwayDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, program_name=None, program_type_descriptor=None, education_organization_reference=None, grade_levels=None, major_specialization=None, minor_specialization=None, program_id=None, teacher_preparation_program_type_descriptor=None, tpp_program_pathway_descriptor=None, etag=None):  # noqa: E501
        """TpdmTeacherPreparationProviderProgram - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._program_name = None
        self._program_type_descriptor = None
        self._education_organization_reference = None
        self._grade_levels = None
        self._major_specialization = None
        self._minor_specialization = None
        self._program_id = None
        self._teacher_preparation_program_type_descriptor = None
        self._tpp_program_pathway_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.program_name = program_name
        self.program_type_descriptor = program_type_descriptor
        self.education_organization_reference = education_organization_reference
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if major_specialization is not None:
            self.major_specialization = major_specialization
        if minor_specialization is not None:
            self.minor_specialization = minor_specialization
        if program_id is not None:
            self.program_id = program_id
        if teacher_preparation_program_type_descriptor is not None:
            self.teacher_preparation_program_type_descriptor = teacher_preparation_program_type_descriptor
        if tpp_program_pathway_descriptor is not None:
            self.tpp_program_pathway_descriptor = tpp_program_pathway_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmTeacherPreparationProviderProgram.

          # noqa: E501

        :param id: The id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def program_name(self):
        """Gets the program_name of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        The name of the Teacher Preparation Program.  # noqa: E501

        :return: The program_name of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this TpdmTeacherPreparationProviderProgram.

        The name of the Teacher Preparation Program.  # noqa: E501

        :param program_name: The program_name of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if program_name is None:
            raise ValueError("Invalid value for `program_name`, must not be `None`")  # noqa: E501
        if program_name is not None and len(program_name) > 255:
            raise ValueError("Invalid value for `program_name`, length must be less than or equal to `255`")  # noqa: E501

        self._program_name = program_name

    @property
    def program_type_descriptor(self):
        """Gets the program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        The type of program.  # noqa: E501

        :return: The program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_type_descriptor

    @program_type_descriptor.setter
    def program_type_descriptor(self, program_type_descriptor):
        """Sets the program_type_descriptor of this TpdmTeacherPreparationProviderProgram.

        The type of program.  # noqa: E501

        :param program_type_descriptor: The program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if program_type_descriptor is None:
            raise ValueError("Invalid value for `program_type_descriptor`, must not be `None`")  # noqa: E501
        if program_type_descriptor is not None and len(program_type_descriptor) > 306:
            raise ValueError("Invalid value for `program_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._program_type_descriptor = program_type_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmTeacherPreparationProviderProgram.  # noqa: E501


        :return: The education_organization_reference of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmTeacherPreparationProviderProgram.


        :param education_organization_reference: The education_organization_reference of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def grade_levels(self):
        """Gets the grade_levels of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        An unordered collection of teacherPreparationProviderProgramGradeLevels. The grade levels served at the TPP Program.  # noqa: E501

        :return: The grade_levels of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: list[TpdmTeacherPreparationProviderProgramGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this TpdmTeacherPreparationProviderProgram.

        An unordered collection of teacherPreparationProviderProgramGradeLevels. The grade levels served at the TPP Program.  # noqa: E501

        :param grade_levels: The grade_levels of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: list[TpdmTeacherPreparationProviderProgramGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def major_specialization(self):
        """Gets the major_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        The major area for a degree or area of specialization for a certificate.  # noqa: E501

        :return: The major_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._major_specialization

    @major_specialization.setter
    def major_specialization(self, major_specialization):
        """Sets the major_specialization of this TpdmTeacherPreparationProviderProgram.

        The major area for a degree or area of specialization for a certificate.  # noqa: E501

        :param major_specialization: The major_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if major_specialization is not None and len(major_specialization) > 75:
            raise ValueError("Invalid value for `major_specialization`, length must be less than or equal to `75`")  # noqa: E501

        self._major_specialization = major_specialization

    @property
    def minor_specialization(self):
        """Gets the minor_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        The minor area for a degree or area of specialization for a certificate.  # noqa: E501

        :return: The minor_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._minor_specialization

    @minor_specialization.setter
    def minor_specialization(self, minor_specialization):
        """Sets the minor_specialization of this TpdmTeacherPreparationProviderProgram.

        The minor area for a degree or area of specialization for a certificate.  # noqa: E501

        :param minor_specialization: The minor_specialization of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if minor_specialization is not None and len(minor_specialization) > 75:
            raise ValueError("Invalid value for `minor_specialization`, length must be less than or equal to `75`")  # noqa: E501

        self._minor_specialization = minor_specialization

    @property
    def program_id(self):
        """Gets the program_id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The program_id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this TpdmTeacherPreparationProviderProgram.

        A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param program_id: The program_id of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if program_id is not None and len(program_id) > 20:
            raise ValueError("Invalid value for `program_id`, length must be less than or equal to `20`")  # noqa: E501

        self._program_id = program_id

    @property
    def teacher_preparation_program_type_descriptor(self):
        """Gets the teacher_preparation_program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        The descriptor holds the type of teacher prep program (e.g., college, alternative, TFA, etc.).  # noqa: E501

        :return: The teacher_preparation_program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._teacher_preparation_program_type_descriptor

    @teacher_preparation_program_type_descriptor.setter
    def teacher_preparation_program_type_descriptor(self, teacher_preparation_program_type_descriptor):
        """Sets the teacher_preparation_program_type_descriptor of this TpdmTeacherPreparationProviderProgram.

        The descriptor holds the type of teacher prep program (e.g., college, alternative, TFA, etc.).  # noqa: E501

        :param teacher_preparation_program_type_descriptor: The teacher_preparation_program_type_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if teacher_preparation_program_type_descriptor is not None and len(teacher_preparation_program_type_descriptor) > 306:
            raise ValueError("Invalid value for `teacher_preparation_program_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._teacher_preparation_program_type_descriptor = teacher_preparation_program_type_descriptor

    @property
    def tpp_program_pathway_descriptor(self):
        """Gets the tpp_program_pathway_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        A code for describing the program pathway, for example: Residency, Internship, Traditional  # noqa: E501

        :return: The tpp_program_pathway_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._tpp_program_pathway_descriptor

    @tpp_program_pathway_descriptor.setter
    def tpp_program_pathway_descriptor(self, tpp_program_pathway_descriptor):
        """Sets the tpp_program_pathway_descriptor of this TpdmTeacherPreparationProviderProgram.

        A code for describing the program pathway, for example: Residency, Internship, Traditional  # noqa: E501

        :param tpp_program_pathway_descriptor: The tpp_program_pathway_descriptor of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """
        if tpp_program_pathway_descriptor is not None and len(tpp_program_pathway_descriptor) > 306:
            raise ValueError("Invalid value for `tpp_program_pathway_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._tpp_program_pathway_descriptor = tpp_program_pathway_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmTeacherPreparationProviderProgram.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmTeacherPreparationProviderProgram.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmTeacherPreparationProviderProgram.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmTeacherPreparationProviderProgram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmTeacherPreparationProviderProgram):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
