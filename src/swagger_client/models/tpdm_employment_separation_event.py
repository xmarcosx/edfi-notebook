# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmEmploymentSeparationEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'employment_separation_date': 'date',
        'open_staff_position_reference': 'EdFiOpenStaffPositionReference',
        'employment_separation_entered_date': 'date',
        'employment_separation_reason_descriptor': 'str',
        'employment_separation_type_descriptor': 'str',
        'remaining_in_district': 'bool',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'employment_separation_date': 'employmentSeparationDate',
        'open_staff_position_reference': 'openStaffPositionReference',
        'employment_separation_entered_date': 'employmentSeparationEnteredDate',
        'employment_separation_reason_descriptor': 'employmentSeparationReasonDescriptor',
        'employment_separation_type_descriptor': 'employmentSeparationTypeDescriptor',
        'remaining_in_district': 'remainingInDistrict',
        'etag': '_etag'
    }

    def __init__(self, id=None, employment_separation_date=None, open_staff_position_reference=None, employment_separation_entered_date=None, employment_separation_reason_descriptor=None, employment_separation_type_descriptor=None, remaining_in_district=None, etag=None):  # noqa: E501
        """TpdmEmploymentSeparationEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._employment_separation_date = None
        self._open_staff_position_reference = None
        self._employment_separation_entered_date = None
        self._employment_separation_reason_descriptor = None
        self._employment_separation_type_descriptor = None
        self._remaining_in_district = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.employment_separation_date = employment_separation_date
        self.open_staff_position_reference = open_staff_position_reference
        if employment_separation_entered_date is not None:
            self.employment_separation_entered_date = employment_separation_entered_date
        if employment_separation_reason_descriptor is not None:
            self.employment_separation_reason_descriptor = employment_separation_reason_descriptor
        self.employment_separation_type_descriptor = employment_separation_type_descriptor
        if remaining_in_district is not None:
            self.remaining_in_district = remaining_in_district
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmEmploymentSeparationEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmEmploymentSeparationEvent.

          # noqa: E501

        :param id: The id of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def employment_separation_date(self):
        """Gets the employment_separation_date of this TpdmEmploymentSeparationEvent.  # noqa: E501

        Effective date of the separation.  # noqa: E501

        :return: The employment_separation_date of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: date
        """
        return self._employment_separation_date

    @employment_separation_date.setter
    def employment_separation_date(self, employment_separation_date):
        """Sets the employment_separation_date of this TpdmEmploymentSeparationEvent.

        Effective date of the separation.  # noqa: E501

        :param employment_separation_date: The employment_separation_date of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: date
        """
        if employment_separation_date is None:
            raise ValueError("Invalid value for `employment_separation_date`, must not be `None`")  # noqa: E501

        self._employment_separation_date = employment_separation_date

    @property
    def open_staff_position_reference(self):
        """Gets the open_staff_position_reference of this TpdmEmploymentSeparationEvent.  # noqa: E501


        :return: The open_staff_position_reference of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: EdFiOpenStaffPositionReference
        """
        return self._open_staff_position_reference

    @open_staff_position_reference.setter
    def open_staff_position_reference(self, open_staff_position_reference):
        """Sets the open_staff_position_reference of this TpdmEmploymentSeparationEvent.


        :param open_staff_position_reference: The open_staff_position_reference of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: EdFiOpenStaffPositionReference
        """
        if open_staff_position_reference is None:
            raise ValueError("Invalid value for `open_staff_position_reference`, must not be `None`")  # noqa: E501

        self._open_staff_position_reference = open_staff_position_reference

    @property
    def employment_separation_entered_date(self):
        """Gets the employment_separation_entered_date of this TpdmEmploymentSeparationEvent.  # noqa: E501

        The date the separation event was first entered or when notice was given.  # noqa: E501

        :return: The employment_separation_entered_date of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: date
        """
        return self._employment_separation_entered_date

    @employment_separation_entered_date.setter
    def employment_separation_entered_date(self, employment_separation_entered_date):
        """Sets the employment_separation_entered_date of this TpdmEmploymentSeparationEvent.

        The date the separation event was first entered or when notice was given.  # noqa: E501

        :param employment_separation_entered_date: The employment_separation_entered_date of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: date
        """

        self._employment_separation_entered_date = employment_separation_entered_date

    @property
    def employment_separation_reason_descriptor(self):
        """Gets the employment_separation_reason_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501

        The reason(s) for the separation.  # noqa: E501

        :return: The employment_separation_reason_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: str
        """
        return self._employment_separation_reason_descriptor

    @employment_separation_reason_descriptor.setter
    def employment_separation_reason_descriptor(self, employment_separation_reason_descriptor):
        """Sets the employment_separation_reason_descriptor of this TpdmEmploymentSeparationEvent.

        The reason(s) for the separation.  # noqa: E501

        :param employment_separation_reason_descriptor: The employment_separation_reason_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: str
        """
        if employment_separation_reason_descriptor is not None and len(employment_separation_reason_descriptor) > 306:
            raise ValueError("Invalid value for `employment_separation_reason_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._employment_separation_reason_descriptor = employment_separation_reason_descriptor

    @property
    def employment_separation_type_descriptor(self):
        """Gets the employment_separation_type_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501

        The type of separation (e.g., termination, displacement, retirement, transfer, voluntary departure).  # noqa: E501

        :return: The employment_separation_type_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: str
        """
        return self._employment_separation_type_descriptor

    @employment_separation_type_descriptor.setter
    def employment_separation_type_descriptor(self, employment_separation_type_descriptor):
        """Sets the employment_separation_type_descriptor of this TpdmEmploymentSeparationEvent.

        The type of separation (e.g., termination, displacement, retirement, transfer, voluntary departure).  # noqa: E501

        :param employment_separation_type_descriptor: The employment_separation_type_descriptor of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: str
        """
        if employment_separation_type_descriptor is None:
            raise ValueError("Invalid value for `employment_separation_type_descriptor`, must not be `None`")  # noqa: E501
        if employment_separation_type_descriptor is not None and len(employment_separation_type_descriptor) > 306:
            raise ValueError("Invalid value for `employment_separation_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._employment_separation_type_descriptor = employment_separation_type_descriptor

    @property
    def remaining_in_district(self):
        """Gets the remaining_in_district of this TpdmEmploymentSeparationEvent.  # noqa: E501

        Whether a teacher is leaving a school but remaining within the district, or leaving the district entirely.  # noqa: E501

        :return: The remaining_in_district of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: bool
        """
        return self._remaining_in_district

    @remaining_in_district.setter
    def remaining_in_district(self, remaining_in_district):
        """Sets the remaining_in_district of this TpdmEmploymentSeparationEvent.

        Whether a teacher is leaving a school but remaining within the district, or leaving the district entirely.  # noqa: E501

        :param remaining_in_district: The remaining_in_district of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: bool
        """

        self._remaining_in_district = remaining_in_district

    @property
    def etag(self):
        """Gets the etag of this TpdmEmploymentSeparationEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmEmploymentSeparationEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmEmploymentSeparationEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmEmploymentSeparationEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmEmploymentSeparationEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
