# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TpdmEmploymentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'employment_event_type_descriptor': 'str',
        'open_staff_position_reference': 'EdFiOpenStaffPositionReference',
        'early_hire': 'bool',
        'hire_date': 'date',
        'internal_external_hire_descriptor': 'str',
        'mutual_consent': 'bool',
        'restricted_choice': 'bool',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'employment_event_type_descriptor': 'employmentEventTypeDescriptor',
        'open_staff_position_reference': 'openStaffPositionReference',
        'early_hire': 'earlyHire',
        'hire_date': 'hireDate',
        'internal_external_hire_descriptor': 'internalExternalHireDescriptor',
        'mutual_consent': 'mutualConsent',
        'restricted_choice': 'restrictedChoice',
        'etag': '_etag'
    }

    def __init__(self, id=None, employment_event_type_descriptor=None, open_staff_position_reference=None, early_hire=None, hire_date=None, internal_external_hire_descriptor=None, mutual_consent=None, restricted_choice=None, etag=None):  # noqa: E501
        """TpdmEmploymentEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._employment_event_type_descriptor = None
        self._open_staff_position_reference = None
        self._early_hire = None
        self._hire_date = None
        self._internal_external_hire_descriptor = None
        self._mutual_consent = None
        self._restricted_choice = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.employment_event_type_descriptor = employment_event_type_descriptor
        self.open_staff_position_reference = open_staff_position_reference
        if early_hire is not None:
            self.early_hire = early_hire
        if hire_date is not None:
            self.hire_date = hire_date
        if internal_external_hire_descriptor is not None:
            self.internal_external_hire_descriptor = internal_external_hire_descriptor
        if mutual_consent is not None:
            self.mutual_consent = mutual_consent
        if restricted_choice is not None:
            self.restricted_choice = restricted_choice
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmEmploymentEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmEmploymentEvent.

          # noqa: E501

        :param id: The id of this TpdmEmploymentEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def employment_event_type_descriptor(self):
        """Gets the employment_event_type_descriptor of this TpdmEmploymentEvent.  # noqa: E501

        The type of the employment event (e.g., transfer, new hire, title change).  # noqa: E501

        :return: The employment_event_type_descriptor of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._employment_event_type_descriptor

    @employment_event_type_descriptor.setter
    def employment_event_type_descriptor(self, employment_event_type_descriptor):
        """Sets the employment_event_type_descriptor of this TpdmEmploymentEvent.

        The type of the employment event (e.g., transfer, new hire, title change).  # noqa: E501

        :param employment_event_type_descriptor: The employment_event_type_descriptor of this TpdmEmploymentEvent.  # noqa: E501
        :type: str
        """
        if employment_event_type_descriptor is None:
            raise ValueError("Invalid value for `employment_event_type_descriptor`, must not be `None`")  # noqa: E501
        if employment_event_type_descriptor is not None and len(employment_event_type_descriptor) > 306:
            raise ValueError("Invalid value for `employment_event_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._employment_event_type_descriptor = employment_event_type_descriptor

    @property
    def open_staff_position_reference(self):
        """Gets the open_staff_position_reference of this TpdmEmploymentEvent.  # noqa: E501


        :return: The open_staff_position_reference of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: EdFiOpenStaffPositionReference
        """
        return self._open_staff_position_reference

    @open_staff_position_reference.setter
    def open_staff_position_reference(self, open_staff_position_reference):
        """Sets the open_staff_position_reference of this TpdmEmploymentEvent.


        :param open_staff_position_reference: The open_staff_position_reference of this TpdmEmploymentEvent.  # noqa: E501
        :type: EdFiOpenStaffPositionReference
        """
        if open_staff_position_reference is None:
            raise ValueError("Invalid value for `open_staff_position_reference`, must not be `None`")  # noqa: E501

        self._open_staff_position_reference = open_staff_position_reference

    @property
    def early_hire(self):
        """Gets the early_hire of this TpdmEmploymentEvent.  # noqa: E501

        Indicator of whether this was an early hire.  # noqa: E501

        :return: The early_hire of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._early_hire

    @early_hire.setter
    def early_hire(self, early_hire):
        """Sets the early_hire of this TpdmEmploymentEvent.

        Indicator of whether this was an early hire.  # noqa: E501

        :param early_hire: The early_hire of this TpdmEmploymentEvent.  # noqa: E501
        :type: bool
        """

        self._early_hire = early_hire

    @property
    def hire_date(self):
        """Gets the hire_date of this TpdmEmploymentEvent.  # noqa: E501

        The month, day, and year on which an individual was hired for a position.  # noqa: E501

        :return: The hire_date of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: date
        """
        return self._hire_date

    @hire_date.setter
    def hire_date(self, hire_date):
        """Sets the hire_date of this TpdmEmploymentEvent.

        The month, day, and year on which an individual was hired for a position.  # noqa: E501

        :param hire_date: The hire_date of this TpdmEmploymentEvent.  # noqa: E501
        :type: date
        """

        self._hire_date = hire_date

    @property
    def internal_external_hire_descriptor(self):
        """Gets the internal_external_hire_descriptor of this TpdmEmploymentEvent.  # noqa: E501

        Indicates whether the hire was an internal or external person.  # noqa: E501

        :return: The internal_external_hire_descriptor of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._internal_external_hire_descriptor

    @internal_external_hire_descriptor.setter
    def internal_external_hire_descriptor(self, internal_external_hire_descriptor):
        """Sets the internal_external_hire_descriptor of this TpdmEmploymentEvent.

        Indicates whether the hire was an internal or external person.  # noqa: E501

        :param internal_external_hire_descriptor: The internal_external_hire_descriptor of this TpdmEmploymentEvent.  # noqa: E501
        :type: str
        """
        if internal_external_hire_descriptor is not None and len(internal_external_hire_descriptor) > 306:
            raise ValueError("Invalid value for `internal_external_hire_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._internal_external_hire_descriptor = internal_external_hire_descriptor

    @property
    def mutual_consent(self):
        """Gets the mutual_consent of this TpdmEmploymentEvent.  # noqa: E501

        Indicator of whether this was a mutual consent hire.  # noqa: E501

        :return: The mutual_consent of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._mutual_consent

    @mutual_consent.setter
    def mutual_consent(self, mutual_consent):
        """Sets the mutual_consent of this TpdmEmploymentEvent.

        Indicator of whether this was a mutual consent hire.  # noqa: E501

        :param mutual_consent: The mutual_consent of this TpdmEmploymentEvent.  # noqa: E501
        :type: bool
        """

        self._mutual_consent = mutual_consent

    @property
    def restricted_choice(self):
        """Gets the restricted_choice of this TpdmEmploymentEvent.  # noqa: E501

        Indicator of whether this was a restricted choice hire.  # noqa: E501

        :return: The restricted_choice of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._restricted_choice

    @restricted_choice.setter
    def restricted_choice(self, restricted_choice):
        """Sets the restricted_choice of this TpdmEmploymentEvent.

        Indicator of whether this was a restricted choice hire.  # noqa: E501

        :param restricted_choice: The restricted_choice of this TpdmEmploymentEvent.  # noqa: E501
        :type: bool
        """

        self._restricted_choice = restricted_choice

    @property
    def etag(self):
        """Gets the etag of this TpdmEmploymentEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmEmploymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmEmploymentEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmEmploymentEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmEmploymentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmEmploymentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
