# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmQuantitativeMeasure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'quantitative_measure_identifier': 'str',
        'evaluation_element_reference': 'TpdmEvaluationElementReference',
        'quantitative_measure_datatype_descriptor': 'str',
        'quantitative_measure_type_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'quantitative_measure_identifier': 'quantitativeMeasureIdentifier',
        'evaluation_element_reference': 'evaluationElementReference',
        'quantitative_measure_datatype_descriptor': 'quantitativeMeasureDatatypeDescriptor',
        'quantitative_measure_type_descriptor': 'quantitativeMeasureTypeDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, quantitative_measure_identifier=None, evaluation_element_reference=None, quantitative_measure_datatype_descriptor=None, quantitative_measure_type_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmQuantitativeMeasure - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._quantitative_measure_identifier = None
        self._evaluation_element_reference = None
        self._quantitative_measure_datatype_descriptor = None
        self._quantitative_measure_type_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.quantitative_measure_identifier = quantitative_measure_identifier
        self.evaluation_element_reference = evaluation_element_reference
        if quantitative_measure_datatype_descriptor is not None:
            self.quantitative_measure_datatype_descriptor = quantitative_measure_datatype_descriptor
        if quantitative_measure_type_descriptor is not None:
            self.quantitative_measure_type_descriptor = quantitative_measure_type_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmQuantitativeMeasure.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmQuantitativeMeasure.

          # noqa: E501

        :param id: The id of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def quantitative_measure_identifier(self):
        """Gets the quantitative_measure_identifier of this TpdmQuantitativeMeasure.  # noqa: E501

        An assigned unique identifier for the quantitative measure.  # noqa: E501

        :return: The quantitative_measure_identifier of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: str
        """
        return self._quantitative_measure_identifier

    @quantitative_measure_identifier.setter
    def quantitative_measure_identifier(self, quantitative_measure_identifier):
        """Sets the quantitative_measure_identifier of this TpdmQuantitativeMeasure.

        An assigned unique identifier for the quantitative measure.  # noqa: E501

        :param quantitative_measure_identifier: The quantitative_measure_identifier of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quantitative_measure_identifier is None:
            raise ValueError("Invalid value for `quantitative_measure_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                quantitative_measure_identifier is not None and len(quantitative_measure_identifier) > 64):
            raise ValueError("Invalid value for `quantitative_measure_identifier`, length must be less than or equal to `64`")  # noqa: E501

        self._quantitative_measure_identifier = quantitative_measure_identifier

    @property
    def evaluation_element_reference(self):
        """Gets the evaluation_element_reference of this TpdmQuantitativeMeasure.  # noqa: E501


        :return: The evaluation_element_reference of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: TpdmEvaluationElementReference
        """
        return self._evaluation_element_reference

    @evaluation_element_reference.setter
    def evaluation_element_reference(self, evaluation_element_reference):
        """Sets the evaluation_element_reference of this TpdmQuantitativeMeasure.


        :param evaluation_element_reference: The evaluation_element_reference of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: TpdmEvaluationElementReference
        """
        if self._configuration.client_side_validation and evaluation_element_reference is None:
            raise ValueError("Invalid value for `evaluation_element_reference`, must not be `None`")  # noqa: E501

        self._evaluation_element_reference = evaluation_element_reference

    @property
    def quantitative_measure_datatype_descriptor(self):
        """Gets the quantitative_measure_datatype_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501

        The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :return: The quantitative_measure_datatype_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: str
        """
        return self._quantitative_measure_datatype_descriptor

    @quantitative_measure_datatype_descriptor.setter
    def quantitative_measure_datatype_descriptor(self, quantitative_measure_datatype_descriptor):
        """Sets the quantitative_measure_datatype_descriptor of this TpdmQuantitativeMeasure.

        The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :param quantitative_measure_datatype_descriptor: The quantitative_measure_datatype_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                quantitative_measure_datatype_descriptor is not None and len(quantitative_measure_datatype_descriptor) > 306):
            raise ValueError("Invalid value for `quantitative_measure_datatype_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._quantitative_measure_datatype_descriptor = quantitative_measure_datatype_descriptor

    @property
    def quantitative_measure_type_descriptor(self):
        """Gets the quantitative_measure_type_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501

        The type of the quantitative measure (e.g., achievement, growth).  # noqa: E501

        :return: The quantitative_measure_type_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: str
        """
        return self._quantitative_measure_type_descriptor

    @quantitative_measure_type_descriptor.setter
    def quantitative_measure_type_descriptor(self, quantitative_measure_type_descriptor):
        """Sets the quantitative_measure_type_descriptor of this TpdmQuantitativeMeasure.

        The type of the quantitative measure (e.g., achievement, growth).  # noqa: E501

        :param quantitative_measure_type_descriptor: The quantitative_measure_type_descriptor of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                quantitative_measure_type_descriptor is not None and len(quantitative_measure_type_descriptor) > 306):
            raise ValueError("Invalid value for `quantitative_measure_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._quantitative_measure_type_descriptor = quantitative_measure_type_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmQuantitativeMeasure.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmQuantitativeMeasure.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmQuantitativeMeasure.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmQuantitativeMeasure.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmQuantitativeMeasure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmQuantitativeMeasure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmQuantitativeMeasure):
            return True

        return self.to_dict() != other.to_dict()
