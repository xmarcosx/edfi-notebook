# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmGoal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'assignment_date': 'date',
        'goal_title': 'str',
        'evaluation_element_reference': 'TpdmEvaluationElementReference',
        'person_reference': 'EdFiPersonReference',
        'comments': 'str',
        'completed_date': 'date',
        'completed_indicator': 'bool',
        'due_date': 'date',
        'goal_description': 'str',
        'goal_type_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'assignment_date': 'assignmentDate',
        'goal_title': 'goalTitle',
        'evaluation_element_reference': 'evaluationElementReference',
        'person_reference': 'personReference',
        'comments': 'comments',
        'completed_date': 'completedDate',
        'completed_indicator': 'completedIndicator',
        'due_date': 'dueDate',
        'goal_description': 'goalDescription',
        'goal_type_descriptor': 'goalTypeDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, assignment_date=None, goal_title=None, evaluation_element_reference=None, person_reference=None, comments=None, completed_date=None, completed_indicator=None, due_date=None, goal_description=None, goal_type_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmGoal - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._assignment_date = None
        self._goal_title = None
        self._evaluation_element_reference = None
        self._person_reference = None
        self._comments = None
        self._completed_date = None
        self._completed_indicator = None
        self._due_date = None
        self._goal_description = None
        self._goal_type_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.assignment_date = assignment_date
        self.goal_title = goal_title
        if evaluation_element_reference is not None:
            self.evaluation_element_reference = evaluation_element_reference
        self.person_reference = person_reference
        if comments is not None:
            self.comments = comments
        if completed_date is not None:
            self.completed_date = completed_date
        if completed_indicator is not None:
            self.completed_indicator = completed_indicator
        if due_date is not None:
            self.due_date = due_date
        if goal_description is not None:
            self.goal_description = goal_description
        if goal_type_descriptor is not None:
            self.goal_type_descriptor = goal_type_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmGoal.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmGoal.

          # noqa: E501

        :param id: The id of this TpdmGoal.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def assignment_date(self):
        """Gets the assignment_date of this TpdmGoal.  # noqa: E501

        The month, day, and year on which the goal was assigned.  # noqa: E501

        :return: The assignment_date of this TpdmGoal.  # noqa: E501
        :rtype: date
        """
        return self._assignment_date

    @assignment_date.setter
    def assignment_date(self, assignment_date):
        """Sets the assignment_date of this TpdmGoal.

        The month, day, and year on which the goal was assigned.  # noqa: E501

        :param assignment_date: The assignment_date of this TpdmGoal.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and assignment_date is None:
            raise ValueError("Invalid value for `assignment_date`, must not be `None`")  # noqa: E501

        self._assignment_date = assignment_date

    @property
    def goal_title(self):
        """Gets the goal_title of this TpdmGoal.  # noqa: E501

        The name or title of the goal.  # noqa: E501

        :return: The goal_title of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._goal_title

    @goal_title.setter
    def goal_title(self, goal_title):
        """Sets the goal_title of this TpdmGoal.

        The name or title of the goal.  # noqa: E501

        :param goal_title: The goal_title of this TpdmGoal.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and goal_title is None:
            raise ValueError("Invalid value for `goal_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                goal_title is not None and len(goal_title) > 255):
            raise ValueError("Invalid value for `goal_title`, length must be less than or equal to `255`")  # noqa: E501

        self._goal_title = goal_title

    @property
    def evaluation_element_reference(self):
        """Gets the evaluation_element_reference of this TpdmGoal.  # noqa: E501


        :return: The evaluation_element_reference of this TpdmGoal.  # noqa: E501
        :rtype: TpdmEvaluationElementReference
        """
        return self._evaluation_element_reference

    @evaluation_element_reference.setter
    def evaluation_element_reference(self, evaluation_element_reference):
        """Sets the evaluation_element_reference of this TpdmGoal.


        :param evaluation_element_reference: The evaluation_element_reference of this TpdmGoal.  # noqa: E501
        :type: TpdmEvaluationElementReference
        """

        self._evaluation_element_reference = evaluation_element_reference

    @property
    def person_reference(self):
        """Gets the person_reference of this TpdmGoal.  # noqa: E501


        :return: The person_reference of this TpdmGoal.  # noqa: E501
        :rtype: EdFiPersonReference
        """
        return self._person_reference

    @person_reference.setter
    def person_reference(self, person_reference):
        """Sets the person_reference of this TpdmGoal.


        :param person_reference: The person_reference of this TpdmGoal.  # noqa: E501
        :type: EdFiPersonReference
        """
        if self._configuration.client_side_validation and person_reference is None:
            raise ValueError("Invalid value for `person_reference`, must not be `None`")  # noqa: E501

        self._person_reference = person_reference

    @property
    def comments(self):
        """Gets the comments of this TpdmGoal.  # noqa: E501

        Any comments about the goal or its completion to be captured.  # noqa: E501

        :return: The comments of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TpdmGoal.

        Any comments about the goal or its completion to be captured.  # noqa: E501

        :param comments: The comments of this TpdmGoal.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                comments is not None and len(comments) > 1024):
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1024`")  # noqa: E501

        self._comments = comments

    @property
    def completed_date(self):
        """Gets the completed_date of this TpdmGoal.  # noqa: E501

        The month, day, and year on which the goal was completed.  # noqa: E501

        :return: The completed_date of this TpdmGoal.  # noqa: E501
        :rtype: date
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this TpdmGoal.

        The month, day, and year on which the goal was completed.  # noqa: E501

        :param completed_date: The completed_date of this TpdmGoal.  # noqa: E501
        :type: date
        """

        self._completed_date = completed_date

    @property
    def completed_indicator(self):
        """Gets the completed_indicator of this TpdmGoal.  # noqa: E501

        Indicator that the goal was completed.  # noqa: E501

        :return: The completed_indicator of this TpdmGoal.  # noqa: E501
        :rtype: bool
        """
        return self._completed_indicator

    @completed_indicator.setter
    def completed_indicator(self, completed_indicator):
        """Sets the completed_indicator of this TpdmGoal.

        Indicator that the goal was completed.  # noqa: E501

        :param completed_indicator: The completed_indicator of this TpdmGoal.  # noqa: E501
        :type: bool
        """

        self._completed_indicator = completed_indicator

    @property
    def due_date(self):
        """Gets the due_date of this TpdmGoal.  # noqa: E501

        The month, day, and year on which the goal is due or expected to be completed.  # noqa: E501

        :return: The due_date of this TpdmGoal.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TpdmGoal.

        The month, day, and year on which the goal is due or expected to be completed.  # noqa: E501

        :param due_date: The due_date of this TpdmGoal.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def goal_description(self):
        """Gets the goal_description of this TpdmGoal.  # noqa: E501

        The description of the goal.  # noqa: E501

        :return: The goal_description of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._goal_description

    @goal_description.setter
    def goal_description(self, goal_description):
        """Sets the goal_description of this TpdmGoal.

        The description of the goal.  # noqa: E501

        :param goal_description: The goal_description of this TpdmGoal.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                goal_description is not None and len(goal_description) > 1024):
            raise ValueError("Invalid value for `goal_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._goal_description = goal_description

    @property
    def goal_type_descriptor(self):
        """Gets the goal_type_descriptor of this TpdmGoal.  # noqa: E501

        The type of the goal (e.g., management, instruction).  # noqa: E501

        :return: The goal_type_descriptor of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._goal_type_descriptor

    @goal_type_descriptor.setter
    def goal_type_descriptor(self, goal_type_descriptor):
        """Sets the goal_type_descriptor of this TpdmGoal.

        The type of the goal (e.g., management, instruction).  # noqa: E501

        :param goal_type_descriptor: The goal_type_descriptor of this TpdmGoal.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                goal_type_descriptor is not None and len(goal_type_descriptor) > 306):
            raise ValueError("Invalid value for `goal_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._goal_type_descriptor = goal_type_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmGoal.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmGoal.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmGoal.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmGoal.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmGoal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmGoal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmGoal):
            return True

        return self.to_dict() != other.to_dict()
