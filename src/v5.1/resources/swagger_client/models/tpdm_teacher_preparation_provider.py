# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmTeacherPreparationProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'categories': 'list[EdFiEducationOrganizationCategory]',
        'teacher_preparation_provider_id': 'int',
        'school_reference': 'EdFiSchoolReference',
        'university_reference': 'TpdmUniversityReference',
        'accreditation_status_descriptor': 'str',
        'addresses': 'list[EdFiEducationOrganizationAddress]',
        'federal_locale_code_descriptor': 'str',
        'identification_codes': 'list[EdFiEducationOrganizationIdentificationCode]',
        'indicators': 'list[EdFiEducationOrganizationIndicator]',
        'institution_telephones': 'list[EdFiEducationOrganizationInstitutionTelephone]',
        'international_addresses': 'list[EdFiEducationOrganizationInternationalAddress]',
        'name_of_institution': 'str',
        'operational_status_descriptor': 'str',
        'short_name_of_institution': 'str',
        'web_site': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'categories': 'categories',
        'teacher_preparation_provider_id': 'teacherPreparationProviderId',
        'school_reference': 'schoolReference',
        'university_reference': 'universityReference',
        'accreditation_status_descriptor': 'accreditationStatusDescriptor',
        'addresses': 'addresses',
        'federal_locale_code_descriptor': 'federalLocaleCodeDescriptor',
        'identification_codes': 'identificationCodes',
        'indicators': 'indicators',
        'institution_telephones': 'institutionTelephones',
        'international_addresses': 'internationalAddresses',
        'name_of_institution': 'nameOfInstitution',
        'operational_status_descriptor': 'operationalStatusDescriptor',
        'short_name_of_institution': 'shortNameOfInstitution',
        'web_site': 'webSite',
        'etag': '_etag'
    }

    def __init__(self, id=None, categories=None, teacher_preparation_provider_id=None, school_reference=None, university_reference=None, accreditation_status_descriptor=None, addresses=None, federal_locale_code_descriptor=None, identification_codes=None, indicators=None, institution_telephones=None, international_addresses=None, name_of_institution=None, operational_status_descriptor=None, short_name_of_institution=None, web_site=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmTeacherPreparationProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._categories = None
        self._teacher_preparation_provider_id = None
        self._school_reference = None
        self._university_reference = None
        self._accreditation_status_descriptor = None
        self._addresses = None
        self._federal_locale_code_descriptor = None
        self._identification_codes = None
        self._indicators = None
        self._institution_telephones = None
        self._international_addresses = None
        self._name_of_institution = None
        self._operational_status_descriptor = None
        self._short_name_of_institution = None
        self._web_site = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.categories = categories
        self.teacher_preparation_provider_id = teacher_preparation_provider_id
        if school_reference is not None:
            self.school_reference = school_reference
        if university_reference is not None:
            self.university_reference = university_reference
        if accreditation_status_descriptor is not None:
            self.accreditation_status_descriptor = accreditation_status_descriptor
        if addresses is not None:
            self.addresses = addresses
        if federal_locale_code_descriptor is not None:
            self.federal_locale_code_descriptor = federal_locale_code_descriptor
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if indicators is not None:
            self.indicators = indicators
        if institution_telephones is not None:
            self.institution_telephones = institution_telephones
        if international_addresses is not None:
            self.international_addresses = international_addresses
        self.name_of_institution = name_of_institution
        if operational_status_descriptor is not None:
            self.operational_status_descriptor = operational_status_descriptor
        if short_name_of_institution is not None:
            self.short_name_of_institution = short_name_of_institution
        if web_site is not None:
            self.web_site = web_site
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmTeacherPreparationProvider.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmTeacherPreparationProvider.

          # noqa: E501

        :param id: The id of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def categories(self):
        """Gets the categories of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.  # noqa: E501

        :return: The categories of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.  # noqa: E501

        :param categories: The categories of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationCategory]
        """
        if self._configuration.client_side_validation and categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def teacher_preparation_provider_id(self):
        """Gets the teacher_preparation_provider_id of this TpdmTeacherPreparationProvider.  # noqa: E501

        The unique identification code for the Teacher Preparation Provider  # noqa: E501

        :return: The teacher_preparation_provider_id of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: int
        """
        return self._teacher_preparation_provider_id

    @teacher_preparation_provider_id.setter
    def teacher_preparation_provider_id(self, teacher_preparation_provider_id):
        """Sets the teacher_preparation_provider_id of this TpdmTeacherPreparationProvider.

        The unique identification code for the Teacher Preparation Provider  # noqa: E501

        :param teacher_preparation_provider_id: The teacher_preparation_provider_id of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and teacher_preparation_provider_id is None:
            raise ValueError("Invalid value for `teacher_preparation_provider_id`, must not be `None`")  # noqa: E501

        self._teacher_preparation_provider_id = teacher_preparation_provider_id

    @property
    def school_reference(self):
        """Gets the school_reference of this TpdmTeacherPreparationProvider.  # noqa: E501


        :return: The school_reference of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this TpdmTeacherPreparationProvider.


        :param school_reference: The school_reference of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: EdFiSchoolReference
        """

        self._school_reference = school_reference

    @property
    def university_reference(self):
        """Gets the university_reference of this TpdmTeacherPreparationProvider.  # noqa: E501


        :return: The university_reference of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: TpdmUniversityReference
        """
        return self._university_reference

    @university_reference.setter
    def university_reference(self, university_reference):
        """Sets the university_reference of this TpdmTeacherPreparationProvider.


        :param university_reference: The university_reference of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: TpdmUniversityReference
        """

        self._university_reference = university_reference

    @property
    def accreditation_status_descriptor(self):
        """Gets the accreditation_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501

        Accreditation Status for a Teacher Preparation Provider.  # noqa: E501

        :return: The accreditation_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._accreditation_status_descriptor

    @accreditation_status_descriptor.setter
    def accreditation_status_descriptor(self, accreditation_status_descriptor):
        """Sets the accreditation_status_descriptor of this TpdmTeacherPreparationProvider.

        Accreditation Status for a Teacher Preparation Provider.  # noqa: E501

        :param accreditation_status_descriptor: The accreditation_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                accreditation_status_descriptor is not None and len(accreditation_status_descriptor) > 306):
            raise ValueError("Invalid value for `accreditation_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._accreditation_status_descriptor = accreditation_status_descriptor

    @property
    def addresses(self):
        """Gets the addresses of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.  # noqa: E501

        :return: The addresses of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.  # noqa: E501

        :param addresses: The addresses of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationAddress]
        """

        self._addresses = addresses

    @property
    def federal_locale_code_descriptor(self):
        """Gets the federal_locale_code_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501

        The federal locale code associated with an education organization.  # noqa: E501

        :return: The federal_locale_code_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._federal_locale_code_descriptor

    @federal_locale_code_descriptor.setter
    def federal_locale_code_descriptor(self, federal_locale_code_descriptor):
        """Sets the federal_locale_code_descriptor of this TpdmTeacherPreparationProvider.

        The federal locale code associated with an education organization.  # noqa: E501

        :param federal_locale_code_descriptor: The federal_locale_code_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                federal_locale_code_descriptor is not None and len(federal_locale_code_descriptor) > 306):
            raise ValueError("Invalid value for `federal_locale_code_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._federal_locale_code_descriptor = federal_locale_code_descriptor

    @property
    def identification_codes(self):
        """Gets the identification_codes of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The identification_codes of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param identification_codes: The identification_codes of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def indicators(self):
        """Gets the indicators of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationIndicators. An indicator or metric of an Education Organization.  # noqa: E501

        :return: The indicators of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationIndicator]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationIndicators. An indicator or metric of an Education Organization.  # noqa: E501

        :param indicators: The indicators of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationIndicator]
        """

        self._indicators = indicators

    @property
    def institution_telephones(self):
        """Gets the institution_telephones of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.  # noqa: E501

        :return: The institution_telephones of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationInstitutionTelephone]
        """
        return self._institution_telephones

    @institution_telephones.setter
    def institution_telephones(self, institution_telephones):
        """Sets the institution_telephones of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.  # noqa: E501

        :param institution_telephones: The institution_telephones of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationInstitutionTelephone]
        """

        self._institution_telephones = institution_telephones

    @property
    def international_addresses(self):
        """Gets the international_addresses of this TpdmTeacherPreparationProvider.  # noqa: E501

        An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.  # noqa: E501

        :return: The international_addresses of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationInternationalAddress]
        """
        return self._international_addresses

    @international_addresses.setter
    def international_addresses(self, international_addresses):
        """Sets the international_addresses of this TpdmTeacherPreparationProvider.

        An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.  # noqa: E501

        :param international_addresses: The international_addresses of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationInternationalAddress]
        """

        self._international_addresses = international_addresses

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501

        The full, legally accepted name of the institution.  # noqa: E501

        :return: The name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this TpdmTeacherPreparationProvider.

        The full, legally accepted name of the institution.  # noqa: E501

        :param name_of_institution: The name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name_of_institution is not None and len(name_of_institution) > 75):
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def operational_status_descriptor(self):
        """Gets the operational_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501

        The current operational status of the EducationOrganization (e.g., active, inactive).  # noqa: E501

        :return: The operational_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._operational_status_descriptor

    @operational_status_descriptor.setter
    def operational_status_descriptor(self, operational_status_descriptor):
        """Sets the operational_status_descriptor of this TpdmTeacherPreparationProvider.

        The current operational status of the EducationOrganization (e.g., active, inactive).  # noqa: E501

        :param operational_status_descriptor: The operational_status_descriptor of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                operational_status_descriptor is not None and len(operational_status_descriptor) > 306):
            raise ValueError("Invalid value for `operational_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._operational_status_descriptor = operational_status_descriptor

    @property
    def short_name_of_institution(self):
        """Gets the short_name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501

        A short name for the institution.  # noqa: E501

        :return: The short_name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._short_name_of_institution

    @short_name_of_institution.setter
    def short_name_of_institution(self, short_name_of_institution):
        """Sets the short_name_of_institution of this TpdmTeacherPreparationProvider.

        A short name for the institution.  # noqa: E501

        :param short_name_of_institution: The short_name_of_institution of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_name_of_institution is not None and len(short_name_of_institution) > 75):
            raise ValueError("Invalid value for `short_name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._short_name_of_institution = short_name_of_institution

    @property
    def web_site(self):
        """Gets the web_site of this TpdmTeacherPreparationProvider.  # noqa: E501

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :return: The web_site of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._web_site

    @web_site.setter
    def web_site(self, web_site):
        """Sets the web_site of this TpdmTeacherPreparationProvider.

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :param web_site: The web_site of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                web_site is not None and len(web_site) > 255):
            raise ValueError("Invalid value for `web_site`, length must be less than or equal to `255`")  # noqa: E501

        self._web_site = web_site

    @property
    def etag(self):
        """Gets the etag of this TpdmTeacherPreparationProvider.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmTeacherPreparationProvider.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmTeacherPreparationProvider.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmTeacherPreparationProvider.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmTeacherPreparationProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmTeacherPreparationProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmTeacherPreparationProvider):
            return True

        return self.to_dict() != other.to_dict()
