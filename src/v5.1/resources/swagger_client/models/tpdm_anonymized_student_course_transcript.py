# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmAnonymizedStudentCourseTranscript(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'anonymized_student_academic_record_reference': 'TpdmAnonymizedStudentAcademicRecordReference',
        'course_reference': 'EdFiCourseReference',
        'course_repeat_code_descriptor': 'str',
        'course_title': 'str',
        'final_letter_grade_earned': 'str',
        'final_numeric_grade_earned': 'float',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'anonymized_student_academic_record_reference': 'anonymizedStudentAcademicRecordReference',
        'course_reference': 'courseReference',
        'course_repeat_code_descriptor': 'courseRepeatCodeDescriptor',
        'course_title': 'courseTitle',
        'final_letter_grade_earned': 'finalLetterGradeEarned',
        'final_numeric_grade_earned': 'finalNumericGradeEarned',
        'etag': '_etag'
    }

    def __init__(self, id=None, anonymized_student_academic_record_reference=None, course_reference=None, course_repeat_code_descriptor=None, course_title=None, final_letter_grade_earned=None, final_numeric_grade_earned=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmAnonymizedStudentCourseTranscript - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._anonymized_student_academic_record_reference = None
        self._course_reference = None
        self._course_repeat_code_descriptor = None
        self._course_title = None
        self._final_letter_grade_earned = None
        self._final_numeric_grade_earned = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.anonymized_student_academic_record_reference = anonymized_student_academic_record_reference
        self.course_reference = course_reference
        if course_repeat_code_descriptor is not None:
            self.course_repeat_code_descriptor = course_repeat_code_descriptor
        self.course_title = course_title
        if final_letter_grade_earned is not None:
            self.final_letter_grade_earned = final_letter_grade_earned
        if final_numeric_grade_earned is not None:
            self.final_numeric_grade_earned = final_numeric_grade_earned
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmAnonymizedStudentCourseTranscript.

          # noqa: E501

        :param id: The id of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def anonymized_student_academic_record_reference(self):
        """Gets the anonymized_student_academic_record_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501


        :return: The anonymized_student_academic_record_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: TpdmAnonymizedStudentAcademicRecordReference
        """
        return self._anonymized_student_academic_record_reference

    @anonymized_student_academic_record_reference.setter
    def anonymized_student_academic_record_reference(self, anonymized_student_academic_record_reference):
        """Sets the anonymized_student_academic_record_reference of this TpdmAnonymizedStudentCourseTranscript.


        :param anonymized_student_academic_record_reference: The anonymized_student_academic_record_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: TpdmAnonymizedStudentAcademicRecordReference
        """
        if self._configuration.client_side_validation and anonymized_student_academic_record_reference is None:
            raise ValueError("Invalid value for `anonymized_student_academic_record_reference`, must not be `None`")  # noqa: E501

        self._anonymized_student_academic_record_reference = anonymized_student_academic_record_reference

    @property
    def course_reference(self):
        """Gets the course_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501


        :return: The course_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: EdFiCourseReference
        """
        return self._course_reference

    @course_reference.setter
    def course_reference(self, course_reference):
        """Sets the course_reference of this TpdmAnonymizedStudentCourseTranscript.


        :param course_reference: The course_reference of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: EdFiCourseReference
        """
        if self._configuration.client_side_validation and course_reference is None:
            raise ValueError("Invalid value for `course_reference`, must not be `None`")  # noqa: E501

        self._course_reference = course_reference

    @property
    def course_repeat_code_descriptor(self):
        """Gets the course_repeat_code_descriptor of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

        Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.  # noqa: E501

        :return: The course_repeat_code_descriptor of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_repeat_code_descriptor

    @course_repeat_code_descriptor.setter
    def course_repeat_code_descriptor(self, course_repeat_code_descriptor):
        """Sets the course_repeat_code_descriptor of this TpdmAnonymizedStudentCourseTranscript.

        Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.  # noqa: E501

        :param course_repeat_code_descriptor: The course_repeat_code_descriptor of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_repeat_code_descriptor is not None and len(course_repeat_code_descriptor) > 306):
            raise ValueError("Invalid value for `course_repeat_code_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._course_repeat_code_descriptor = course_repeat_code_descriptor

    @property
    def course_title(self):
        """Gets the course_title of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

        The descriptive name given to a course of study offered in a school or other institution or organization.  # noqa: E501

        :return: The course_title of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_title

    @course_title.setter
    def course_title(self, course_title):
        """Sets the course_title of this TpdmAnonymizedStudentCourseTranscript.

        The descriptive name given to a course of study offered in a school or other institution or organization.  # noqa: E501

        :param course_title: The course_title of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and course_title is None:
            raise ValueError("Invalid value for `course_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                course_title is not None and len(course_title) > 60):
            raise ValueError("Invalid value for `course_title`, length must be less than or equal to `60`")  # noqa: E501

        self._course_title = course_title

    @property
    def final_letter_grade_earned(self):
        """Gets the final_letter_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :return: The final_letter_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._final_letter_grade_earned

    @final_letter_grade_earned.setter
    def final_letter_grade_earned(self, final_letter_grade_earned):
        """Sets the final_letter_grade_earned of this TpdmAnonymizedStudentCourseTranscript.

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :param final_letter_grade_earned: The final_letter_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                final_letter_grade_earned is not None and len(final_letter_grade_earned) > 20):
            raise ValueError("Invalid value for `final_letter_grade_earned`, length must be less than or equal to `20`")  # noqa: E501

        self._final_letter_grade_earned = final_letter_grade_earned

    @property
    def final_numeric_grade_earned(self):
        """Gets the final_numeric_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :return: The final_numeric_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._final_numeric_grade_earned

    @final_numeric_grade_earned.setter
    def final_numeric_grade_earned(self, final_numeric_grade_earned):
        """Sets the final_numeric_grade_earned of this TpdmAnonymizedStudentCourseTranscript.

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :param final_numeric_grade_earned: The final_numeric_grade_earned of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: float
        """

        self._final_numeric_grade_earned = final_numeric_grade_earned

    @property
    def etag(self):
        """Gets the etag of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmAnonymizedStudentCourseTranscript.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmAnonymizedStudentCourseTranscript.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmAnonymizedStudentCourseTranscript, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmAnonymizedStudentCourseTranscript):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmAnonymizedStudentCourseTranscript):
            return True

        return self.to_dict() != other.to_dict()
