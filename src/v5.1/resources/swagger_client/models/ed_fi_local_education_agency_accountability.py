# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiLocalEducationAgencyAccountability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gun_free_schools_act_reporting_status_descriptor': 'str',
        'school_choice_implement_status_descriptor': 'str',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference'
    }

    attribute_map = {
        'gun_free_schools_act_reporting_status_descriptor': 'gunFreeSchoolsActReportingStatusDescriptor',
        'school_choice_implement_status_descriptor': 'schoolChoiceImplementStatusDescriptor',
        'school_year_type_reference': 'schoolYearTypeReference'
    }

    def __init__(self, gun_free_schools_act_reporting_status_descriptor=None, school_choice_implement_status_descriptor=None, school_year_type_reference=None, _configuration=None):  # noqa: E501
        """EdFiLocalEducationAgencyAccountability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gun_free_schools_act_reporting_status_descriptor = None
        self._school_choice_implement_status_descriptor = None
        self._school_year_type_reference = None
        self.discriminator = None

        if gun_free_schools_act_reporting_status_descriptor is not None:
            self.gun_free_schools_act_reporting_status_descriptor = gun_free_schools_act_reporting_status_descriptor
        if school_choice_implement_status_descriptor is not None:
            self.school_choice_implement_status_descriptor = school_choice_implement_status_descriptor
        self.school_year_type_reference = school_year_type_reference

    @property
    def gun_free_schools_act_reporting_status_descriptor(self):
        """Gets the gun_free_schools_act_reporting_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501

        An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.  # noqa: E501

        :return: The gun_free_schools_act_reporting_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :rtype: str
        """
        return self._gun_free_schools_act_reporting_status_descriptor

    @gun_free_schools_act_reporting_status_descriptor.setter
    def gun_free_schools_act_reporting_status_descriptor(self, gun_free_schools_act_reporting_status_descriptor):
        """Sets the gun_free_schools_act_reporting_status_descriptor of this EdFiLocalEducationAgencyAccountability.

        An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.  # noqa: E501

        :param gun_free_schools_act_reporting_status_descriptor: The gun_free_schools_act_reporting_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gun_free_schools_act_reporting_status_descriptor is not None and len(gun_free_schools_act_reporting_status_descriptor) > 306):
            raise ValueError("Invalid value for `gun_free_schools_act_reporting_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._gun_free_schools_act_reporting_status_descriptor = gun_free_schools_act_reporting_status_descriptor

    @property
    def school_choice_implement_status_descriptor(self):
        """Gets the school_choice_implement_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501

        An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.  # noqa: E501

        :return: The school_choice_implement_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :rtype: str
        """
        return self._school_choice_implement_status_descriptor

    @school_choice_implement_status_descriptor.setter
    def school_choice_implement_status_descriptor(self, school_choice_implement_status_descriptor):
        """Sets the school_choice_implement_status_descriptor of this EdFiLocalEducationAgencyAccountability.

        An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.  # noqa: E501

        :param school_choice_implement_status_descriptor: The school_choice_implement_status_descriptor of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                school_choice_implement_status_descriptor is not None and len(school_choice_implement_status_descriptor) > 306):
            raise ValueError("Invalid value for `school_choice_implement_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._school_choice_implement_status_descriptor = school_choice_implement_status_descriptor

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiLocalEducationAgencyAccountability.  # noqa: E501


        :return: The school_year_type_reference of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiLocalEducationAgencyAccountability.


        :param school_year_type_reference: The school_year_type_reference of this EdFiLocalEducationAgencyAccountability.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiLocalEducationAgencyAccountability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiLocalEducationAgencyAccountability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiLocalEducationAgencyAccountability):
            return True

        return self.to_dict() != other.to_dict()
