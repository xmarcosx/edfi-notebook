# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCohort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cohort_identifier': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'academic_subject_descriptor': 'str',
        'cohort_description': 'str',
        'cohort_scope_descriptor': 'str',
        'cohort_type_descriptor': 'str',
        'programs': 'list[EdFiCohortProgram]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'cohort_identifier': 'cohortIdentifier',
        'education_organization_reference': 'educationOrganizationReference',
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'cohort_description': 'cohortDescription',
        'cohort_scope_descriptor': 'cohortScopeDescriptor',
        'cohort_type_descriptor': 'cohortTypeDescriptor',
        'programs': 'programs',
        'etag': '_etag'
    }

    def __init__(self, id=None, cohort_identifier=None, education_organization_reference=None, academic_subject_descriptor=None, cohort_description=None, cohort_scope_descriptor=None, cohort_type_descriptor=None, programs=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCohort - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._cohort_identifier = None
        self._education_organization_reference = None
        self._academic_subject_descriptor = None
        self._cohort_description = None
        self._cohort_scope_descriptor = None
        self._cohort_type_descriptor = None
        self._programs = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.cohort_identifier = cohort_identifier
        self.education_organization_reference = education_organization_reference
        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        if cohort_description is not None:
            self.cohort_description = cohort_description
        if cohort_scope_descriptor is not None:
            self.cohort_scope_descriptor = cohort_scope_descriptor
        self.cohort_type_descriptor = cohort_type_descriptor
        if programs is not None:
            self.programs = programs
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCohort.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCohort.

          # noqa: E501

        :param id: The id of this EdFiCohort.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cohort_identifier(self):
        """Gets the cohort_identifier of this EdFiCohort.  # noqa: E501

        The name or ID for the Cohort.  # noqa: E501

        :return: The cohort_identifier of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._cohort_identifier

    @cohort_identifier.setter
    def cohort_identifier(self, cohort_identifier):
        """Sets the cohort_identifier of this EdFiCohort.

        The name or ID for the Cohort.  # noqa: E501

        :param cohort_identifier: The cohort_identifier of this EdFiCohort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cohort_identifier is None:
            raise ValueError("Invalid value for `cohort_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cohort_identifier is not None and len(cohort_identifier) > 20):
            raise ValueError("Invalid value for `cohort_identifier`, length must be less than or equal to `20`")  # noqa: E501

        self._cohort_identifier = cohort_identifier

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiCohort.  # noqa: E501


        :return: The education_organization_reference of this EdFiCohort.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiCohort.


        :param education_organization_reference: The education_organization_reference of this EdFiCohort.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this EdFiCohort.  # noqa: E501

        The academic subject associated with an academic intervention.  # noqa: E501

        :return: The academic_subject_descriptor of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this EdFiCohort.

        The academic subject associated with an academic intervention.  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this EdFiCohort.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306):
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def cohort_description(self):
        """Gets the cohort_description of this EdFiCohort.  # noqa: E501

        The description of the Cohort and its purpose.  # noqa: E501

        :return: The cohort_description of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._cohort_description

    @cohort_description.setter
    def cohort_description(self, cohort_description):
        """Sets the cohort_description of this EdFiCohort.

        The description of the Cohort and its purpose.  # noqa: E501

        :param cohort_description: The cohort_description of this EdFiCohort.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cohort_description is not None and len(cohort_description) > 1024):
            raise ValueError("Invalid value for `cohort_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._cohort_description = cohort_description

    @property
    def cohort_scope_descriptor(self):
        """Gets the cohort_scope_descriptor of this EdFiCohort.  # noqa: E501

        The scope of cohort (e.g., school, district, classroom).  # noqa: E501

        :return: The cohort_scope_descriptor of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._cohort_scope_descriptor

    @cohort_scope_descriptor.setter
    def cohort_scope_descriptor(self, cohort_scope_descriptor):
        """Sets the cohort_scope_descriptor of this EdFiCohort.

        The scope of cohort (e.g., school, district, classroom).  # noqa: E501

        :param cohort_scope_descriptor: The cohort_scope_descriptor of this EdFiCohort.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cohort_scope_descriptor is not None and len(cohort_scope_descriptor) > 306):
            raise ValueError("Invalid value for `cohort_scope_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._cohort_scope_descriptor = cohort_scope_descriptor

    @property
    def cohort_type_descriptor(self):
        """Gets the cohort_type_descriptor of this EdFiCohort.  # noqa: E501

        The type of cohort (e.g., academic intervention, classroom breakout).  # noqa: E501

        :return: The cohort_type_descriptor of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._cohort_type_descriptor

    @cohort_type_descriptor.setter
    def cohort_type_descriptor(self, cohort_type_descriptor):
        """Sets the cohort_type_descriptor of this EdFiCohort.

        The type of cohort (e.g., academic intervention, classroom breakout).  # noqa: E501

        :param cohort_type_descriptor: The cohort_type_descriptor of this EdFiCohort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cohort_type_descriptor is None:
            raise ValueError("Invalid value for `cohort_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cohort_type_descriptor is not None and len(cohort_type_descriptor) > 306):
            raise ValueError("Invalid value for `cohort_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._cohort_type_descriptor = cohort_type_descriptor

    @property
    def programs(self):
        """Gets the programs of this EdFiCohort.  # noqa: E501

        An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education).  # noqa: E501

        :return: The programs of this EdFiCohort.  # noqa: E501
        :rtype: list[EdFiCohortProgram]
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this EdFiCohort.

        An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education).  # noqa: E501

        :param programs: The programs of this EdFiCohort.  # noqa: E501
        :type: list[EdFiCohortProgram]
        """

        self._programs = programs

    @property
    def etag(self):
        """Gets the etag of this EdFiCohort.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCohort.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCohort.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCohort.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCohort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCohort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCohort):
            return True

        return self.to_dict() != other.to_dict()
