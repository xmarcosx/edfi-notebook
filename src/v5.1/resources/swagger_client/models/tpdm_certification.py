# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmCertification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'certification_identifier': 'str',
        'namespace': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'certification_exams': 'list[TpdmCertificationCertificationExam]',
        'certification_field_descriptor': 'str',
        'certification_level_descriptor': 'str',
        'certification_standard_descriptor': 'str',
        'certification_title': 'str',
        'educator_role_descriptor': 'str',
        'effective_date': 'date',
        'end_date': 'date',
        'grade_levels': 'list[TpdmCertificationGradeLevel]',
        'instructional_setting_descriptor': 'str',
        'minimum_degree_descriptor': 'str',
        'population_served_descriptor': 'str',
        'routes': 'list[TpdmCertificationRoute]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'certification_identifier': 'certificationIdentifier',
        'namespace': 'namespace',
        'education_organization_reference': 'educationOrganizationReference',
        'certification_exams': 'certificationExams',
        'certification_field_descriptor': 'certificationFieldDescriptor',
        'certification_level_descriptor': 'certificationLevelDescriptor',
        'certification_standard_descriptor': 'certificationStandardDescriptor',
        'certification_title': 'certificationTitle',
        'educator_role_descriptor': 'educatorRoleDescriptor',
        'effective_date': 'effectiveDate',
        'end_date': 'endDate',
        'grade_levels': 'gradeLevels',
        'instructional_setting_descriptor': 'instructionalSettingDescriptor',
        'minimum_degree_descriptor': 'minimumDegreeDescriptor',
        'population_served_descriptor': 'populationServedDescriptor',
        'routes': 'routes',
        'etag': '_etag'
    }

    def __init__(self, id=None, certification_identifier=None, namespace=None, education_organization_reference=None, certification_exams=None, certification_field_descriptor=None, certification_level_descriptor=None, certification_standard_descriptor=None, certification_title=None, educator_role_descriptor=None, effective_date=None, end_date=None, grade_levels=None, instructional_setting_descriptor=None, minimum_degree_descriptor=None, population_served_descriptor=None, routes=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmCertification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._certification_identifier = None
        self._namespace = None
        self._education_organization_reference = None
        self._certification_exams = None
        self._certification_field_descriptor = None
        self._certification_level_descriptor = None
        self._certification_standard_descriptor = None
        self._certification_title = None
        self._educator_role_descriptor = None
        self._effective_date = None
        self._end_date = None
        self._grade_levels = None
        self._instructional_setting_descriptor = None
        self._minimum_degree_descriptor = None
        self._population_served_descriptor = None
        self._routes = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.certification_identifier = certification_identifier
        self.namespace = namespace
        if education_organization_reference is not None:
            self.education_organization_reference = education_organization_reference
        if certification_exams is not None:
            self.certification_exams = certification_exams
        if certification_field_descriptor is not None:
            self.certification_field_descriptor = certification_field_descriptor
        if certification_level_descriptor is not None:
            self.certification_level_descriptor = certification_level_descriptor
        if certification_standard_descriptor is not None:
            self.certification_standard_descriptor = certification_standard_descriptor
        self.certification_title = certification_title
        if educator_role_descriptor is not None:
            self.educator_role_descriptor = educator_role_descriptor
        if effective_date is not None:
            self.effective_date = effective_date
        if end_date is not None:
            self.end_date = end_date
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if instructional_setting_descriptor is not None:
            self.instructional_setting_descriptor = instructional_setting_descriptor
        if minimum_degree_descriptor is not None:
            self.minimum_degree_descriptor = minimum_degree_descriptor
        if population_served_descriptor is not None:
            self.population_served_descriptor = population_served_descriptor
        if routes is not None:
            self.routes = routes
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmCertification.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmCertification.

          # noqa: E501

        :param id: The id of this TpdmCertification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def certification_identifier(self):
        """Gets the certification_identifier of this TpdmCertification.  # noqa: E501

        Identifier or serial number assigned to the Certification.  # noqa: E501

        :return: The certification_identifier of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_identifier

    @certification_identifier.setter
    def certification_identifier(self, certification_identifier):
        """Sets the certification_identifier of this TpdmCertification.

        Identifier or serial number assigned to the Certification.  # noqa: E501

        :param certification_identifier: The certification_identifier of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and certification_identifier is None:
            raise ValueError("Invalid value for `certification_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                certification_identifier is not None and len(certification_identifier) > 60):
            raise ValueError("Invalid value for `certification_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._certification_identifier = certification_identifier

    @property
    def namespace(self):
        """Gets the namespace of this TpdmCertification.  # noqa: E501

        Namespace for the Certification, typically associated with the issuing authority.  # noqa: E501

        :return: The namespace of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TpdmCertification.

        Namespace for the Certification, typically associated with the issuing authority.  # noqa: E501

        :param namespace: The namespace of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmCertification.  # noqa: E501


        :return: The education_organization_reference of this TpdmCertification.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmCertification.


        :param education_organization_reference: The education_organization_reference of this TpdmCertification.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """

        self._education_organization_reference = education_organization_reference

    @property
    def certification_exams(self):
        """Gets the certification_exams of this TpdmCertification.  # noqa: E501

        An unordered collection of certificationCertificationExams. The Certification Eams required for the Certification.  # noqa: E501

        :return: The certification_exams of this TpdmCertification.  # noqa: E501
        :rtype: list[TpdmCertificationCertificationExam]
        """
        return self._certification_exams

    @certification_exams.setter
    def certification_exams(self, certification_exams):
        """Sets the certification_exams of this TpdmCertification.

        An unordered collection of certificationCertificationExams. The Certification Eams required for the Certification.  # noqa: E501

        :param certification_exams: The certification_exams of this TpdmCertification.  # noqa: E501
        :type: list[TpdmCertificationCertificationExam]
        """

        self._certification_exams = certification_exams

    @property
    def certification_field_descriptor(self):
        """Gets the certification_field_descriptor of this TpdmCertification.  # noqa: E501

        The field of certification (e.g., Mathematics, Music).  # noqa: E501

        :return: The certification_field_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_field_descriptor

    @certification_field_descriptor.setter
    def certification_field_descriptor(self, certification_field_descriptor):
        """Sets the certification_field_descriptor of this TpdmCertification.

        The field of certification (e.g., Mathematics, Music).  # noqa: E501

        :param certification_field_descriptor: The certification_field_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                certification_field_descriptor is not None and len(certification_field_descriptor) > 306):
            raise ValueError("Invalid value for `certification_field_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._certification_field_descriptor = certification_field_descriptor

    @property
    def certification_level_descriptor(self):
        """Gets the certification_level_descriptor of this TpdmCertification.  # noqa: E501

        The level (e.g., Elementary, Secondary) or category (administrative, specialist) of the Certification.  # noqa: E501

        :return: The certification_level_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_level_descriptor

    @certification_level_descriptor.setter
    def certification_level_descriptor(self, certification_level_descriptor):
        """Sets the certification_level_descriptor of this TpdmCertification.

        The level (e.g., Elementary, Secondary) or category (administrative, specialist) of the Certification.  # noqa: E501

        :param certification_level_descriptor: The certification_level_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                certification_level_descriptor is not None and len(certification_level_descriptor) > 306):
            raise ValueError("Invalid value for `certification_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._certification_level_descriptor = certification_level_descriptor

    @property
    def certification_standard_descriptor(self):
        """Gets the certification_standard_descriptor of this TpdmCertification.  # noqa: E501

        The standard, law or policy defining the certification.  # noqa: E501

        :return: The certification_standard_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_standard_descriptor

    @certification_standard_descriptor.setter
    def certification_standard_descriptor(self, certification_standard_descriptor):
        """Sets the certification_standard_descriptor of this TpdmCertification.

        The standard, law or policy defining the certification.  # noqa: E501

        :param certification_standard_descriptor: The certification_standard_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                certification_standard_descriptor is not None and len(certification_standard_descriptor) > 306):
            raise ValueError("Invalid value for `certification_standard_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._certification_standard_descriptor = certification_standard_descriptor

    @property
    def certification_title(self):
        """Gets the certification_title of this TpdmCertification.  # noqa: E501

        The title of the Certification.  # noqa: E501

        :return: The certification_title of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._certification_title

    @certification_title.setter
    def certification_title(self, certification_title):
        """Sets the certification_title of this TpdmCertification.

        The title of the Certification.  # noqa: E501

        :param certification_title: The certification_title of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and certification_title is None:
            raise ValueError("Invalid value for `certification_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                certification_title is not None and len(certification_title) > 64):
            raise ValueError("Invalid value for `certification_title`, length must be less than or equal to `64`")  # noqa: E501

        self._certification_title = certification_title

    @property
    def educator_role_descriptor(self):
        """Gets the educator_role_descriptor of this TpdmCertification.  # noqa: E501

        The role authorized by the Certification (e.g., Principal, Reading Specialist), typically associated with service and administrative certifications.  # noqa: E501

        :return: The educator_role_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._educator_role_descriptor

    @educator_role_descriptor.setter
    def educator_role_descriptor(self, educator_role_descriptor):
        """Sets the educator_role_descriptor of this TpdmCertification.

        The role authorized by the Certification (e.g., Principal, Reading Specialist), typically associated with service and administrative certifications.  # noqa: E501

        :param educator_role_descriptor: The educator_role_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                educator_role_descriptor is not None and len(educator_role_descriptor) > 306):
            raise ValueError("Invalid value for `educator_role_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._educator_role_descriptor = educator_role_descriptor

    @property
    def effective_date(self):
        """Gets the effective_date of this TpdmCertification.  # noqa: E501

        The year, month and day on which the Certification is offered.  # noqa: E501

        :return: The effective_date of this TpdmCertification.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this TpdmCertification.

        The year, month and day on which the Certification is offered.  # noqa: E501

        :param effective_date: The effective_date of this TpdmCertification.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def end_date(self):
        """Gets the end_date of this TpdmCertification.  # noqa: E501

        The month, day, and year on which the Certification offering is expected to end.  # noqa: E501

        :return: The end_date of this TpdmCertification.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TpdmCertification.

        The month, day, and year on which the Certification offering is expected to end.  # noqa: E501

        :param end_date: The end_date of this TpdmCertification.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def grade_levels(self):
        """Gets the grade_levels of this TpdmCertification.  # noqa: E501

        An unordered collection of certificationGradeLevels. The grade level(s) certified for teaching.  # noqa: E501

        :return: The grade_levels of this TpdmCertification.  # noqa: E501
        :rtype: list[TpdmCertificationGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this TpdmCertification.

        An unordered collection of certificationGradeLevels. The grade level(s) certified for teaching.  # noqa: E501

        :param grade_levels: The grade_levels of this TpdmCertification.  # noqa: E501
        :type: list[TpdmCertificationGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def instructional_setting_descriptor(self):
        """Gets the instructional_setting_descriptor of this TpdmCertification.  # noqa: E501

        The setting authorized by the Certification in which a child receives education and related services; for example: Classroom, Virtual, Vocational.  # noqa: E501

        :return: The instructional_setting_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._instructional_setting_descriptor

    @instructional_setting_descriptor.setter
    def instructional_setting_descriptor(self, instructional_setting_descriptor):
        """Sets the instructional_setting_descriptor of this TpdmCertification.

        The setting authorized by the Certification in which a child receives education and related services; for example: Classroom, Virtual, Vocational.  # noqa: E501

        :param instructional_setting_descriptor: The instructional_setting_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                instructional_setting_descriptor is not None and len(instructional_setting_descriptor) > 306):
            raise ValueError("Invalid value for `instructional_setting_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._instructional_setting_descriptor = instructional_setting_descriptor

    @property
    def minimum_degree_descriptor(self):
        """Gets the minimum_degree_descriptor of this TpdmCertification.  # noqa: E501

        The minimum level of degree, if any, required for Certification.  # noqa: E501

        :return: The minimum_degree_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._minimum_degree_descriptor

    @minimum_degree_descriptor.setter
    def minimum_degree_descriptor(self, minimum_degree_descriptor):
        """Sets the minimum_degree_descriptor of this TpdmCertification.

        The minimum level of degree, if any, required for Certification.  # noqa: E501

        :param minimum_degree_descriptor: The minimum_degree_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                minimum_degree_descriptor is not None and len(minimum_degree_descriptor) > 306):
            raise ValueError("Invalid value for `minimum_degree_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._minimum_degree_descriptor = minimum_degree_descriptor

    @property
    def population_served_descriptor(self):
        """Gets the population_served_descriptor of this TpdmCertification.  # noqa: E501

        The type of students the Section is offered and tailored to; for example: Bilingual students, Remedial education students, Gifted and talented students, Career and Technical Education students, Special education students.  # noqa: E501

        :return: The population_served_descriptor of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._population_served_descriptor

    @population_served_descriptor.setter
    def population_served_descriptor(self, population_served_descriptor):
        """Sets the population_served_descriptor of this TpdmCertification.

        The type of students the Section is offered and tailored to; for example: Bilingual students, Remedial education students, Gifted and talented students, Career and Technical Education students, Special education students.  # noqa: E501

        :param population_served_descriptor: The population_served_descriptor of this TpdmCertification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                population_served_descriptor is not None and len(population_served_descriptor) > 306):
            raise ValueError("Invalid value for `population_served_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._population_served_descriptor = population_served_descriptor

    @property
    def routes(self):
        """Gets the routes of this TpdmCertification.  # noqa: E501

        An unordered collection of certificationRoutes. The process, program ,or pathway used to obtain certification.  # noqa: E501

        :return: The routes of this TpdmCertification.  # noqa: E501
        :rtype: list[TpdmCertificationRoute]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this TpdmCertification.

        An unordered collection of certificationRoutes. The process, program ,or pathway used to obtain certification.  # noqa: E501

        :param routes: The routes of this TpdmCertification.  # noqa: E501
        :type: list[TpdmCertificationRoute]
        """

        self._routes = routes

    @property
    def etag(self):
        """Gets the etag of this TpdmCertification.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmCertification.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmCertification.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmCertification.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmCertification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmCertification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmCertification):
            return True

        return self.to_dict() != other.to_dict()
