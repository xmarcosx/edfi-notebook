# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmTeacherCandidateStudentGrowthMeasure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'fact_as_of_date': 'date',
        'teacher_candidate_student_growth_measure_identifier': 'str',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'teacher_candidate_reference': 'TpdmTeacherCandidateReference',
        'academic_subjects': 'list[TpdmTeacherCandidateStudentGrowthMeasureAcademicSubject]',
        'grade_levels': 'list[TpdmTeacherCandidateStudentGrowthMeasureGradeLevel]',
        'result_datatype_type_descriptor': 'str',
        'standard_error': 'float',
        'student_growth_actual_score': 'int',
        'student_growth_measure_date': 'date',
        'student_growth_met': 'bool',
        'student_growth_n_count': 'int',
        'student_growth_target_score': 'int',
        'student_growth_type_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fact_as_of_date': 'factAsOfDate',
        'teacher_candidate_student_growth_measure_identifier': 'teacherCandidateStudentGrowthMeasureIdentifier',
        'school_year_type_reference': 'schoolYearTypeReference',
        'teacher_candidate_reference': 'teacherCandidateReference',
        'academic_subjects': 'academicSubjects',
        'grade_levels': 'gradeLevels',
        'result_datatype_type_descriptor': 'resultDatatypeTypeDescriptor',
        'standard_error': 'standardError',
        'student_growth_actual_score': 'studentGrowthActualScore',
        'student_growth_measure_date': 'studentGrowthMeasureDate',
        'student_growth_met': 'studentGrowthMet',
        'student_growth_n_count': 'studentGrowthNCount',
        'student_growth_target_score': 'studentGrowthTargetScore',
        'student_growth_type_descriptor': 'studentGrowthTypeDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, fact_as_of_date=None, teacher_candidate_student_growth_measure_identifier=None, school_year_type_reference=None, teacher_candidate_reference=None, academic_subjects=None, grade_levels=None, result_datatype_type_descriptor=None, standard_error=None, student_growth_actual_score=None, student_growth_measure_date=None, student_growth_met=None, student_growth_n_count=None, student_growth_target_score=None, student_growth_type_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmTeacherCandidateStudentGrowthMeasure - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._fact_as_of_date = None
        self._teacher_candidate_student_growth_measure_identifier = None
        self._school_year_type_reference = None
        self._teacher_candidate_reference = None
        self._academic_subjects = None
        self._grade_levels = None
        self._result_datatype_type_descriptor = None
        self._standard_error = None
        self._student_growth_actual_score = None
        self._student_growth_measure_date = None
        self._student_growth_met = None
        self._student_growth_n_count = None
        self._student_growth_target_score = None
        self._student_growth_type_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.fact_as_of_date = fact_as_of_date
        self.teacher_candidate_student_growth_measure_identifier = teacher_candidate_student_growth_measure_identifier
        self.school_year_type_reference = school_year_type_reference
        self.teacher_candidate_reference = teacher_candidate_reference
        if academic_subjects is not None:
            self.academic_subjects = academic_subjects
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if result_datatype_type_descriptor is not None:
            self.result_datatype_type_descriptor = result_datatype_type_descriptor
        if standard_error is not None:
            self.standard_error = standard_error
        self.student_growth_actual_score = student_growth_actual_score
        if student_growth_measure_date is not None:
            self.student_growth_measure_date = student_growth_measure_date
        self.student_growth_met = student_growth_met
        if student_growth_n_count is not None:
            self.student_growth_n_count = student_growth_n_count
        if student_growth_target_score is not None:
            self.student_growth_target_score = student_growth_target_score
        if student_growth_type_descriptor is not None:
            self.student_growth_type_descriptor = student_growth_type_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmTeacherCandidateStudentGrowthMeasure.

          # noqa: E501

        :param id: The id of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def fact_as_of_date(self):
        """Gets the fact_as_of_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The date for which the data element is relevant  # noqa: E501

        :return: The fact_as_of_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: date
        """
        return self._fact_as_of_date

    @fact_as_of_date.setter
    def fact_as_of_date(self, fact_as_of_date):
        """Sets the fact_as_of_date of this TpdmTeacherCandidateStudentGrowthMeasure.

        The date for which the data element is relevant  # noqa: E501

        :param fact_as_of_date: The fact_as_of_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and fact_as_of_date is None:
            raise ValueError("Invalid value for `fact_as_of_date`, must not be `None`")  # noqa: E501

        self._fact_as_of_date = fact_as_of_date

    @property
    def teacher_candidate_student_growth_measure_identifier(self):
        """Gets the teacher_candidate_student_growth_measure_identifier of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        Assigned unique identifier for the student growth measure.  # noqa: E501

        :return: The teacher_candidate_student_growth_measure_identifier of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: str
        """
        return self._teacher_candidate_student_growth_measure_identifier

    @teacher_candidate_student_growth_measure_identifier.setter
    def teacher_candidate_student_growth_measure_identifier(self, teacher_candidate_student_growth_measure_identifier):
        """Sets the teacher_candidate_student_growth_measure_identifier of this TpdmTeacherCandidateStudentGrowthMeasure.

        Assigned unique identifier for the student growth measure.  # noqa: E501

        :param teacher_candidate_student_growth_measure_identifier: The teacher_candidate_student_growth_measure_identifier of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and teacher_candidate_student_growth_measure_identifier is None:
            raise ValueError("Invalid value for `teacher_candidate_student_growth_measure_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                teacher_candidate_student_growth_measure_identifier is not None and len(teacher_candidate_student_growth_measure_identifier) > 64):
            raise ValueError("Invalid value for `teacher_candidate_student_growth_measure_identifier`, length must be less than or equal to `64`")  # noqa: E501

        self._teacher_candidate_student_growth_measure_identifier = teacher_candidate_student_growth_measure_identifier

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501


        :return: The school_year_type_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this TpdmTeacherCandidateStudentGrowthMeasure.


        :param school_year_type_reference: The school_year_type_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def teacher_candidate_reference(self):
        """Gets the teacher_candidate_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501


        :return: The teacher_candidate_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: TpdmTeacherCandidateReference
        """
        return self._teacher_candidate_reference

    @teacher_candidate_reference.setter
    def teacher_candidate_reference(self, teacher_candidate_reference):
        """Sets the teacher_candidate_reference of this TpdmTeacherCandidateStudentGrowthMeasure.


        :param teacher_candidate_reference: The teacher_candidate_reference of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: TpdmTeacherCandidateReference
        """
        if self._configuration.client_side_validation and teacher_candidate_reference is None:
            raise ValueError("Invalid value for `teacher_candidate_reference`, must not be `None`")  # noqa: E501

        self._teacher_candidate_reference = teacher_candidate_reference

    @property
    def academic_subjects(self):
        """Gets the academic_subjects of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        An unordered collection of teacherCandidateStudentGrowthMeasureAcademicSubjects. This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).  # noqa: E501

        :return: The academic_subjects of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: list[TpdmTeacherCandidateStudentGrowthMeasureAcademicSubject]
        """
        return self._academic_subjects

    @academic_subjects.setter
    def academic_subjects(self, academic_subjects):
        """Sets the academic_subjects of this TpdmTeacherCandidateStudentGrowthMeasure.

        An unordered collection of teacherCandidateStudentGrowthMeasureAcademicSubjects. This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).  # noqa: E501

        :param academic_subjects: The academic_subjects of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: list[TpdmTeacherCandidateStudentGrowthMeasureAcademicSubject]
        """

        self._academic_subjects = academic_subjects

    @property
    def grade_levels(self):
        """Gets the grade_levels of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        An unordered collection of teacherCandidateStudentGrowthMeasureGradeLevels. This descriptor defines the set of grade levels.  # noqa: E501

        :return: The grade_levels of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: list[TpdmTeacherCandidateStudentGrowthMeasureGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this TpdmTeacherCandidateStudentGrowthMeasure.

        An unordered collection of teacherCandidateStudentGrowthMeasureGradeLevels. This descriptor defines the set of grade levels.  # noqa: E501

        :param grade_levels: The grade_levels of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: list[TpdmTeacherCandidateStudentGrowthMeasureGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def result_datatype_type_descriptor(self):
        """Gets the result_datatype_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :return: The result_datatype_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: str
        """
        return self._result_datatype_type_descriptor

    @result_datatype_type_descriptor.setter
    def result_datatype_type_descriptor(self, result_datatype_type_descriptor):
        """Sets the result_datatype_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.

        The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :param result_datatype_type_descriptor: The result_datatype_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                result_datatype_type_descriptor is not None and len(result_datatype_type_descriptor) > 306):
            raise ValueError("Invalid value for `result_datatype_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._result_datatype_type_descriptor = result_datatype_type_descriptor

    @property
    def standard_error(self):
        """Gets the standard_error of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        Standard error for growth score measurement.  # noqa: E501

        :return: The standard_error of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: float
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error):
        """Sets the standard_error of this TpdmTeacherCandidateStudentGrowthMeasure.

        Standard error for growth score measurement.  # noqa: E501

        :param standard_error: The standard_error of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: float
        """

        self._standard_error = standard_error

    @property
    def student_growth_actual_score(self):
        """Gets the student_growth_actual_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The actual score a group of students receives on their student growth assessment  # noqa: E501

        :return: The student_growth_actual_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: int
        """
        return self._student_growth_actual_score

    @student_growth_actual_score.setter
    def student_growth_actual_score(self, student_growth_actual_score):
        """Sets the student_growth_actual_score of this TpdmTeacherCandidateStudentGrowthMeasure.

        The actual score a group of students receives on their student growth assessment  # noqa: E501

        :param student_growth_actual_score: The student_growth_actual_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and student_growth_actual_score is None:
            raise ValueError("Invalid value for `student_growth_actual_score`, must not be `None`")  # noqa: E501

        self._student_growth_actual_score = student_growth_actual_score

    @property
    def student_growth_measure_date(self):
        """Gets the student_growth_measure_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The date for which the student growth is measured  # noqa: E501

        :return: The student_growth_measure_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: date
        """
        return self._student_growth_measure_date

    @student_growth_measure_date.setter
    def student_growth_measure_date(self, student_growth_measure_date):
        """Sets the student_growth_measure_date of this TpdmTeacherCandidateStudentGrowthMeasure.

        The date for which the student growth is measured  # noqa: E501

        :param student_growth_measure_date: The student_growth_measure_date of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: date
        """

        self._student_growth_measure_date = student_growth_measure_date

    @property
    def student_growth_met(self):
        """Gets the student_growth_met of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        Identifies if the student growth target score is achieved.  # noqa: E501

        :return: The student_growth_met of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: bool
        """
        return self._student_growth_met

    @student_growth_met.setter
    def student_growth_met(self, student_growth_met):
        """Sets the student_growth_met of this TpdmTeacherCandidateStudentGrowthMeasure.

        Identifies if the student growth target score is achieved.  # noqa: E501

        :param student_growth_met: The student_growth_met of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and student_growth_met is None:
            raise ValueError("Invalid value for `student_growth_met`, must not be `None`")  # noqa: E501

        self._student_growth_met = student_growth_met

    @property
    def student_growth_n_count(self):
        """Gets the student_growth_n_count of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The number of students included in the average score result.  # noqa: E501

        :return: The student_growth_n_count of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: int
        """
        return self._student_growth_n_count

    @student_growth_n_count.setter
    def student_growth_n_count(self, student_growth_n_count):
        """Sets the student_growth_n_count of this TpdmTeacherCandidateStudentGrowthMeasure.

        The number of students included in the average score result.  # noqa: E501

        :param student_growth_n_count: The student_growth_n_count of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: int
        """

        self._student_growth_n_count = student_growth_n_count

    @property
    def student_growth_target_score(self):
        """Gets the student_growth_target_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        The target score that has been set for the group of students as it pertains to their student growth.  # noqa: E501

        :return: The student_growth_target_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: int
        """
        return self._student_growth_target_score

    @student_growth_target_score.setter
    def student_growth_target_score(self, student_growth_target_score):
        """Sets the student_growth_target_score of this TpdmTeacherCandidateStudentGrowthMeasure.

        The target score that has been set for the group of students as it pertains to their student growth.  # noqa: E501

        :param student_growth_target_score: The student_growth_target_score of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: int
        """

        self._student_growth_target_score = student_growth_target_score

    @property
    def student_growth_type_descriptor(self):
        """Gets the student_growth_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        Identification of the type of score that was used to determine student growth  # noqa: E501

        :return: The student_growth_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: str
        """
        return self._student_growth_type_descriptor

    @student_growth_type_descriptor.setter
    def student_growth_type_descriptor(self, student_growth_type_descriptor):
        """Sets the student_growth_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.

        Identification of the type of score that was used to determine student growth  # noqa: E501

        :param student_growth_type_descriptor: The student_growth_type_descriptor of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                student_growth_type_descriptor is not None and len(student_growth_type_descriptor) > 306):
            raise ValueError("Invalid value for `student_growth_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._student_growth_type_descriptor = student_growth_type_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmTeacherCandidateStudentGrowthMeasure.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmTeacherCandidateStudentGrowthMeasure.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmTeacherCandidateStudentGrowthMeasure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmTeacherCandidateStudentGrowthMeasure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmTeacherCandidateStudentGrowthMeasure):
            return True

        return self.to_dict() != other.to_dict()
