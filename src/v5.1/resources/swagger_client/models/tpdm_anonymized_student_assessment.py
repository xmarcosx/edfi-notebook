# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmAnonymizedStudentAssessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'administration_date': 'date',
        'assessment_identifier': 'str',
        'anonymized_student_reference': 'TpdmAnonymizedStudentReference',
        'taken_school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'academic_subject_descriptor': 'str',
        'assessment_category_descriptor': 'str',
        'assessment_title': 'str',
        'grade_level_descriptor': 'str',
        'performance_level': 'TpdmAnonymizedStudentAssessmentPerformanceLevel',
        'score_result': 'TpdmAnonymizedStudentAssessmentScoreResult',
        'term_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'administration_date': 'administrationDate',
        'assessment_identifier': 'assessmentIdentifier',
        'anonymized_student_reference': 'anonymizedStudentReference',
        'taken_school_year_type_reference': 'takenSchoolYearTypeReference',
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'assessment_category_descriptor': 'assessmentCategoryDescriptor',
        'assessment_title': 'assessmentTitle',
        'grade_level_descriptor': 'gradeLevelDescriptor',
        'performance_level': 'performanceLevel',
        'score_result': 'scoreResult',
        'term_descriptor': 'termDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, administration_date=None, assessment_identifier=None, anonymized_student_reference=None, taken_school_year_type_reference=None, academic_subject_descriptor=None, assessment_category_descriptor=None, assessment_title=None, grade_level_descriptor=None, performance_level=None, score_result=None, term_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmAnonymizedStudentAssessment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._administration_date = None
        self._assessment_identifier = None
        self._anonymized_student_reference = None
        self._taken_school_year_type_reference = None
        self._academic_subject_descriptor = None
        self._assessment_category_descriptor = None
        self._assessment_title = None
        self._grade_level_descriptor = None
        self._performance_level = None
        self._score_result = None
        self._term_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.administration_date = administration_date
        self.assessment_identifier = assessment_identifier
        self.anonymized_student_reference = anonymized_student_reference
        self.taken_school_year_type_reference = taken_school_year_type_reference
        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        if assessment_category_descriptor is not None:
            self.assessment_category_descriptor = assessment_category_descriptor
        if assessment_title is not None:
            self.assessment_title = assessment_title
        if grade_level_descriptor is not None:
            self.grade_level_descriptor = grade_level_descriptor
        if performance_level is not None:
            self.performance_level = performance_level
        if score_result is not None:
            self.score_result = score_result
        if term_descriptor is not None:
            self.term_descriptor = term_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmAnonymizedStudentAssessment.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmAnonymizedStudentAssessment.

          # noqa: E501

        :param id: The id of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def administration_date(self):
        """Gets the administration_date of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        Date the assessment was administered  # noqa: E501

        :return: The administration_date of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: date
        """
        return self._administration_date

    @administration_date.setter
    def administration_date(self, administration_date):
        """Sets the administration_date of this TpdmAnonymizedStudentAssessment.

        Date the assessment was administered  # noqa: E501

        :param administration_date: The administration_date of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and administration_date is None:
            raise ValueError("Invalid value for `administration_date`, must not be `None`")  # noqa: E501

        self._administration_date = administration_date

    @property
    def assessment_identifier(self):
        """Gets the assessment_identifier of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        An identifier that uniquely identifies the assessment to which the student results are associated.  # noqa: E501

        :return: The assessment_identifier of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._assessment_identifier

    @assessment_identifier.setter
    def assessment_identifier(self, assessment_identifier):
        """Sets the assessment_identifier of this TpdmAnonymizedStudentAssessment.

        An identifier that uniquely identifies the assessment to which the student results are associated.  # noqa: E501

        :param assessment_identifier: The assessment_identifier of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and assessment_identifier is None:
            raise ValueError("Invalid value for `assessment_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                assessment_identifier is not None and len(assessment_identifier) > 60):
            raise ValueError("Invalid value for `assessment_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._assessment_identifier = assessment_identifier

    @property
    def anonymized_student_reference(self):
        """Gets the anonymized_student_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501


        :return: The anonymized_student_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: TpdmAnonymizedStudentReference
        """
        return self._anonymized_student_reference

    @anonymized_student_reference.setter
    def anonymized_student_reference(self, anonymized_student_reference):
        """Sets the anonymized_student_reference of this TpdmAnonymizedStudentAssessment.


        :param anonymized_student_reference: The anonymized_student_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: TpdmAnonymizedStudentReference
        """
        if self._configuration.client_side_validation and anonymized_student_reference is None:
            raise ValueError("Invalid value for `anonymized_student_reference`, must not be `None`")  # noqa: E501

        self._anonymized_student_reference = anonymized_student_reference

    @property
    def taken_school_year_type_reference(self):
        """Gets the taken_school_year_type_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501


        :return: The taken_school_year_type_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._taken_school_year_type_reference

    @taken_school_year_type_reference.setter
    def taken_school_year_type_reference(self, taken_school_year_type_reference):
        """Sets the taken_school_year_type_reference of this TpdmAnonymizedStudentAssessment.


        :param taken_school_year_type_reference: The taken_school_year_type_reference of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and taken_school_year_type_reference is None:
            raise ValueError("Invalid value for `taken_school_year_type_reference`, must not be `None`")  # noqa: E501

        self._taken_school_year_type_reference = taken_school_year_type_reference

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        The academic subject associated with a student assessment  # noqa: E501

        :return: The academic_subject_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this TpdmAnonymizedStudentAssessment.

        The academic subject associated with a student assessment  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306):
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def assessment_category_descriptor(self):
        """Gets the assessment_category_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        The category of an assessment based on format and content. For example: Achievement test Advanced placement test Alternate assessment/grade-level standards Attitudinal test Cognitive and perceptual skills test ...  # noqa: E501

        :return: The assessment_category_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._assessment_category_descriptor

    @assessment_category_descriptor.setter
    def assessment_category_descriptor(self, assessment_category_descriptor):
        """Sets the assessment_category_descriptor of this TpdmAnonymizedStudentAssessment.

        The category of an assessment based on format and content. For example: Achievement test Advanced placement test Alternate assessment/grade-level standards Attitudinal test Cognitive and perceptual skills test ...  # noqa: E501

        :param assessment_category_descriptor: The assessment_category_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assessment_category_descriptor is not None and len(assessment_category_descriptor) > 306):
            raise ValueError("Invalid value for `assessment_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._assessment_category_descriptor = assessment_category_descriptor

    @property
    def assessment_title(self):
        """Gets the assessment_title of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        The title if any specific assessment given to a group  # noqa: E501

        :return: The assessment_title of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._assessment_title

    @assessment_title.setter
    def assessment_title(self, assessment_title):
        """Sets the assessment_title of this TpdmAnonymizedStudentAssessment.

        The title if any specific assessment given to a group  # noqa: E501

        :param assessment_title: The assessment_title of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assessment_title is not None and len(assessment_title) > 100):
            raise ValueError("Invalid value for `assessment_title`, length must be less than or equal to `100`")  # noqa: E501

        self._assessment_title = assessment_title

    @property
    def grade_level_descriptor(self):
        """Gets the grade_level_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        Grade level for which effectiveness is measured.  # noqa: E501

        :return: The grade_level_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._grade_level_descriptor

    @grade_level_descriptor.setter
    def grade_level_descriptor(self, grade_level_descriptor):
        """Sets the grade_level_descriptor of this TpdmAnonymizedStudentAssessment.

        Grade level for which effectiveness is measured.  # noqa: E501

        :param grade_level_descriptor: The grade_level_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                grade_level_descriptor is not None and len(grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._grade_level_descriptor = grade_level_descriptor

    @property
    def performance_level(self):
        """Gets the performance_level of this TpdmAnonymizedStudentAssessment.  # noqa: E501


        :return: The performance_level of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: TpdmAnonymizedStudentAssessmentPerformanceLevel
        """
        return self._performance_level

    @performance_level.setter
    def performance_level(self, performance_level):
        """Sets the performance_level of this TpdmAnonymizedStudentAssessment.


        :param performance_level: The performance_level of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: TpdmAnonymizedStudentAssessmentPerformanceLevel
        """

        self._performance_level = performance_level

    @property
    def score_result(self):
        """Gets the score_result of this TpdmAnonymizedStudentAssessment.  # noqa: E501


        :return: The score_result of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: TpdmAnonymizedStudentAssessmentScoreResult
        """
        return self._score_result

    @score_result.setter
    def score_result(self, score_result):
        """Sets the score_result of this TpdmAnonymizedStudentAssessment.


        :param score_result: The score_result of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: TpdmAnonymizedStudentAssessmentScoreResult
        """

        self._score_result = score_result

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        The term in which the assessment was administered  # noqa: E501

        :return: The term_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this TpdmAnonymizedStudentAssessment.

        The term in which the assessment was administered  # noqa: E501

        :param term_descriptor: The term_descriptor of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                term_descriptor is not None and len(term_descriptor) > 306):
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmAnonymizedStudentAssessment.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmAnonymizedStudentAssessment.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmAnonymizedStudentAssessment.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmAnonymizedStudentAssessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmAnonymizedStudentAssessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmAnonymizedStudentAssessment):
            return True

        return self.to_dict() != other.to_dict()
