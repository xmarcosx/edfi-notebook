# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentAcademicRecordAcademicHonor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'academic_honor_category_descriptor': 'str',
        'honor_description': 'str',
        'achievement_category_descriptor': 'str',
        'achievement_category_system': 'str',
        'achievement_title': 'str',
        'criteria': 'str',
        'criteria_url': 'str',
        'evidence_statement': 'str',
        'honor_award_date': 'date',
        'honor_award_expires_date': 'date',
        'image_url': 'str',
        'issuer_name': 'str',
        'issuer_origin_url': 'str'
    }

    attribute_map = {
        'academic_honor_category_descriptor': 'academicHonorCategoryDescriptor',
        'honor_description': 'honorDescription',
        'achievement_category_descriptor': 'achievementCategoryDescriptor',
        'achievement_category_system': 'achievementCategorySystem',
        'achievement_title': 'achievementTitle',
        'criteria': 'criteria',
        'criteria_url': 'criteriaURL',
        'evidence_statement': 'evidenceStatement',
        'honor_award_date': 'honorAwardDate',
        'honor_award_expires_date': 'honorAwardExpiresDate',
        'image_url': 'imageURL',
        'issuer_name': 'issuerName',
        'issuer_origin_url': 'issuerOriginURL'
    }

    def __init__(self, academic_honor_category_descriptor=None, honor_description=None, achievement_category_descriptor=None, achievement_category_system=None, achievement_title=None, criteria=None, criteria_url=None, evidence_statement=None, honor_award_date=None, honor_award_expires_date=None, image_url=None, issuer_name=None, issuer_origin_url=None, _configuration=None):  # noqa: E501
        """EdFiStudentAcademicRecordAcademicHonor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._academic_honor_category_descriptor = None
        self._honor_description = None
        self._achievement_category_descriptor = None
        self._achievement_category_system = None
        self._achievement_title = None
        self._criteria = None
        self._criteria_url = None
        self._evidence_statement = None
        self._honor_award_date = None
        self._honor_award_expires_date = None
        self._image_url = None
        self._issuer_name = None
        self._issuer_origin_url = None
        self.discriminator = None

        self.academic_honor_category_descriptor = academic_honor_category_descriptor
        self.honor_description = honor_description
        if achievement_category_descriptor is not None:
            self.achievement_category_descriptor = achievement_category_descriptor
        if achievement_category_system is not None:
            self.achievement_category_system = achievement_category_system
        if achievement_title is not None:
            self.achievement_title = achievement_title
        if criteria is not None:
            self.criteria = criteria
        if criteria_url is not None:
            self.criteria_url = criteria_url
        if evidence_statement is not None:
            self.evidence_statement = evidence_statement
        if honor_award_date is not None:
            self.honor_award_date = honor_award_date
        if honor_award_expires_date is not None:
            self.honor_award_expires_date = honor_award_expires_date
        if image_url is not None:
            self.image_url = image_url
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if issuer_origin_url is not None:
            self.issuer_origin_url = issuer_origin_url

    @property
    def academic_honor_category_descriptor(self):
        """Gets the academic_honor_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        A designation of the type of academic distinctions earned by or awarded to the student.  # noqa: E501

        :return: The academic_honor_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._academic_honor_category_descriptor

    @academic_honor_category_descriptor.setter
    def academic_honor_category_descriptor(self, academic_honor_category_descriptor):
        """Sets the academic_honor_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.

        A designation of the type of academic distinctions earned by or awarded to the student.  # noqa: E501

        :param academic_honor_category_descriptor: The academic_honor_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and academic_honor_category_descriptor is None:
            raise ValueError("Invalid value for `academic_honor_category_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                academic_honor_category_descriptor is not None and len(academic_honor_category_descriptor) > 306):
            raise ValueError("Invalid value for `academic_honor_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_honor_category_descriptor = academic_honor_category_descriptor

    @property
    def honor_description(self):
        """Gets the honor_description of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        A description of the type of academic distinctions earned by or awarded to the individual.  # noqa: E501

        :return: The honor_description of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._honor_description

    @honor_description.setter
    def honor_description(self, honor_description):
        """Sets the honor_description of this EdFiStudentAcademicRecordAcademicHonor.

        A description of the type of academic distinctions earned by or awarded to the individual.  # noqa: E501

        :param honor_description: The honor_description of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and honor_description is None:
            raise ValueError("Invalid value for `honor_description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                honor_description is not None and len(honor_description) > 80):
            raise ValueError("Invalid value for `honor_description`, length must be less than or equal to `80`")  # noqa: E501

        self._honor_description = honor_description

    @property
    def achievement_category_descriptor(self):
        """Gets the achievement_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The category of achievement attributed to the learner.  # noqa: E501

        :return: The achievement_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._achievement_category_descriptor

    @achievement_category_descriptor.setter
    def achievement_category_descriptor(self, achievement_category_descriptor):
        """Sets the achievement_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.

        The category of achievement attributed to the learner.  # noqa: E501

        :param achievement_category_descriptor: The achievement_category_descriptor of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                achievement_category_descriptor is not None and len(achievement_category_descriptor) > 306):
            raise ValueError("Invalid value for `achievement_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._achievement_category_descriptor = achievement_category_descriptor

    @property
    def achievement_category_system(self):
        """Gets the achievement_category_system of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The system that defines the categories by which an achievement is attributed to the learner.  # noqa: E501

        :return: The achievement_category_system of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._achievement_category_system

    @achievement_category_system.setter
    def achievement_category_system(self, achievement_category_system):
        """Sets the achievement_category_system of this EdFiStudentAcademicRecordAcademicHonor.

        The system that defines the categories by which an achievement is attributed to the learner.  # noqa: E501

        :param achievement_category_system: The achievement_category_system of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                achievement_category_system is not None and len(achievement_category_system) > 60):
            raise ValueError("Invalid value for `achievement_category_system`, length must be less than or equal to `60`")  # noqa: E501

        self._achievement_category_system = achievement_category_system

    @property
    def achievement_title(self):
        """Gets the achievement_title of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The title assigned to the achievement.  # noqa: E501

        :return: The achievement_title of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._achievement_title

    @achievement_title.setter
    def achievement_title(self, achievement_title):
        """Sets the achievement_title of this EdFiStudentAcademicRecordAcademicHonor.

        The title assigned to the achievement.  # noqa: E501

        :param achievement_title: The achievement_title of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                achievement_title is not None and len(achievement_title) > 60):
            raise ValueError("Invalid value for `achievement_title`, length must be less than or equal to `60`")  # noqa: E501

        self._achievement_title = achievement_title

    @property
    def criteria(self):
        """Gets the criteria of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The criteria for competency-based completion of the achievement/award.  # noqa: E501

        :return: The criteria of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this EdFiStudentAcademicRecordAcademicHonor.

        The criteria for competency-based completion of the achievement/award.  # noqa: E501

        :param criteria: The criteria of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                criteria is not None and len(criteria) > 150):
            raise ValueError("Invalid value for `criteria`, length must be less than or equal to `150`")  # noqa: E501

        self._criteria = criteria

    @property
    def criteria_url(self):
        """Gets the criteria_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.  # noqa: E501

        :return: The criteria_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._criteria_url

    @criteria_url.setter
    def criteria_url(self, criteria_url):
        """Sets the criteria_url of this EdFiStudentAcademicRecordAcademicHonor.

        The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.  # noqa: E501

        :param criteria_url: The criteria_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                criteria_url is not None and len(criteria_url) > 255):
            raise ValueError("Invalid value for `criteria_url`, length must be less than or equal to `255`")  # noqa: E501

        self._criteria_url = criteria_url

    @property
    def evidence_statement(self):
        """Gets the evidence_statement of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.  # noqa: E501

        :return: The evidence_statement of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._evidence_statement

    @evidence_statement.setter
    def evidence_statement(self, evidence_statement):
        """Sets the evidence_statement of this EdFiStudentAcademicRecordAcademicHonor.

        A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.  # noqa: E501

        :param evidence_statement: The evidence_statement of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evidence_statement is not None and len(evidence_statement) > 150):
            raise ValueError("Invalid value for `evidence_statement`, length must be less than or equal to `150`")  # noqa: E501

        self._evidence_statement = evidence_statement

    @property
    def honor_award_date(self):
        """Gets the honor_award_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The date the honor was awarded or earned.  # noqa: E501

        :return: The honor_award_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: date
        """
        return self._honor_award_date

    @honor_award_date.setter
    def honor_award_date(self, honor_award_date):
        """Sets the honor_award_date of this EdFiStudentAcademicRecordAcademicHonor.

        The date the honor was awarded or earned.  # noqa: E501

        :param honor_award_date: The honor_award_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: date
        """

        self._honor_award_date = honor_award_date

    @property
    def honor_award_expires_date(self):
        """Gets the honor_award_expires_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        Date on which the award expires.  # noqa: E501

        :return: The honor_award_expires_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: date
        """
        return self._honor_award_expires_date

    @honor_award_expires_date.setter
    def honor_award_expires_date(self, honor_award_expires_date):
        """Sets the honor_award_expires_date of this EdFiStudentAcademicRecordAcademicHonor.

        Date on which the award expires.  # noqa: E501

        :param honor_award_expires_date: The honor_award_expires_date of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: date
        """

        self._honor_award_expires_date = honor_award_expires_date

    @property
    def image_url(self):
        """Gets the image_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.  # noqa: E501

        :return: The image_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this EdFiStudentAcademicRecordAcademicHonor.

        The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.  # noqa: E501

        :param image_url: The image_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                image_url is not None and len(image_url) > 255):
            raise ValueError("Invalid value for `image_url`, length must be less than or equal to `255`")  # noqa: E501

        self._image_url = image_url

    @property
    def issuer_name(self):
        """Gets the issuer_name of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The name of the agent, entity, or institution issuing the element.  # noqa: E501

        :return: The issuer_name of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this EdFiStudentAcademicRecordAcademicHonor.

        The name of the agent, entity, or institution issuing the element.  # noqa: E501

        :param issuer_name: The issuer_name of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                issuer_name is not None and len(issuer_name) > 150):
            raise ValueError("Invalid value for `issuer_name`, length must be less than or equal to `150`")  # noqa: E501

        self._issuer_name = issuer_name

    @property
    def issuer_origin_url(self):
        """Gets the issuer_origin_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501

        The Uniform Resource Locator (URL) from which the award was issued.  # noqa: E501

        :return: The issuer_origin_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :rtype: str
        """
        return self._issuer_origin_url

    @issuer_origin_url.setter
    def issuer_origin_url(self, issuer_origin_url):
        """Sets the issuer_origin_url of this EdFiStudentAcademicRecordAcademicHonor.

        The Uniform Resource Locator (URL) from which the award was issued.  # noqa: E501

        :param issuer_origin_url: The issuer_origin_url of this EdFiStudentAcademicRecordAcademicHonor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                issuer_origin_url is not None and len(issuer_origin_url) > 255):
            raise ValueError("Invalid value for `issuer_origin_url`, length must be less than or equal to `255`")  # noqa: E501

        self._issuer_origin_url = issuer_origin_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentAcademicRecordAcademicHonor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentAcademicRecordAcademicHonor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentAcademicRecordAcademicHonor):
            return True

        return self.to_dict() != other.to_dict()
