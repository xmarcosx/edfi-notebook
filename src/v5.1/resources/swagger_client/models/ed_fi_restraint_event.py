# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiRestraintEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'restraint_event_identifier': 'str',
        'school_reference': 'EdFiSchoolReference',
        'student_reference': 'EdFiStudentReference',
        'educational_environment_descriptor': 'str',
        'event_date': 'date',
        'programs': 'list[EdFiRestraintEventProgram]',
        'reasons': 'list[EdFiRestraintEventReason]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'restraint_event_identifier': 'restraintEventIdentifier',
        'school_reference': 'schoolReference',
        'student_reference': 'studentReference',
        'educational_environment_descriptor': 'educationalEnvironmentDescriptor',
        'event_date': 'eventDate',
        'programs': 'programs',
        'reasons': 'reasons',
        'etag': '_etag'
    }

    def __init__(self, id=None, restraint_event_identifier=None, school_reference=None, student_reference=None, educational_environment_descriptor=None, event_date=None, programs=None, reasons=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiRestraintEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._restraint_event_identifier = None
        self._school_reference = None
        self._student_reference = None
        self._educational_environment_descriptor = None
        self._event_date = None
        self._programs = None
        self._reasons = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.restraint_event_identifier = restraint_event_identifier
        self.school_reference = school_reference
        self.student_reference = student_reference
        if educational_environment_descriptor is not None:
            self.educational_environment_descriptor = educational_environment_descriptor
        self.event_date = event_date
        if programs is not None:
            self.programs = programs
        if reasons is not None:
            self.reasons = reasons
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiRestraintEvent.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiRestraintEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiRestraintEvent.

          # noqa: E501

        :param id: The id of this EdFiRestraintEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def restraint_event_identifier(self):
        """Gets the restraint_event_identifier of this EdFiRestraintEvent.  # noqa: E501

        A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.  # noqa: E501

        :return: The restraint_event_identifier of this EdFiRestraintEvent.  # noqa: E501
        :rtype: str
        """
        return self._restraint_event_identifier

    @restraint_event_identifier.setter
    def restraint_event_identifier(self, restraint_event_identifier):
        """Sets the restraint_event_identifier of this EdFiRestraintEvent.

        A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.  # noqa: E501

        :param restraint_event_identifier: The restraint_event_identifier of this EdFiRestraintEvent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and restraint_event_identifier is None:
            raise ValueError("Invalid value for `restraint_event_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                restraint_event_identifier is not None and len(restraint_event_identifier) > 20):
            raise ValueError("Invalid value for `restraint_event_identifier`, length must be less than or equal to `20`")  # noqa: E501

        self._restraint_event_identifier = restraint_event_identifier

    @property
    def school_reference(self):
        """Gets the school_reference of this EdFiRestraintEvent.  # noqa: E501


        :return: The school_reference of this EdFiRestraintEvent.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this EdFiRestraintEvent.


        :param school_reference: The school_reference of this EdFiRestraintEvent.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and school_reference is None:
            raise ValueError("Invalid value for `school_reference`, must not be `None`")  # noqa: E501

        self._school_reference = school_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiRestraintEvent.  # noqa: E501


        :return: The student_reference of this EdFiRestraintEvent.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiRestraintEvent.


        :param student_reference: The student_reference of this EdFiRestraintEvent.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def educational_environment_descriptor(self):
        """Gets the educational_environment_descriptor of this EdFiRestraintEvent.  # noqa: E501

        The setting where the RestraintEvent was exercised.  # noqa: E501

        :return: The educational_environment_descriptor of this EdFiRestraintEvent.  # noqa: E501
        :rtype: str
        """
        return self._educational_environment_descriptor

    @educational_environment_descriptor.setter
    def educational_environment_descriptor(self, educational_environment_descriptor):
        """Sets the educational_environment_descriptor of this EdFiRestraintEvent.

        The setting where the RestraintEvent was exercised.  # noqa: E501

        :param educational_environment_descriptor: The educational_environment_descriptor of this EdFiRestraintEvent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                educational_environment_descriptor is not None and len(educational_environment_descriptor) > 306):
            raise ValueError("Invalid value for `educational_environment_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._educational_environment_descriptor = educational_environment_descriptor

    @property
    def event_date(self):
        """Gets the event_date of this EdFiRestraintEvent.  # noqa: E501

        Month, day, and year of the RestraintEvent.  # noqa: E501

        :return: The event_date of this EdFiRestraintEvent.  # noqa: E501
        :rtype: date
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this EdFiRestraintEvent.

        Month, day, and year of the RestraintEvent.  # noqa: E501

        :param event_date: The event_date of this EdFiRestraintEvent.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def programs(self):
        """Gets the programs of this EdFiRestraintEvent.  # noqa: E501

        An unordered collection of restraintEventPrograms. The special education program associated with the RestraintEvent.  # noqa: E501

        :return: The programs of this EdFiRestraintEvent.  # noqa: E501
        :rtype: list[EdFiRestraintEventProgram]
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this EdFiRestraintEvent.

        An unordered collection of restraintEventPrograms. The special education program associated with the RestraintEvent.  # noqa: E501

        :param programs: The programs of this EdFiRestraintEvent.  # noqa: E501
        :type: list[EdFiRestraintEventProgram]
        """

        self._programs = programs

    @property
    def reasons(self):
        """Gets the reasons of this EdFiRestraintEvent.  # noqa: E501

        An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.  # noqa: E501

        :return: The reasons of this EdFiRestraintEvent.  # noqa: E501
        :rtype: list[EdFiRestraintEventReason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this EdFiRestraintEvent.

        An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.  # noqa: E501

        :param reasons: The reasons of this EdFiRestraintEvent.  # noqa: E501
        :type: list[EdFiRestraintEventReason]
        """

        self._reasons = reasons

    @property
    def etag(self):
        """Gets the etag of this EdFiRestraintEvent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiRestraintEvent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiRestraintEvent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiRestraintEvent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiRestraintEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiRestraintEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiRestraintEvent):
            return True

        return self.to_dict() != other.to_dict()
