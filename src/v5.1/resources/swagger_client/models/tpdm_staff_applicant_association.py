# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmStaffApplicantAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'applicant_reference': 'TpdmApplicantReference',
        'staff_reference': 'EdFiStaffReference',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'applicant_reference': 'applicantReference',
        'staff_reference': 'staffReference',
        'etag': '_etag'
    }

    def __init__(self, id=None, applicant_reference=None, staff_reference=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmStaffApplicantAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._applicant_reference = None
        self._staff_reference = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.applicant_reference = applicant_reference
        self.staff_reference = staff_reference
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmStaffApplicantAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmStaffApplicantAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmStaffApplicantAssociation.

          # noqa: E501

        :param id: The id of this TpdmStaffApplicantAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def applicant_reference(self):
        """Gets the applicant_reference of this TpdmStaffApplicantAssociation.  # noqa: E501


        :return: The applicant_reference of this TpdmStaffApplicantAssociation.  # noqa: E501
        :rtype: TpdmApplicantReference
        """
        return self._applicant_reference

    @applicant_reference.setter
    def applicant_reference(self, applicant_reference):
        """Sets the applicant_reference of this TpdmStaffApplicantAssociation.


        :param applicant_reference: The applicant_reference of this TpdmStaffApplicantAssociation.  # noqa: E501
        :type: TpdmApplicantReference
        """
        if self._configuration.client_side_validation and applicant_reference is None:
            raise ValueError("Invalid value for `applicant_reference`, must not be `None`")  # noqa: E501

        self._applicant_reference = applicant_reference

    @property
    def staff_reference(self):
        """Gets the staff_reference of this TpdmStaffApplicantAssociation.  # noqa: E501


        :return: The staff_reference of this TpdmStaffApplicantAssociation.  # noqa: E501
        :rtype: EdFiStaffReference
        """
        return self._staff_reference

    @staff_reference.setter
    def staff_reference(self, staff_reference):
        """Sets the staff_reference of this TpdmStaffApplicantAssociation.


        :param staff_reference: The staff_reference of this TpdmStaffApplicantAssociation.  # noqa: E501
        :type: EdFiStaffReference
        """
        if self._configuration.client_side_validation and staff_reference is None:
            raise ValueError("Invalid value for `staff_reference`, must not be `None`")  # noqa: E501

        self._staff_reference = staff_reference

    @property
    def etag(self):
        """Gets the etag of this TpdmStaffApplicantAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmStaffApplicantAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmStaffApplicantAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmStaffApplicantAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmStaffApplicantAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmStaffApplicantAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmStaffApplicantAssociation):
            return True

        return self.to_dict() != other.to_dict()
