# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmAnonymizedStudent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'anonymized_student_identifier': 'str',
        'facts_as_of_date': 'date',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'atrisk_indicator': 'bool',
        'disabilities': 'list[TpdmAnonymizedStudentDisability]',
        'ell_enrollment': 'bool',
        'esl_enrollment': 'bool',
        'gender_descriptor': 'str',
        'grade_level_descriptor': 'str',
        'hispanic_latino_ethnicity': 'bool',
        'languages': 'list[TpdmAnonymizedStudentLanguage]',
        'mobility': 'int',
        'races': 'list[TpdmAnonymizedStudentRace]',
        'section504_enrollment': 'bool',
        'sex_descriptor': 'str',
        'sped_enrollment': 'bool',
        'title_i_enrollment': 'bool',
        'value_type_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'anonymized_student_identifier': 'anonymizedStudentIdentifier',
        'facts_as_of_date': 'factsAsOfDate',
        'school_year_type_reference': 'schoolYearTypeReference',
        'atrisk_indicator': 'atriskIndicator',
        'disabilities': 'disabilities',
        'ell_enrollment': 'ellEnrollment',
        'esl_enrollment': 'eslEnrollment',
        'gender_descriptor': 'genderDescriptor',
        'grade_level_descriptor': 'gradeLevelDescriptor',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'languages': 'languages',
        'mobility': 'mobility',
        'races': 'races',
        'section504_enrollment': 'section504Enrollment',
        'sex_descriptor': 'sexDescriptor',
        'sped_enrollment': 'spedEnrollment',
        'title_i_enrollment': 'titleIEnrollment',
        'value_type_descriptor': 'valueTypeDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, anonymized_student_identifier=None, facts_as_of_date=None, school_year_type_reference=None, atrisk_indicator=None, disabilities=None, ell_enrollment=None, esl_enrollment=None, gender_descriptor=None, grade_level_descriptor=None, hispanic_latino_ethnicity=None, languages=None, mobility=None, races=None, section504_enrollment=None, sex_descriptor=None, sped_enrollment=None, title_i_enrollment=None, value_type_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmAnonymizedStudent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._anonymized_student_identifier = None
        self._facts_as_of_date = None
        self._school_year_type_reference = None
        self._atrisk_indicator = None
        self._disabilities = None
        self._ell_enrollment = None
        self._esl_enrollment = None
        self._gender_descriptor = None
        self._grade_level_descriptor = None
        self._hispanic_latino_ethnicity = None
        self._languages = None
        self._mobility = None
        self._races = None
        self._section504_enrollment = None
        self._sex_descriptor = None
        self._sped_enrollment = None
        self._title_i_enrollment = None
        self._value_type_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.anonymized_student_identifier = anonymized_student_identifier
        self.facts_as_of_date = facts_as_of_date
        self.school_year_type_reference = school_year_type_reference
        if atrisk_indicator is not None:
            self.atrisk_indicator = atrisk_indicator
        if disabilities is not None:
            self.disabilities = disabilities
        if ell_enrollment is not None:
            self.ell_enrollment = ell_enrollment
        if esl_enrollment is not None:
            self.esl_enrollment = esl_enrollment
        if gender_descriptor is not None:
            self.gender_descriptor = gender_descriptor
        if grade_level_descriptor is not None:
            self.grade_level_descriptor = grade_level_descriptor
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        if languages is not None:
            self.languages = languages
        if mobility is not None:
            self.mobility = mobility
        if races is not None:
            self.races = races
        if section504_enrollment is not None:
            self.section504_enrollment = section504_enrollment
        if sex_descriptor is not None:
            self.sex_descriptor = sex_descriptor
        if sped_enrollment is not None:
            self.sped_enrollment = sped_enrollment
        if title_i_enrollment is not None:
            self.title_i_enrollment = title_i_enrollment
        if value_type_descriptor is not None:
            self.value_type_descriptor = value_type_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmAnonymizedStudent.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmAnonymizedStudent.

          # noqa: E501

        :param id: The id of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def anonymized_student_identifier(self):
        """Gets the anonymized_student_identifier of this TpdmAnonymizedStudent.  # noqa: E501

        Unique identifier for anonymized student  # noqa: E501

        :return: The anonymized_student_identifier of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._anonymized_student_identifier

    @anonymized_student_identifier.setter
    def anonymized_student_identifier(self, anonymized_student_identifier):
        """Sets the anonymized_student_identifier of this TpdmAnonymizedStudent.

        Unique identifier for anonymized student  # noqa: E501

        :param anonymized_student_identifier: The anonymized_student_identifier of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and anonymized_student_identifier is None:
            raise ValueError("Invalid value for `anonymized_student_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                anonymized_student_identifier is not None and len(anonymized_student_identifier) > 60):
            raise ValueError("Invalid value for `anonymized_student_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._anonymized_student_identifier = anonymized_student_identifier

    @property
    def facts_as_of_date(self):
        """Gets the facts_as_of_date of this TpdmAnonymizedStudent.  # noqa: E501

        The date for which the data element is relevant  # noqa: E501

        :return: The facts_as_of_date of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: date
        """
        return self._facts_as_of_date

    @facts_as_of_date.setter
    def facts_as_of_date(self, facts_as_of_date):
        """Sets the facts_as_of_date of this TpdmAnonymizedStudent.

        The date for which the data element is relevant  # noqa: E501

        :param facts_as_of_date: The facts_as_of_date of this TpdmAnonymizedStudent.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and facts_as_of_date is None:
            raise ValueError("Invalid value for `facts_as_of_date`, must not be `None`")  # noqa: E501

        self._facts_as_of_date = facts_as_of_date

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this TpdmAnonymizedStudent.  # noqa: E501


        :return: The school_year_type_reference of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this TpdmAnonymizedStudent.


        :param school_year_type_reference: The school_year_type_reference of this TpdmAnonymizedStudent.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def atrisk_indicator(self):
        """Gets the atrisk_indicator of this TpdmAnonymizedStudent.  # noqa: E501

        An indicator that identifies if the student has been flagged as being at risk according to the District's definition of at risk.  # noqa: E501

        :return: The atrisk_indicator of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._atrisk_indicator

    @atrisk_indicator.setter
    def atrisk_indicator(self, atrisk_indicator):
        """Sets the atrisk_indicator of this TpdmAnonymizedStudent.

        An indicator that identifies if the student has been flagged as being at risk according to the District's definition of at risk.  # noqa: E501

        :param atrisk_indicator: The atrisk_indicator of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._atrisk_indicator = atrisk_indicator

    @property
    def disabilities(self):
        """Gets the disabilities of this TpdmAnonymizedStudent.  # noqa: E501

        An unordered collection of anonymizedStudentDisabilities. A disability category that describes a child's impairment.  # noqa: E501

        :return: The disabilities of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: list[TpdmAnonymizedStudentDisability]
        """
        return self._disabilities

    @disabilities.setter
    def disabilities(self, disabilities):
        """Sets the disabilities of this TpdmAnonymizedStudent.

        An unordered collection of anonymizedStudentDisabilities. A disability category that describes a child's impairment.  # noqa: E501

        :param disabilities: The disabilities of this TpdmAnonymizedStudent.  # noqa: E501
        :type: list[TpdmAnonymizedStudentDisability]
        """

        self._disabilities = disabilities

    @property
    def ell_enrollment(self):
        """Gets the ell_enrollment of this TpdmAnonymizedStudent.  # noqa: E501

        Data about the ELL enrollment of the student  # noqa: E501

        :return: The ell_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._ell_enrollment

    @ell_enrollment.setter
    def ell_enrollment(self, ell_enrollment):
        """Sets the ell_enrollment of this TpdmAnonymizedStudent.

        Data about the ELL enrollment of the student  # noqa: E501

        :param ell_enrollment: The ell_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._ell_enrollment = ell_enrollment

    @property
    def esl_enrollment(self):
        """Gets the esl_enrollment of this TpdmAnonymizedStudent.  # noqa: E501

        Data about the ESL enrollment of the student  # noqa: E501

        :return: The esl_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._esl_enrollment

    @esl_enrollment.setter
    def esl_enrollment(self, esl_enrollment):
        """Sets the esl_enrollment of this TpdmAnonymizedStudent.

        Data about the ESL enrollment of the student  # noqa: E501

        :param esl_enrollment: The esl_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._esl_enrollment = esl_enrollment

    @property
    def gender_descriptor(self):
        """Gets the gender_descriptor of this TpdmAnonymizedStudent.  # noqa: E501

        The gender with which a person associates.  # noqa: E501

        :return: The gender_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._gender_descriptor

    @gender_descriptor.setter
    def gender_descriptor(self, gender_descriptor):
        """Sets the gender_descriptor of this TpdmAnonymizedStudent.

        The gender with which a person associates.  # noqa: E501

        :param gender_descriptor: The gender_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gender_descriptor is not None and len(gender_descriptor) > 306):
            raise ValueError("Invalid value for `gender_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._gender_descriptor = gender_descriptor

    @property
    def grade_level_descriptor(self):
        """Gets the grade_level_descriptor of this TpdmAnonymizedStudent.  # noqa: E501

        The grade level for the student.  # noqa: E501

        :return: The grade_level_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._grade_level_descriptor

    @grade_level_descriptor.setter
    def grade_level_descriptor(self, grade_level_descriptor):
        """Sets the grade_level_descriptor of this TpdmAnonymizedStudent.

        The grade level for the student.  # noqa: E501

        :param grade_level_descriptor: The grade_level_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                grade_level_descriptor is not None and len(grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._grade_level_descriptor = grade_level_descriptor

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this TpdmAnonymizedStudent.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :return: The hispanic_latino_ethnicity of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this TpdmAnonymizedStudent.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def languages(self):
        """Gets the languages of this TpdmAnonymizedStudent.  # noqa: E501

        An unordered collection of anonymizedStudentLanguages. The language(s) the individual uses to communicate.  # noqa: E501

        :return: The languages of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: list[TpdmAnonymizedStudentLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this TpdmAnonymizedStudent.

        An unordered collection of anonymizedStudentLanguages. The language(s) the individual uses to communicate.  # noqa: E501

        :param languages: The languages of this TpdmAnonymizedStudent.  # noqa: E501
        :type: list[TpdmAnonymizedStudentLanguage]
        """

        self._languages = languages

    @property
    def mobility(self):
        """Gets the mobility of this TpdmAnonymizedStudent.  # noqa: E501

        The number of times a student has moved schools during the current school year.  # noqa: E501

        :return: The mobility of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: int
        """
        return self._mobility

    @mobility.setter
    def mobility(self, mobility):
        """Sets the mobility of this TpdmAnonymizedStudent.

        The number of times a student has moved schools during the current school year.  # noqa: E501

        :param mobility: The mobility of this TpdmAnonymizedStudent.  # noqa: E501
        :type: int
        """

        self._mobility = mobility

    @property
    def races(self):
        """Gets the races of this TpdmAnonymizedStudent.  # noqa: E501

        An unordered collection of anonymizedStudentRaces. The general racial category which most clearly reflects the individual's                   recognition of his or her community or with which the individual most                   identifies. The data model allows for multiple entries so that each individual                   can specify all appropriate races.  # noqa: E501

        :return: The races of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: list[TpdmAnonymizedStudentRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this TpdmAnonymizedStudent.

        An unordered collection of anonymizedStudentRaces. The general racial category which most clearly reflects the individual's                   recognition of his or her community or with which the individual most                   identifies. The data model allows for multiple entries so that each individual                   can specify all appropriate races.  # noqa: E501

        :param races: The races of this TpdmAnonymizedStudent.  # noqa: E501
        :type: list[TpdmAnonymizedStudentRace]
        """

        self._races = races

    @property
    def section504_enrollment(self):
        """Gets the section504_enrollment of this TpdmAnonymizedStudent.  # noqa: E501

        Information about the students who are enrolled in a 504 program  # noqa: E501

        :return: The section504_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._section504_enrollment

    @section504_enrollment.setter
    def section504_enrollment(self, section504_enrollment):
        """Sets the section504_enrollment of this TpdmAnonymizedStudent.

        Information about the students who are enrolled in a 504 program  # noqa: E501

        :param section504_enrollment: The section504_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._section504_enrollment = section504_enrollment

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this TpdmAnonymizedStudent.  # noqa: E501

        A person's gender.  # noqa: E501

        :return: The sex_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this TpdmAnonymizedStudent.

        A person's gender.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def sped_enrollment(self):
        """Gets the sped_enrollment of this TpdmAnonymizedStudent.  # noqa: E501

        Data about the enrollment in SPED of the student  # noqa: E501

        :return: The sped_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._sped_enrollment

    @sped_enrollment.setter
    def sped_enrollment(self, sped_enrollment):
        """Sets the sped_enrollment of this TpdmAnonymizedStudent.

        Data about the enrollment in SPED of the student  # noqa: E501

        :param sped_enrollment: The sped_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._sped_enrollment = sped_enrollment

    @property
    def title_i_enrollment(self):
        """Gets the title_i_enrollment of this TpdmAnonymizedStudent.  # noqa: E501

        Data about the enrollment in Title I of the student  # noqa: E501

        :return: The title_i_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: bool
        """
        return self._title_i_enrollment

    @title_i_enrollment.setter
    def title_i_enrollment(self, title_i_enrollment):
        """Sets the title_i_enrollment of this TpdmAnonymizedStudent.

        Data about the enrollment in Title I of the student  # noqa: E501

        :param title_i_enrollment: The title_i_enrollment of this TpdmAnonymizedStudent.  # noqa: E501
        :type: bool
        """

        self._title_i_enrollment = title_i_enrollment

    @property
    def value_type_descriptor(self):
        """Gets the value_type_descriptor of this TpdmAnonymizedStudent.  # noqa: E501

        Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching  # noqa: E501

        :return: The value_type_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._value_type_descriptor

    @value_type_descriptor.setter
    def value_type_descriptor(self, value_type_descriptor):
        """Sets the value_type_descriptor of this TpdmAnonymizedStudent.

        Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching  # noqa: E501

        :param value_type_descriptor: The value_type_descriptor of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                value_type_descriptor is not None and len(value_type_descriptor) > 306):
            raise ValueError("Invalid value for `value_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._value_type_descriptor = value_type_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmAnonymizedStudent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmAnonymizedStudent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmAnonymizedStudent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmAnonymizedStudent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmAnonymizedStudent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmAnonymizedStudent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmAnonymizedStudent):
            return True

        return self.to_dict() != other.to_dict()
