# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiSurveyQuestionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'survey_question_reference': 'EdFiSurveyQuestionReference',
        'survey_response_reference': 'EdFiSurveyResponseReference',
        'comment': 'str',
        'no_response': 'bool',
        'survey_question_matrix_element_responses': 'list[EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse]',
        'values': 'list[EdFiSurveyQuestionResponseValue]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'survey_question_reference': 'surveyQuestionReference',
        'survey_response_reference': 'surveyResponseReference',
        'comment': 'comment',
        'no_response': 'noResponse',
        'survey_question_matrix_element_responses': 'surveyQuestionMatrixElementResponses',
        'values': 'values',
        'etag': '_etag'
    }

    def __init__(self, id=None, survey_question_reference=None, survey_response_reference=None, comment=None, no_response=None, survey_question_matrix_element_responses=None, values=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiSurveyQuestionResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._survey_question_reference = None
        self._survey_response_reference = None
        self._comment = None
        self._no_response = None
        self._survey_question_matrix_element_responses = None
        self._values = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.survey_question_reference = survey_question_reference
        self.survey_response_reference = survey_response_reference
        if comment is not None:
            self.comment = comment
        if no_response is not None:
            self.no_response = no_response
        if survey_question_matrix_element_responses is not None:
            self.survey_question_matrix_element_responses = survey_question_matrix_element_responses
        if values is not None:
            self.values = values
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiSurveyQuestionResponse.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiSurveyQuestionResponse.

          # noqa: E501

        :param id: The id of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def survey_question_reference(self):
        """Gets the survey_question_reference of this EdFiSurveyQuestionResponse.  # noqa: E501


        :return: The survey_question_reference of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: EdFiSurveyQuestionReference
        """
        return self._survey_question_reference

    @survey_question_reference.setter
    def survey_question_reference(self, survey_question_reference):
        """Sets the survey_question_reference of this EdFiSurveyQuestionResponse.


        :param survey_question_reference: The survey_question_reference of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: EdFiSurveyQuestionReference
        """
        if self._configuration.client_side_validation and survey_question_reference is None:
            raise ValueError("Invalid value for `survey_question_reference`, must not be `None`")  # noqa: E501

        self._survey_question_reference = survey_question_reference

    @property
    def survey_response_reference(self):
        """Gets the survey_response_reference of this EdFiSurveyQuestionResponse.  # noqa: E501


        :return: The survey_response_reference of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: EdFiSurveyResponseReference
        """
        return self._survey_response_reference

    @survey_response_reference.setter
    def survey_response_reference(self, survey_response_reference):
        """Sets the survey_response_reference of this EdFiSurveyQuestionResponse.


        :param survey_response_reference: The survey_response_reference of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: EdFiSurveyResponseReference
        """
        if self._configuration.client_side_validation and survey_response_reference is None:
            raise ValueError("Invalid value for `survey_response_reference`, must not be `None`")  # noqa: E501

        self._survey_response_reference = survey_response_reference

    @property
    def comment(self):
        """Gets the comment of this EdFiSurveyQuestionResponse.  # noqa: E501

        Additional information provided by the responder about the question in the survey.  # noqa: E501

        :return: The comment of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EdFiSurveyQuestionResponse.

        Additional information provided by the responder about the question in the survey.  # noqa: E501

        :param comment: The comment of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                comment is not None and len(comment) > 1024):
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `1024`")  # noqa: E501

        self._comment = comment

    @property
    def no_response(self):
        """Gets the no_response of this EdFiSurveyQuestionResponse.  # noqa: E501

        Indicates there was no response to the question.  # noqa: E501

        :return: The no_response of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._no_response

    @no_response.setter
    def no_response(self, no_response):
        """Sets the no_response of this EdFiSurveyQuestionResponse.

        Indicates there was no response to the question.  # noqa: E501

        :param no_response: The no_response of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: bool
        """

        self._no_response = no_response

    @property
    def survey_question_matrix_element_responses(self):
        """Gets the survey_question_matrix_element_responses of this EdFiSurveyQuestionResponse.  # noqa: E501

        An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.  # noqa: E501

        :return: The survey_question_matrix_element_responses of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: list[EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse]
        """
        return self._survey_question_matrix_element_responses

    @survey_question_matrix_element_responses.setter
    def survey_question_matrix_element_responses(self, survey_question_matrix_element_responses):
        """Sets the survey_question_matrix_element_responses of this EdFiSurveyQuestionResponse.

        An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.  # noqa: E501

        :param survey_question_matrix_element_responses: The survey_question_matrix_element_responses of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: list[EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse]
        """

        self._survey_question_matrix_element_responses = survey_question_matrix_element_responses

    @property
    def values(self):
        """Gets the values of this EdFiSurveyQuestionResponse.  # noqa: E501

        An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.  # noqa: E501

        :return: The values of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: list[EdFiSurveyQuestionResponseValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this EdFiSurveyQuestionResponse.

        An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.  # noqa: E501

        :param values: The values of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: list[EdFiSurveyQuestionResponseValue]
        """

        self._values = values

    @property
    def etag(self):
        """Gets the etag of this EdFiSurveyQuestionResponse.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiSurveyQuestionResponse.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiSurveyQuestionResponse.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiSurveyQuestionResponse.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiSurveyQuestionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiSurveyQuestionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiSurveyQuestionResponse):
            return True

        return self.to_dict() != other.to_dict()
