# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCommunityProviderLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'license_identifier': 'str',
        'licensing_organization': 'str',
        'community_provider_reference': 'EdFiCommunityProviderReference',
        'authorized_facility_capacity': 'int',
        'license_effective_date': 'date',
        'license_expiration_date': 'date',
        'license_issue_date': 'date',
        'license_status_descriptor': 'str',
        'license_type_descriptor': 'str',
        'oldest_age_authorized_to_serve': 'int',
        'youngest_age_authorized_to_serve': 'int',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'license_identifier': 'licenseIdentifier',
        'licensing_organization': 'licensingOrganization',
        'community_provider_reference': 'communityProviderReference',
        'authorized_facility_capacity': 'authorizedFacilityCapacity',
        'license_effective_date': 'licenseEffectiveDate',
        'license_expiration_date': 'licenseExpirationDate',
        'license_issue_date': 'licenseIssueDate',
        'license_status_descriptor': 'licenseStatusDescriptor',
        'license_type_descriptor': 'licenseTypeDescriptor',
        'oldest_age_authorized_to_serve': 'oldestAgeAuthorizedToServe',
        'youngest_age_authorized_to_serve': 'youngestAgeAuthorizedToServe',
        'etag': '_etag'
    }

    def __init__(self, id=None, license_identifier=None, licensing_organization=None, community_provider_reference=None, authorized_facility_capacity=None, license_effective_date=None, license_expiration_date=None, license_issue_date=None, license_status_descriptor=None, license_type_descriptor=None, oldest_age_authorized_to_serve=None, youngest_age_authorized_to_serve=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCommunityProviderLicense - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._license_identifier = None
        self._licensing_organization = None
        self._community_provider_reference = None
        self._authorized_facility_capacity = None
        self._license_effective_date = None
        self._license_expiration_date = None
        self._license_issue_date = None
        self._license_status_descriptor = None
        self._license_type_descriptor = None
        self._oldest_age_authorized_to_serve = None
        self._youngest_age_authorized_to_serve = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.license_identifier = license_identifier
        self.licensing_organization = licensing_organization
        self.community_provider_reference = community_provider_reference
        if authorized_facility_capacity is not None:
            self.authorized_facility_capacity = authorized_facility_capacity
        self.license_effective_date = license_effective_date
        if license_expiration_date is not None:
            self.license_expiration_date = license_expiration_date
        if license_issue_date is not None:
            self.license_issue_date = license_issue_date
        if license_status_descriptor is not None:
            self.license_status_descriptor = license_status_descriptor
        self.license_type_descriptor = license_type_descriptor
        if oldest_age_authorized_to_serve is not None:
            self.oldest_age_authorized_to_serve = oldest_age_authorized_to_serve
        if youngest_age_authorized_to_serve is not None:
            self.youngest_age_authorized_to_serve = youngest_age_authorized_to_serve
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCommunityProviderLicense.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCommunityProviderLicense.

          # noqa: E501

        :param id: The id of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def license_identifier(self):
        """Gets the license_identifier of this EdFiCommunityProviderLicense.  # noqa: E501

        The unique identifier issued by the licensing organization.  # noqa: E501

        :return: The license_identifier of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_identifier

    @license_identifier.setter
    def license_identifier(self, license_identifier):
        """Sets the license_identifier of this EdFiCommunityProviderLicense.

        The unique identifier issued by the licensing organization.  # noqa: E501

        :param license_identifier: The license_identifier of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and license_identifier is None:
            raise ValueError("Invalid value for `license_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                license_identifier is not None and len(license_identifier) > 20):
            raise ValueError("Invalid value for `license_identifier`, length must be less than or equal to `20`")  # noqa: E501

        self._license_identifier = license_identifier

    @property
    def licensing_organization(self):
        """Gets the licensing_organization of this EdFiCommunityProviderLicense.  # noqa: E501

        The organization issuing the license.  # noqa: E501

        :return: The licensing_organization of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._licensing_organization

    @licensing_organization.setter
    def licensing_organization(self, licensing_organization):
        """Sets the licensing_organization of this EdFiCommunityProviderLicense.

        The organization issuing the license.  # noqa: E501

        :param licensing_organization: The licensing_organization of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and licensing_organization is None:
            raise ValueError("Invalid value for `licensing_organization`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                licensing_organization is not None and len(licensing_organization) > 75):
            raise ValueError("Invalid value for `licensing_organization`, length must be less than or equal to `75`")  # noqa: E501

        self._licensing_organization = licensing_organization

    @property
    def community_provider_reference(self):
        """Gets the community_provider_reference of this EdFiCommunityProviderLicense.  # noqa: E501


        :return: The community_provider_reference of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: EdFiCommunityProviderReference
        """
        return self._community_provider_reference

    @community_provider_reference.setter
    def community_provider_reference(self, community_provider_reference):
        """Sets the community_provider_reference of this EdFiCommunityProviderLicense.


        :param community_provider_reference: The community_provider_reference of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: EdFiCommunityProviderReference
        """
        if self._configuration.client_side_validation and community_provider_reference is None:
            raise ValueError("Invalid value for `community_provider_reference`, must not be `None`")  # noqa: E501

        self._community_provider_reference = community_provider_reference

    @property
    def authorized_facility_capacity(self):
        """Gets the authorized_facility_capacity of this EdFiCommunityProviderLicense.  # noqa: E501

        The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.  # noqa: E501

        :return: The authorized_facility_capacity of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: int
        """
        return self._authorized_facility_capacity

    @authorized_facility_capacity.setter
    def authorized_facility_capacity(self, authorized_facility_capacity):
        """Sets the authorized_facility_capacity of this EdFiCommunityProviderLicense.

        The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.  # noqa: E501

        :param authorized_facility_capacity: The authorized_facility_capacity of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: int
        """

        self._authorized_facility_capacity = authorized_facility_capacity

    @property
    def license_effective_date(self):
        """Gets the license_effective_date of this EdFiCommunityProviderLicense.  # noqa: E501

        The month, day, and year on which a license is active or becomes effective.  # noqa: E501

        :return: The license_effective_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: date
        """
        return self._license_effective_date

    @license_effective_date.setter
    def license_effective_date(self, license_effective_date):
        """Sets the license_effective_date of this EdFiCommunityProviderLicense.

        The month, day, and year on which a license is active or becomes effective.  # noqa: E501

        :param license_effective_date: The license_effective_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and license_effective_date is None:
            raise ValueError("Invalid value for `license_effective_date`, must not be `None`")  # noqa: E501

        self._license_effective_date = license_effective_date

    @property
    def license_expiration_date(self):
        """Gets the license_expiration_date of this EdFiCommunityProviderLicense.  # noqa: E501

        The month, day, and year on which a license will expire.  # noqa: E501

        :return: The license_expiration_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: date
        """
        return self._license_expiration_date

    @license_expiration_date.setter
    def license_expiration_date(self, license_expiration_date):
        """Sets the license_expiration_date of this EdFiCommunityProviderLicense.

        The month, day, and year on which a license will expire.  # noqa: E501

        :param license_expiration_date: The license_expiration_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: date
        """

        self._license_expiration_date = license_expiration_date

    @property
    def license_issue_date(self):
        """Gets the license_issue_date of this EdFiCommunityProviderLicense.  # noqa: E501

        The month, day, and year on which an active license was issued.  # noqa: E501

        :return: The license_issue_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: date
        """
        return self._license_issue_date

    @license_issue_date.setter
    def license_issue_date(self, license_issue_date):
        """Sets the license_issue_date of this EdFiCommunityProviderLicense.

        The month, day, and year on which an active license was issued.  # noqa: E501

        :param license_issue_date: The license_issue_date of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: date
        """

        self._license_issue_date = license_issue_date

    @property
    def license_status_descriptor(self):
        """Gets the license_status_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501

        An indication of the status of the license.  # noqa: E501

        :return: The license_status_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_status_descriptor

    @license_status_descriptor.setter
    def license_status_descriptor(self, license_status_descriptor):
        """Sets the license_status_descriptor of this EdFiCommunityProviderLicense.

        An indication of the status of the license.  # noqa: E501

        :param license_status_descriptor: The license_status_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                license_status_descriptor is not None and len(license_status_descriptor) > 306):
            raise ValueError("Invalid value for `license_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._license_status_descriptor = license_status_descriptor

    @property
    def license_type_descriptor(self):
        """Gets the license_type_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501

        An indication of the category of the license.  # noqa: E501

        :return: The license_type_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_type_descriptor

    @license_type_descriptor.setter
    def license_type_descriptor(self, license_type_descriptor):
        """Sets the license_type_descriptor of this EdFiCommunityProviderLicense.

        An indication of the category of the license.  # noqa: E501

        :param license_type_descriptor: The license_type_descriptor of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and license_type_descriptor is None:
            raise ValueError("Invalid value for `license_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                license_type_descriptor is not None and len(license_type_descriptor) > 306):
            raise ValueError("Invalid value for `license_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._license_type_descriptor = license_type_descriptor

    @property
    def oldest_age_authorized_to_serve(self):
        """Gets the oldest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501

        The oldest age of children a provider is authorized or licensed to serve.  # noqa: E501

        :return: The oldest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: int
        """
        return self._oldest_age_authorized_to_serve

    @oldest_age_authorized_to_serve.setter
    def oldest_age_authorized_to_serve(self, oldest_age_authorized_to_serve):
        """Sets the oldest_age_authorized_to_serve of this EdFiCommunityProviderLicense.

        The oldest age of children a provider is authorized or licensed to serve.  # noqa: E501

        :param oldest_age_authorized_to_serve: The oldest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: int
        """

        self._oldest_age_authorized_to_serve = oldest_age_authorized_to_serve

    @property
    def youngest_age_authorized_to_serve(self):
        """Gets the youngest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501

        The youngest age of children a provider is authorized or licensed to serve.  # noqa: E501

        :return: The youngest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: int
        """
        return self._youngest_age_authorized_to_serve

    @youngest_age_authorized_to_serve.setter
    def youngest_age_authorized_to_serve(self, youngest_age_authorized_to_serve):
        """Sets the youngest_age_authorized_to_serve of this EdFiCommunityProviderLicense.

        The youngest age of children a provider is authorized or licensed to serve.  # noqa: E501

        :param youngest_age_authorized_to_serve: The youngest_age_authorized_to_serve of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: int
        """

        self._youngest_age_authorized_to_serve = youngest_age_authorized_to_serve

    @property
    def etag(self):
        """Gets the etag of this EdFiCommunityProviderLicense.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCommunityProviderLicense.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCommunityProviderLicense.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCommunityProviderLicense.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCommunityProviderLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCommunityProviderLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCommunityProviderLicense):
            return True

        return self.to_dict() != other.to_dict()
