# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmProspect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'prospect_identifier': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'person_reference': 'EdFiPersonReference',
        'teacher_candidate_reference': 'TpdmTeacherCandidateReference',
        'aid': 'TpdmProspectAid',
        'applied': 'bool',
        'current_position': 'TpdmProspectCurrentPosition',
        'disabilities': 'list[TpdmProspectDisability]',
        'economic_disadvantaged': 'bool',
        'electronic_mail_address': 'str',
        'first_generation_student': 'bool',
        'first_name': 'str',
        'gender_descriptor': 'str',
        'generation_code_suffix': 'str',
        'hispanic_latino_ethnicity': 'bool',
        'last_surname': 'str',
        'maiden_name': 'str',
        'met': 'bool',
        'middle_name': 'str',
        'notes': 'str',
        'personal_identification_documents': 'list[TpdmProspectPersonalIdentificationDocument]',
        'personal_title_prefix': 'str',
        'pre_screening_rating': 'int',
        'prospect_type_descriptor': 'str',
        'qualifications': 'TpdmProspectQualifications',
        'races': 'list[TpdmProspectRace]',
        'recruitment_events': 'list[TpdmProspectRecruitmentEvent]',
        'referral': 'bool',
        'referred_by': 'str',
        'sex_descriptor': 'str',
        'social_media_network_name': 'str',
        'social_media_user_name': 'str',
        'telephones': 'list[TpdmProspectTelephone]',
        'touchpoints': 'list[TpdmProspectTouchpoint]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'prospect_identifier': 'prospectIdentifier',
        'education_organization_reference': 'educationOrganizationReference',
        'person_reference': 'personReference',
        'teacher_candidate_reference': 'teacherCandidateReference',
        'aid': 'aid',
        'applied': 'applied',
        'current_position': 'currentPosition',
        'disabilities': 'disabilities',
        'economic_disadvantaged': 'economicDisadvantaged',
        'electronic_mail_address': 'electronicMailAddress',
        'first_generation_student': 'firstGenerationStudent',
        'first_name': 'firstName',
        'gender_descriptor': 'genderDescriptor',
        'generation_code_suffix': 'generationCodeSuffix',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'last_surname': 'lastSurname',
        'maiden_name': 'maidenName',
        'met': 'met',
        'middle_name': 'middleName',
        'notes': 'notes',
        'personal_identification_documents': 'personalIdentificationDocuments',
        'personal_title_prefix': 'personalTitlePrefix',
        'pre_screening_rating': 'preScreeningRating',
        'prospect_type_descriptor': 'prospectTypeDescriptor',
        'qualifications': 'qualifications',
        'races': 'races',
        'recruitment_events': 'recruitmentEvents',
        'referral': 'referral',
        'referred_by': 'referredBy',
        'sex_descriptor': 'sexDescriptor',
        'social_media_network_name': 'socialMediaNetworkName',
        'social_media_user_name': 'socialMediaUserName',
        'telephones': 'telephones',
        'touchpoints': 'touchpoints',
        'etag': '_etag'
    }

    def __init__(self, id=None, prospect_identifier=None, education_organization_reference=None, person_reference=None, teacher_candidate_reference=None, aid=None, applied=None, current_position=None, disabilities=None, economic_disadvantaged=None, electronic_mail_address=None, first_generation_student=None, first_name=None, gender_descriptor=None, generation_code_suffix=None, hispanic_latino_ethnicity=None, last_surname=None, maiden_name=None, met=None, middle_name=None, notes=None, personal_identification_documents=None, personal_title_prefix=None, pre_screening_rating=None, prospect_type_descriptor=None, qualifications=None, races=None, recruitment_events=None, referral=None, referred_by=None, sex_descriptor=None, social_media_network_name=None, social_media_user_name=None, telephones=None, touchpoints=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmProspect - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._prospect_identifier = None
        self._education_organization_reference = None
        self._person_reference = None
        self._teacher_candidate_reference = None
        self._aid = None
        self._applied = None
        self._current_position = None
        self._disabilities = None
        self._economic_disadvantaged = None
        self._electronic_mail_address = None
        self._first_generation_student = None
        self._first_name = None
        self._gender_descriptor = None
        self._generation_code_suffix = None
        self._hispanic_latino_ethnicity = None
        self._last_surname = None
        self._maiden_name = None
        self._met = None
        self._middle_name = None
        self._notes = None
        self._personal_identification_documents = None
        self._personal_title_prefix = None
        self._pre_screening_rating = None
        self._prospect_type_descriptor = None
        self._qualifications = None
        self._races = None
        self._recruitment_events = None
        self._referral = None
        self._referred_by = None
        self._sex_descriptor = None
        self._social_media_network_name = None
        self._social_media_user_name = None
        self._telephones = None
        self._touchpoints = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.prospect_identifier = prospect_identifier
        self.education_organization_reference = education_organization_reference
        if person_reference is not None:
            self.person_reference = person_reference
        if teacher_candidate_reference is not None:
            self.teacher_candidate_reference = teacher_candidate_reference
        if aid is not None:
            self.aid = aid
        if applied is not None:
            self.applied = applied
        if current_position is not None:
            self.current_position = current_position
        if disabilities is not None:
            self.disabilities = disabilities
        if economic_disadvantaged is not None:
            self.economic_disadvantaged = economic_disadvantaged
        self.electronic_mail_address = electronic_mail_address
        if first_generation_student is not None:
            self.first_generation_student = first_generation_student
        self.first_name = first_name
        if gender_descriptor is not None:
            self.gender_descriptor = gender_descriptor
        if generation_code_suffix is not None:
            self.generation_code_suffix = generation_code_suffix
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        self.last_surname = last_surname
        if maiden_name is not None:
            self.maiden_name = maiden_name
        if met is not None:
            self.met = met
        if middle_name is not None:
            self.middle_name = middle_name
        if notes is not None:
            self.notes = notes
        if personal_identification_documents is not None:
            self.personal_identification_documents = personal_identification_documents
        if personal_title_prefix is not None:
            self.personal_title_prefix = personal_title_prefix
        if pre_screening_rating is not None:
            self.pre_screening_rating = pre_screening_rating
        if prospect_type_descriptor is not None:
            self.prospect_type_descriptor = prospect_type_descriptor
        if qualifications is not None:
            self.qualifications = qualifications
        if races is not None:
            self.races = races
        if recruitment_events is not None:
            self.recruitment_events = recruitment_events
        if referral is not None:
            self.referral = referral
        if referred_by is not None:
            self.referred_by = referred_by
        if sex_descriptor is not None:
            self.sex_descriptor = sex_descriptor
        if social_media_network_name is not None:
            self.social_media_network_name = social_media_network_name
        if social_media_user_name is not None:
            self.social_media_user_name = social_media_user_name
        if telephones is not None:
            self.telephones = telephones
        if touchpoints is not None:
            self.touchpoints = touchpoints
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmProspect.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmProspect.

          # noqa: E501

        :param id: The id of this TpdmProspect.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def prospect_identifier(self):
        """Gets the prospect_identifier of this TpdmProspect.  # noqa: E501

        The identifier for the prospect.  # noqa: E501

        :return: The prospect_identifier of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._prospect_identifier

    @prospect_identifier.setter
    def prospect_identifier(self, prospect_identifier):
        """Sets the prospect_identifier of this TpdmProspect.

        The identifier for the prospect.  # noqa: E501

        :param prospect_identifier: The prospect_identifier of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and prospect_identifier is None:
            raise ValueError("Invalid value for `prospect_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prospect_identifier is not None and len(prospect_identifier) > 32):
            raise ValueError("Invalid value for `prospect_identifier`, length must be less than or equal to `32`")  # noqa: E501

        self._prospect_identifier = prospect_identifier

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmProspect.  # noqa: E501


        :return: The education_organization_reference of this TpdmProspect.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmProspect.


        :param education_organization_reference: The education_organization_reference of this TpdmProspect.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def person_reference(self):
        """Gets the person_reference of this TpdmProspect.  # noqa: E501


        :return: The person_reference of this TpdmProspect.  # noqa: E501
        :rtype: EdFiPersonReference
        """
        return self._person_reference

    @person_reference.setter
    def person_reference(self, person_reference):
        """Sets the person_reference of this TpdmProspect.


        :param person_reference: The person_reference of this TpdmProspect.  # noqa: E501
        :type: EdFiPersonReference
        """

        self._person_reference = person_reference

    @property
    def teacher_candidate_reference(self):
        """Gets the teacher_candidate_reference of this TpdmProspect.  # noqa: E501


        :return: The teacher_candidate_reference of this TpdmProspect.  # noqa: E501
        :rtype: TpdmTeacherCandidateReference
        """
        return self._teacher_candidate_reference

    @teacher_candidate_reference.setter
    def teacher_candidate_reference(self, teacher_candidate_reference):
        """Sets the teacher_candidate_reference of this TpdmProspect.


        :param teacher_candidate_reference: The teacher_candidate_reference of this TpdmProspect.  # noqa: E501
        :type: TpdmTeacherCandidateReference
        """

        self._teacher_candidate_reference = teacher_candidate_reference

    @property
    def aid(self):
        """Gets the aid of this TpdmProspect.  # noqa: E501


        :return: The aid of this TpdmProspect.  # noqa: E501
        :rtype: TpdmProspectAid
        """
        return self._aid

    @aid.setter
    def aid(self, aid):
        """Sets the aid of this TpdmProspect.


        :param aid: The aid of this TpdmProspect.  # noqa: E501
        :type: TpdmProspectAid
        """

        self._aid = aid

    @property
    def applied(self):
        """Gets the applied of this TpdmProspect.  # noqa: E501

        Indicator of whether the prospect applied for a position.  # noqa: E501

        :return: The applied of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._applied

    @applied.setter
    def applied(self, applied):
        """Sets the applied of this TpdmProspect.

        Indicator of whether the prospect applied for a position.  # noqa: E501

        :param applied: The applied of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._applied = applied

    @property
    def current_position(self):
        """Gets the current_position of this TpdmProspect.  # noqa: E501


        :return: The current_position of this TpdmProspect.  # noqa: E501
        :rtype: TpdmProspectCurrentPosition
        """
        return self._current_position

    @current_position.setter
    def current_position(self, current_position):
        """Sets the current_position of this TpdmProspect.


        :param current_position: The current_position of this TpdmProspect.  # noqa: E501
        :type: TpdmProspectCurrentPosition
        """

        self._current_position = current_position

    @property
    def disabilities(self):
        """Gets the disabilities of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectDisabilities. The disability condition(s) that best describes an individual's impairment.  # noqa: E501

        :return: The disabilities of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectDisability]
        """
        return self._disabilities

    @disabilities.setter
    def disabilities(self, disabilities):
        """Sets the disabilities of this TpdmProspect.

        An unordered collection of prospectDisabilities. The disability condition(s) that best describes an individual's impairment.  # noqa: E501

        :param disabilities: The disabilities of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectDisability]
        """

        self._disabilities = disabilities

    @property
    def economic_disadvantaged(self):
        """Gets the economic_disadvantaged of this TpdmProspect.  # noqa: E501

        An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.  # noqa: E501

        :return: The economic_disadvantaged of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._economic_disadvantaged

    @economic_disadvantaged.setter
    def economic_disadvantaged(self, economic_disadvantaged):
        """Sets the economic_disadvantaged of this TpdmProspect.

        An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.  # noqa: E501

        :param economic_disadvantaged: The economic_disadvantaged of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._economic_disadvantaged = economic_disadvantaged

    @property
    def electronic_mail_address(self):
        """Gets the electronic_mail_address of this TpdmProspect.  # noqa: E501

        The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :return: The electronic_mail_address of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._electronic_mail_address

    @electronic_mail_address.setter
    def electronic_mail_address(self, electronic_mail_address):
        """Sets the electronic_mail_address of this TpdmProspect.

        The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :param electronic_mail_address: The electronic_mail_address of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and electronic_mail_address is None:
            raise ValueError("Invalid value for `electronic_mail_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                electronic_mail_address is not None and len(electronic_mail_address) > 128):
            raise ValueError("Invalid value for `electronic_mail_address`, length must be less than or equal to `128`")  # noqa: E501

        self._electronic_mail_address = electronic_mail_address

    @property
    def first_generation_student(self):
        """Gets the first_generation_student of this TpdmProspect.  # noqa: E501

        Indicator of whether individual is a first generation college student.  # noqa: E501

        :return: The first_generation_student of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._first_generation_student

    @first_generation_student.setter
    def first_generation_student(self, first_generation_student):
        """Sets the first_generation_student of this TpdmProspect.

        Indicator of whether individual is a first generation college student.  # noqa: E501

        :param first_generation_student: The first_generation_student of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._first_generation_student = first_generation_student

    @property
    def first_name(self):
        """Gets the first_name of this TpdmProspect.  # noqa: E501

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :return: The first_name of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TpdmProspect.

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :param first_name: The first_name of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 75):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `75`")  # noqa: E501

        self._first_name = first_name

    @property
    def gender_descriptor(self):
        """Gets the gender_descriptor of this TpdmProspect.  # noqa: E501

        The gender with which a person associates.  # noqa: E501

        :return: The gender_descriptor of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._gender_descriptor

    @gender_descriptor.setter
    def gender_descriptor(self, gender_descriptor):
        """Sets the gender_descriptor of this TpdmProspect.

        The gender with which a person associates.  # noqa: E501

        :param gender_descriptor: The gender_descriptor of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gender_descriptor is not None and len(gender_descriptor) > 306):
            raise ValueError("Invalid value for `gender_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._gender_descriptor = gender_descriptor

    @property
    def generation_code_suffix(self):
        """Gets the generation_code_suffix of this TpdmProspect.  # noqa: E501

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :return: The generation_code_suffix of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._generation_code_suffix

    @generation_code_suffix.setter
    def generation_code_suffix(self, generation_code_suffix):
        """Sets the generation_code_suffix of this TpdmProspect.

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :param generation_code_suffix: The generation_code_suffix of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                generation_code_suffix is not None and len(generation_code_suffix) > 10):
            raise ValueError("Invalid value for `generation_code_suffix`, length must be less than or equal to `10`")  # noqa: E501

        self._generation_code_suffix = generation_code_suffix

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this TpdmProspect.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino\".  # noqa: E501

        :return: The hispanic_latino_ethnicity of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this TpdmProspect.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino\".  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def last_surname(self):
        """Gets the last_surname of this TpdmProspect.  # noqa: E501

        The name borne in common by members of a family.  # noqa: E501

        :return: The last_surname of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._last_surname

    @last_surname.setter
    def last_surname(self, last_surname):
        """Sets the last_surname of this TpdmProspect.

        The name borne in common by members of a family.  # noqa: E501

        :param last_surname: The last_surname of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_surname is None:
            raise ValueError("Invalid value for `last_surname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_surname is not None and len(last_surname) > 75):
            raise ValueError("Invalid value for `last_surname`, length must be less than or equal to `75`")  # noqa: E501

        self._last_surname = last_surname

    @property
    def maiden_name(self):
        """Gets the maiden_name of this TpdmProspect.  # noqa: E501

        The person's maiden name.  # noqa: E501

        :return: The maiden_name of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this TpdmProspect.

        The person's maiden name.  # noqa: E501

        :param maiden_name: The maiden_name of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                maiden_name is not None and len(maiden_name) > 75):
            raise ValueError("Invalid value for `maiden_name`, length must be less than or equal to `75`")  # noqa: E501

        self._maiden_name = maiden_name

    @property
    def met(self):
        """Gets the met of this TpdmProspect.  # noqa: E501

        Indicator whether the person was met by a representative of the education organization.  # noqa: E501

        :return: The met of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._met

    @met.setter
    def met(self, met):
        """Sets the met of this TpdmProspect.

        Indicator whether the person was met by a representative of the education organization.  # noqa: E501

        :param met: The met of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._met = met

    @property
    def middle_name(self):
        """Gets the middle_name of this TpdmProspect.  # noqa: E501

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :return: The middle_name of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this TpdmProspect.

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :param middle_name: The middle_name of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 75):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `75`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def notes(self):
        """Gets the notes of this TpdmProspect.  # noqa: E501

        Additional notes about the prospect.  # noqa: E501

        :return: The notes of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TpdmProspect.

        Additional notes about the prospect.  # noqa: E501

        :param notes: The notes of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                notes is not None and len(notes) > 255):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `255`")  # noqa: E501

        self._notes = notes

    @property
    def personal_identification_documents(self):
        """Gets the personal_identification_documents of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :return: The personal_identification_documents of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectPersonalIdentificationDocument]
        """
        return self._personal_identification_documents

    @personal_identification_documents.setter
    def personal_identification_documents(self, personal_identification_documents):
        """Sets the personal_identification_documents of this TpdmProspect.

        An unordered collection of prospectPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :param personal_identification_documents: The personal_identification_documents of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectPersonalIdentificationDocument]
        """

        self._personal_identification_documents = personal_identification_documents

    @property
    def personal_title_prefix(self):
        """Gets the personal_title_prefix of this TpdmProspect.  # noqa: E501

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :return: The personal_title_prefix of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._personal_title_prefix

    @personal_title_prefix.setter
    def personal_title_prefix(self, personal_title_prefix):
        """Sets the personal_title_prefix of this TpdmProspect.

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :param personal_title_prefix: The personal_title_prefix of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                personal_title_prefix is not None and len(personal_title_prefix) > 30):
            raise ValueError("Invalid value for `personal_title_prefix`, length must be less than or equal to `30`")  # noqa: E501

        self._personal_title_prefix = personal_title_prefix

    @property
    def pre_screening_rating(self):
        """Gets the pre_screening_rating of this TpdmProspect.  # noqa: E501

        The rating initially assigned to the prospect prior to an official screening.  # noqa: E501

        :return: The pre_screening_rating of this TpdmProspect.  # noqa: E501
        :rtype: int
        """
        return self._pre_screening_rating

    @pre_screening_rating.setter
    def pre_screening_rating(self, pre_screening_rating):
        """Sets the pre_screening_rating of this TpdmProspect.

        The rating initially assigned to the prospect prior to an official screening.  # noqa: E501

        :param pre_screening_rating: The pre_screening_rating of this TpdmProspect.  # noqa: E501
        :type: int
        """

        self._pre_screening_rating = pre_screening_rating

    @property
    def prospect_type_descriptor(self):
        """Gets the prospect_type_descriptor of this TpdmProspect.  # noqa: E501

        Reflects the type of prospect, such as TPP Applicant, Hire, or Mentor Teacher.  # noqa: E501

        :return: The prospect_type_descriptor of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._prospect_type_descriptor

    @prospect_type_descriptor.setter
    def prospect_type_descriptor(self, prospect_type_descriptor):
        """Sets the prospect_type_descriptor of this TpdmProspect.

        Reflects the type of prospect, such as TPP Applicant, Hire, or Mentor Teacher.  # noqa: E501

        :param prospect_type_descriptor: The prospect_type_descriptor of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                prospect_type_descriptor is not None and len(prospect_type_descriptor) > 306):
            raise ValueError("Invalid value for `prospect_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._prospect_type_descriptor = prospect_type_descriptor

    @property
    def qualifications(self):
        """Gets the qualifications of this TpdmProspect.  # noqa: E501


        :return: The qualifications of this TpdmProspect.  # noqa: E501
        :rtype: TpdmProspectQualifications
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """Sets the qualifications of this TpdmProspect.


        :param qualifications: The qualifications of this TpdmProspect.  # noqa: E501
        :type: TpdmProspectQualifications
        """

        self._qualifications = qualifications

    @property
    def races(self):
        """Gets the races of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :return: The races of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this TpdmProspect.

        An unordered collection of prospectRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :param races: The races of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectRace]
        """

        self._races = races

    @property
    def recruitment_events(self):
        """Gets the recruitment_events of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectRecruitmentEvents. Reference(s) to events associated with the recruitment process.  # noqa: E501

        :return: The recruitment_events of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectRecruitmentEvent]
        """
        return self._recruitment_events

    @recruitment_events.setter
    def recruitment_events(self, recruitment_events):
        """Sets the recruitment_events of this TpdmProspect.

        An unordered collection of prospectRecruitmentEvents. Reference(s) to events associated with the recruitment process.  # noqa: E501

        :param recruitment_events: The recruitment_events of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectRecruitmentEvent]
        """

        self._recruitment_events = recruitment_events

    @property
    def referral(self):
        """Gets the referral of this TpdmProspect.  # noqa: E501

        Indicator of whether the prospect was a referral.  # noqa: E501

        :return: The referral of this TpdmProspect.  # noqa: E501
        :rtype: bool
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this TpdmProspect.

        Indicator of whether the prospect was a referral.  # noqa: E501

        :param referral: The referral of this TpdmProspect.  # noqa: E501
        :type: bool
        """

        self._referral = referral

    @property
    def referred_by(self):
        """Gets the referred_by of this TpdmProspect.  # noqa: E501

        The person making the referral.  # noqa: E501

        :return: The referred_by of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._referred_by

    @referred_by.setter
    def referred_by(self, referred_by):
        """Sets the referred_by of this TpdmProspect.

        The person making the referral.  # noqa: E501

        :param referred_by: The referred_by of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                referred_by is not None and len(referred_by) > 50):
            raise ValueError("Invalid value for `referred_by`, length must be less than or equal to `50`")  # noqa: E501

        self._referred_by = referred_by

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this TpdmProspect.  # noqa: E501

        A person's gender.  # noqa: E501

        :return: The sex_descriptor of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this TpdmProspect.

        A person's gender.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def social_media_network_name(self):
        """Gets the social_media_network_name of this TpdmProspect.  # noqa: E501

        The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.  # noqa: E501

        :return: The social_media_network_name of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._social_media_network_name

    @social_media_network_name.setter
    def social_media_network_name(self, social_media_network_name):
        """Sets the social_media_network_name of this TpdmProspect.

        The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.  # noqa: E501

        :param social_media_network_name: The social_media_network_name of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                social_media_network_name is not None and len(social_media_network_name) > 50):
            raise ValueError("Invalid value for `social_media_network_name`, length must be less than or equal to `50`")  # noqa: E501

        self._social_media_network_name = social_media_network_name

    @property
    def social_media_user_name(self):
        """Gets the social_media_user_name of this TpdmProspect.  # noqa: E501

        The user name of the person on social media.  # noqa: E501

        :return: The social_media_user_name of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._social_media_user_name

    @social_media_user_name.setter
    def social_media_user_name(self, social_media_user_name):
        """Sets the social_media_user_name of this TpdmProspect.

        The user name of the person on social media.  # noqa: E501

        :param social_media_user_name: The social_media_user_name of this TpdmProspect.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                social_media_user_name is not None and len(social_media_user_name) > 50):
            raise ValueError("Invalid value for `social_media_user_name`, length must be less than or equal to `50`")  # noqa: E501

        self._social_media_user_name = social_media_user_name

    @property
    def telephones(self):
        """Gets the telephones of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :return: The telephones of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectTelephone]
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this TpdmProspect.

        An unordered collection of prospectTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :param telephones: The telephones of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectTelephone]
        """

        self._telephones = telephones

    @property
    def touchpoints(self):
        """Gets the touchpoints of this TpdmProspect.  # noqa: E501

        An unordered collection of prospectTouchpoints. Content associated with different touchpoints with the prospect.  # noqa: E501

        :return: The touchpoints of this TpdmProspect.  # noqa: E501
        :rtype: list[TpdmProspectTouchpoint]
        """
        return self._touchpoints

    @touchpoints.setter
    def touchpoints(self, touchpoints):
        """Sets the touchpoints of this TpdmProspect.

        An unordered collection of prospectTouchpoints. Content associated with different touchpoints with the prospect.  # noqa: E501

        :param touchpoints: The touchpoints of this TpdmProspect.  # noqa: E501
        :type: list[TpdmProspectTouchpoint]
        """

        self._touchpoints = touchpoints

    @property
    def etag(self):
        """Gets the etag of this TpdmProspect.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmProspect.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmProspect.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmProspect.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmProspect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmProspect):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmProspect):
            return True

        return self.to_dict() != other.to_dict()
