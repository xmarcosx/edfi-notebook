# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentSectionAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'begin_date': 'date',
        'section_reference': 'EdFiSectionReference',
        'student_reference': 'EdFiStudentReference',
        'attempt_status_descriptor': 'str',
        'end_date': 'date',
        'homeroom_indicator': 'bool',
        'repeat_identifier_descriptor': 'str',
        'teacher_student_data_link_exclusion': 'bool',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'begin_date': 'beginDate',
        'section_reference': 'sectionReference',
        'student_reference': 'studentReference',
        'attempt_status_descriptor': 'attemptStatusDescriptor',
        'end_date': 'endDate',
        'homeroom_indicator': 'homeroomIndicator',
        'repeat_identifier_descriptor': 'repeatIdentifierDescriptor',
        'teacher_student_data_link_exclusion': 'teacherStudentDataLinkExclusion',
        'etag': '_etag'
    }

    def __init__(self, id=None, begin_date=None, section_reference=None, student_reference=None, attempt_status_descriptor=None, end_date=None, homeroom_indicator=None, repeat_identifier_descriptor=None, teacher_student_data_link_exclusion=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentSectionAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._begin_date = None
        self._section_reference = None
        self._student_reference = None
        self._attempt_status_descriptor = None
        self._end_date = None
        self._homeroom_indicator = None
        self._repeat_identifier_descriptor = None
        self._teacher_student_data_link_exclusion = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.begin_date = begin_date
        self.section_reference = section_reference
        self.student_reference = student_reference
        if attempt_status_descriptor is not None:
            self.attempt_status_descriptor = attempt_status_descriptor
        if end_date is not None:
            self.end_date = end_date
        if homeroom_indicator is not None:
            self.homeroom_indicator = homeroom_indicator
        if repeat_identifier_descriptor is not None:
            self.repeat_identifier_descriptor = repeat_identifier_descriptor
        if teacher_student_data_link_exclusion is not None:
            self.teacher_student_data_link_exclusion = teacher_student_data_link_exclusion
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentSectionAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentSectionAssociation.

          # noqa: E501

        :param id: The id of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def begin_date(self):
        """Gets the begin_date of this EdFiStudentSectionAssociation.  # noqa: E501

        Month, day, and year of the Student's entry or assignment to the Section.  # noqa: E501

        :return: The begin_date of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EdFiStudentSectionAssociation.

        Month, day, and year of the Student's entry or assignment to the Section.  # noqa: E501

        :param begin_date: The begin_date of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def section_reference(self):
        """Gets the section_reference of this EdFiStudentSectionAssociation.  # noqa: E501


        :return: The section_reference of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: EdFiSectionReference
        """
        return self._section_reference

    @section_reference.setter
    def section_reference(self, section_reference):
        """Sets the section_reference of this EdFiStudentSectionAssociation.


        :param section_reference: The section_reference of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: EdFiSectionReference
        """
        if self._configuration.client_side_validation and section_reference is None:
            raise ValueError("Invalid value for `section_reference`, must not be `None`")  # noqa: E501

        self._section_reference = section_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentSectionAssociation.  # noqa: E501


        :return: The student_reference of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentSectionAssociation.


        :param student_reference: The student_reference of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def attempt_status_descriptor(self):
        """Gets the attempt_status_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501

        An indication of the student's completion status for the section.  # noqa: E501

        :return: The attempt_status_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: str
        """
        return self._attempt_status_descriptor

    @attempt_status_descriptor.setter
    def attempt_status_descriptor(self, attempt_status_descriptor):
        """Sets the attempt_status_descriptor of this EdFiStudentSectionAssociation.

        An indication of the student's completion status for the section.  # noqa: E501

        :param attempt_status_descriptor: The attempt_status_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                attempt_status_descriptor is not None and len(attempt_status_descriptor) > 306):
            raise ValueError("Invalid value for `attempt_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._attempt_status_descriptor = attempt_status_descriptor

    @property
    def end_date(self):
        """Gets the end_date of this EdFiStudentSectionAssociation.  # noqa: E501

        Month, day, and year of the withdrawal or exit of the Student from the Section.  # noqa: E501

        :return: The end_date of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EdFiStudentSectionAssociation.

        Month, day, and year of the withdrawal or exit of the Student from the Section.  # noqa: E501

        :param end_date: The end_date of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def homeroom_indicator(self):
        """Gets the homeroom_indicator of this EdFiStudentSectionAssociation.  # noqa: E501

        Indicates the Section is the student's homeroom. Homeroom period may the convention for taking daily attendance.  # noqa: E501

        :return: The homeroom_indicator of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._homeroom_indicator

    @homeroom_indicator.setter
    def homeroom_indicator(self, homeroom_indicator):
        """Sets the homeroom_indicator of this EdFiStudentSectionAssociation.

        Indicates the Section is the student's homeroom. Homeroom period may the convention for taking daily attendance.  # noqa: E501

        :param homeroom_indicator: The homeroom_indicator of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: bool
        """

        self._homeroom_indicator = homeroom_indicator

    @property
    def repeat_identifier_descriptor(self):
        """Gets the repeat_identifier_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501

        An indication as to whether a student has previously taken a given course.        Repeated, counted in grade point average        Repeated, not counted in grade point average        Not repeated        Other.  # noqa: E501

        :return: The repeat_identifier_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: str
        """
        return self._repeat_identifier_descriptor

    @repeat_identifier_descriptor.setter
    def repeat_identifier_descriptor(self, repeat_identifier_descriptor):
        """Sets the repeat_identifier_descriptor of this EdFiStudentSectionAssociation.

        An indication as to whether a student has previously taken a given course.        Repeated, counted in grade point average        Repeated, not counted in grade point average        Not repeated        Other.  # noqa: E501

        :param repeat_identifier_descriptor: The repeat_identifier_descriptor of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                repeat_identifier_descriptor is not None and len(repeat_identifier_descriptor) > 306):
            raise ValueError("Invalid value for `repeat_identifier_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._repeat_identifier_descriptor = repeat_identifier_descriptor

    @property
    def teacher_student_data_link_exclusion(self):
        """Gets the teacher_student_data_link_exclusion of this EdFiStudentSectionAssociation.  # noqa: E501

        Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.  # noqa: E501

        :return: The teacher_student_data_link_exclusion of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._teacher_student_data_link_exclusion

    @teacher_student_data_link_exclusion.setter
    def teacher_student_data_link_exclusion(self, teacher_student_data_link_exclusion):
        """Sets the teacher_student_data_link_exclusion of this EdFiStudentSectionAssociation.

        Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.  # noqa: E501

        :param teacher_student_data_link_exclusion: The teacher_student_data_link_exclusion of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: bool
        """

        self._teacher_student_data_link_exclusion = teacher_student_data_link_exclusion

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentSectionAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentSectionAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentSectionAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentSectionAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentSectionAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentSectionAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentSectionAssociation):
            return True

        return self.to_dict() != other.to_dict()
