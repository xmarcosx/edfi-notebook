# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentLearningObjective(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'grading_period_reference': 'EdFiGradingPeriodReference',
        'learning_objective_reference': 'EdFiLearningObjectiveReference',
        'student_reference': 'EdFiStudentReference',
        'competency_level_descriptor': 'str',
        'diagnostic_statement': 'str',
        'general_student_program_associations': 'list[EdFiStudentLearningObjectiveGeneralStudentProgramAssociation]',
        'student_section_associations': 'list[EdFiStudentLearningObjectiveStudentSectionAssociation]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'grading_period_reference': 'gradingPeriodReference',
        'learning_objective_reference': 'learningObjectiveReference',
        'student_reference': 'studentReference',
        'competency_level_descriptor': 'competencyLevelDescriptor',
        'diagnostic_statement': 'diagnosticStatement',
        'general_student_program_associations': 'generalStudentProgramAssociations',
        'student_section_associations': 'studentSectionAssociations',
        'etag': '_etag'
    }

    def __init__(self, id=None, grading_period_reference=None, learning_objective_reference=None, student_reference=None, competency_level_descriptor=None, diagnostic_statement=None, general_student_program_associations=None, student_section_associations=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentLearningObjective - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._grading_period_reference = None
        self._learning_objective_reference = None
        self._student_reference = None
        self._competency_level_descriptor = None
        self._diagnostic_statement = None
        self._general_student_program_associations = None
        self._student_section_associations = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.grading_period_reference = grading_period_reference
        self.learning_objective_reference = learning_objective_reference
        self.student_reference = student_reference
        self.competency_level_descriptor = competency_level_descriptor
        if diagnostic_statement is not None:
            self.diagnostic_statement = diagnostic_statement
        if general_student_program_associations is not None:
            self.general_student_program_associations = general_student_program_associations
        if student_section_associations is not None:
            self.student_section_associations = student_section_associations
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentLearningObjective.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentLearningObjective.

          # noqa: E501

        :param id: The id of this EdFiStudentLearningObjective.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def grading_period_reference(self):
        """Gets the grading_period_reference of this EdFiStudentLearningObjective.  # noqa: E501


        :return: The grading_period_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: EdFiGradingPeriodReference
        """
        return self._grading_period_reference

    @grading_period_reference.setter
    def grading_period_reference(self, grading_period_reference):
        """Sets the grading_period_reference of this EdFiStudentLearningObjective.


        :param grading_period_reference: The grading_period_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :type: EdFiGradingPeriodReference
        """
        if self._configuration.client_side_validation and grading_period_reference is None:
            raise ValueError("Invalid value for `grading_period_reference`, must not be `None`")  # noqa: E501

        self._grading_period_reference = grading_period_reference

    @property
    def learning_objective_reference(self):
        """Gets the learning_objective_reference of this EdFiStudentLearningObjective.  # noqa: E501


        :return: The learning_objective_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: EdFiLearningObjectiveReference
        """
        return self._learning_objective_reference

    @learning_objective_reference.setter
    def learning_objective_reference(self, learning_objective_reference):
        """Sets the learning_objective_reference of this EdFiStudentLearningObjective.


        :param learning_objective_reference: The learning_objective_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :type: EdFiLearningObjectiveReference
        """
        if self._configuration.client_side_validation and learning_objective_reference is None:
            raise ValueError("Invalid value for `learning_objective_reference`, must not be `None`")  # noqa: E501

        self._learning_objective_reference = learning_objective_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentLearningObjective.  # noqa: E501


        :return: The student_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentLearningObjective.


        :param student_reference: The student_reference of this EdFiStudentLearningObjective.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def competency_level_descriptor(self):
        """Gets the competency_level_descriptor of this EdFiStudentLearningObjective.  # noqa: E501

        The CompetencyLevel assessed for the student for the referenced LearningObjective.  # noqa: E501

        :return: The competency_level_descriptor of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._competency_level_descriptor

    @competency_level_descriptor.setter
    def competency_level_descriptor(self, competency_level_descriptor):
        """Sets the competency_level_descriptor of this EdFiStudentLearningObjective.

        The CompetencyLevel assessed for the student for the referenced LearningObjective.  # noqa: E501

        :param competency_level_descriptor: The competency_level_descriptor of this EdFiStudentLearningObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and competency_level_descriptor is None:
            raise ValueError("Invalid value for `competency_level_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                competency_level_descriptor is not None and len(competency_level_descriptor) > 306):
            raise ValueError("Invalid value for `competency_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._competency_level_descriptor = competency_level_descriptor

    @property
    def diagnostic_statement(self):
        """Gets the diagnostic_statement of this EdFiStudentLearningObjective.  # noqa: E501

        A statement provided by the teacher that provides information in addition to the grade or assessment score.  # noqa: E501

        :return: The diagnostic_statement of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._diagnostic_statement

    @diagnostic_statement.setter
    def diagnostic_statement(self, diagnostic_statement):
        """Sets the diagnostic_statement of this EdFiStudentLearningObjective.

        A statement provided by the teacher that provides information in addition to the grade or assessment score.  # noqa: E501

        :param diagnostic_statement: The diagnostic_statement of this EdFiStudentLearningObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                diagnostic_statement is not None and len(diagnostic_statement) > 1024):
            raise ValueError("Invalid value for `diagnostic_statement`, length must be less than or equal to `1024`")  # noqa: E501

        self._diagnostic_statement = diagnostic_statement

    @property
    def general_student_program_associations(self):
        """Gets the general_student_program_associations of this EdFiStudentLearningObjective.  # noqa: E501

        An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.  # noqa: E501

        :return: The general_student_program_associations of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: list[EdFiStudentLearningObjectiveGeneralStudentProgramAssociation]
        """
        return self._general_student_program_associations

    @general_student_program_associations.setter
    def general_student_program_associations(self, general_student_program_associations):
        """Sets the general_student_program_associations of this EdFiStudentLearningObjective.

        An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.  # noqa: E501

        :param general_student_program_associations: The general_student_program_associations of this EdFiStudentLearningObjective.  # noqa: E501
        :type: list[EdFiStudentLearningObjectiveGeneralStudentProgramAssociation]
        """

        self._general_student_program_associations = general_student_program_associations

    @property
    def student_section_associations(self):
        """Gets the student_section_associations of this EdFiStudentLearningObjective.  # noqa: E501

        An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.  # noqa: E501

        :return: The student_section_associations of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: list[EdFiStudentLearningObjectiveStudentSectionAssociation]
        """
        return self._student_section_associations

    @student_section_associations.setter
    def student_section_associations(self, student_section_associations):
        """Sets the student_section_associations of this EdFiStudentLearningObjective.

        An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.  # noqa: E501

        :param student_section_associations: The student_section_associations of this EdFiStudentLearningObjective.  # noqa: E501
        :type: list[EdFiStudentLearningObjectiveStudentSectionAssociation]
        """

        self._student_section_associations = student_section_associations

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentLearningObjective.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentLearningObjective.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentLearningObjective.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentLearningObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentLearningObjective):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentLearningObjective):
            return True

        return self.to_dict() != other.to_dict()
