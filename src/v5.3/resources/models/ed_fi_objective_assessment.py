# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiObjectiveAssessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'identification_code': 'str',
        'assessment_reference': 'EdFiAssessmentReference',
        'parent_objective_assessment_reference': 'EdFiObjectiveAssessmentReference',
        'academic_subject_descriptor': 'str',
        'assessment_items': 'list[EdFiObjectiveAssessmentAssessmentItem]',
        'description': 'str',
        'learning_objectives': 'list[EdFiObjectiveAssessmentLearningObjective]',
        'learning_standards': 'list[EdFiObjectiveAssessmentLearningStandard]',
        'max_raw_score': 'float',
        'nomenclature': 'str',
        'percent_of_assessment': 'float',
        'performance_levels': 'list[EdFiObjectiveAssessmentPerformanceLevel]',
        'scores': 'list[EdFiObjectiveAssessmentScore]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identification_code': 'identificationCode',
        'assessment_reference': 'assessmentReference',
        'parent_objective_assessment_reference': 'parentObjectiveAssessmentReference',
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'assessment_items': 'assessmentItems',
        'description': 'description',
        'learning_objectives': 'learningObjectives',
        'learning_standards': 'learningStandards',
        'max_raw_score': 'maxRawScore',
        'nomenclature': 'nomenclature',
        'percent_of_assessment': 'percentOfAssessment',
        'performance_levels': 'performanceLevels',
        'scores': 'scores',
        'etag': '_etag'
    }

    def __init__(self, id=None, identification_code=None, assessment_reference=None, parent_objective_assessment_reference=None, academic_subject_descriptor=None, assessment_items=None, description=None, learning_objectives=None, learning_standards=None, max_raw_score=None, nomenclature=None, percent_of_assessment=None, performance_levels=None, scores=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiObjectiveAssessment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._identification_code = None
        self._assessment_reference = None
        self._parent_objective_assessment_reference = None
        self._academic_subject_descriptor = None
        self._assessment_items = None
        self._description = None
        self._learning_objectives = None
        self._learning_standards = None
        self._max_raw_score = None
        self._nomenclature = None
        self._percent_of_assessment = None
        self._performance_levels = None
        self._scores = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.identification_code = identification_code
        self.assessment_reference = assessment_reference
        if parent_objective_assessment_reference is not None:
            self.parent_objective_assessment_reference = parent_objective_assessment_reference
        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        if assessment_items is not None:
            self.assessment_items = assessment_items
        if description is not None:
            self.description = description
        if learning_objectives is not None:
            self.learning_objectives = learning_objectives
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if max_raw_score is not None:
            self.max_raw_score = max_raw_score
        if nomenclature is not None:
            self.nomenclature = nomenclature
        if percent_of_assessment is not None:
            self.percent_of_assessment = percent_of_assessment
        if performance_levels is not None:
            self.performance_levels = performance_levels
        if scores is not None:
            self.scores = scores
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiObjectiveAssessment.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiObjectiveAssessment.

          # noqa: E501

        :param id: The id of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def identification_code(self):
        """Gets the identification_code of this EdFiObjectiveAssessment.  # noqa: E501

        A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The identification_code of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._identification_code

    @identification_code.setter
    def identification_code(self, identification_code):
        """Sets the identification_code of this EdFiObjectiveAssessment.

        A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param identification_code: The identification_code of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identification_code is None:
            raise ValueError("Invalid value for `identification_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identification_code is not None and len(identification_code) > 60):
            raise ValueError("Invalid value for `identification_code`, length must be less than or equal to `60`")  # noqa: E501

        self._identification_code = identification_code

    @property
    def assessment_reference(self):
        """Gets the assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501


        :return: The assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: EdFiAssessmentReference
        """
        return self._assessment_reference

    @assessment_reference.setter
    def assessment_reference(self, assessment_reference):
        """Sets the assessment_reference of this EdFiObjectiveAssessment.


        :param assessment_reference: The assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501
        :type: EdFiAssessmentReference
        """
        if self._configuration.client_side_validation and assessment_reference is None:
            raise ValueError("Invalid value for `assessment_reference`, must not be `None`")  # noqa: E501

        self._assessment_reference = assessment_reference

    @property
    def parent_objective_assessment_reference(self):
        """Gets the parent_objective_assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501


        :return: The parent_objective_assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: EdFiObjectiveAssessmentReference
        """
        return self._parent_objective_assessment_reference

    @parent_objective_assessment_reference.setter
    def parent_objective_assessment_reference(self, parent_objective_assessment_reference):
        """Sets the parent_objective_assessment_reference of this EdFiObjectiveAssessment.


        :param parent_objective_assessment_reference: The parent_objective_assessment_reference of this EdFiObjectiveAssessment.  # noqa: E501
        :type: EdFiObjectiveAssessmentReference
        """

        self._parent_objective_assessment_reference = parent_objective_assessment_reference

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this EdFiObjectiveAssessment.  # noqa: E501

        The subject area of the objective assessment.  # noqa: E501

        :return: The academic_subject_descriptor of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this EdFiObjectiveAssessment.

        The subject area of the objective assessment.  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306):
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def assessment_items(self):
        """Gets the assessment_items of this EdFiObjectiveAssessment.  # noqa: E501

        An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.  # noqa: E501

        :return: The assessment_items of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: list[EdFiObjectiveAssessmentAssessmentItem]
        """
        return self._assessment_items

    @assessment_items.setter
    def assessment_items(self, assessment_items):
        """Sets the assessment_items of this EdFiObjectiveAssessment.

        An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.  # noqa: E501

        :param assessment_items: The assessment_items of this EdFiObjectiveAssessment.  # noqa: E501
        :type: list[EdFiObjectiveAssessmentAssessmentItem]
        """

        self._assessment_items = assessment_items

    @property
    def description(self):
        """Gets the description of this EdFiObjectiveAssessment.  # noqa: E501

        The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).  # noqa: E501

        :return: The description of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdFiObjectiveAssessment.

        The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).  # noqa: E501

        :param description: The description of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def learning_objectives(self):
        """Gets the learning_objectives of this EdFiObjectiveAssessment.  # noqa: E501

        An unordered collection of objectiveAssessmentLearningObjectives. References the LearningObjective(s) the ObjectiveAssessment tests.  # noqa: E501

        :return: The learning_objectives of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: list[EdFiObjectiveAssessmentLearningObjective]
        """
        return self._learning_objectives

    @learning_objectives.setter
    def learning_objectives(self, learning_objectives):
        """Sets the learning_objectives of this EdFiObjectiveAssessment.

        An unordered collection of objectiveAssessmentLearningObjectives. References the LearningObjective(s) the ObjectiveAssessment tests.  # noqa: E501

        :param learning_objectives: The learning_objectives of this EdFiObjectiveAssessment.  # noqa: E501
        :type: list[EdFiObjectiveAssessmentLearningObjective]
        """

        self._learning_objectives = learning_objectives

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiObjectiveAssessment.  # noqa: E501

        An unordered collection of objectiveAssessmentLearningStandards. LearningStandard tested by this ObjectiveAssessment.  # noqa: E501

        :return: The learning_standards of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: list[EdFiObjectiveAssessmentLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiObjectiveAssessment.

        An unordered collection of objectiveAssessmentLearningStandards. LearningStandard tested by this ObjectiveAssessment.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiObjectiveAssessment.  # noqa: E501
        :type: list[EdFiObjectiveAssessmentLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def max_raw_score(self):
        """Gets the max_raw_score of this EdFiObjectiveAssessment.  # noqa: E501

        The maximum raw score achievable across all assessment items that are correct and scored at the maximum.  # noqa: E501

        :return: The max_raw_score of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: float
        """
        return self._max_raw_score

    @max_raw_score.setter
    def max_raw_score(self, max_raw_score):
        """Sets the max_raw_score of this EdFiObjectiveAssessment.

        The maximum raw score achievable across all assessment items that are correct and scored at the maximum.  # noqa: E501

        :param max_raw_score: The max_raw_score of this EdFiObjectiveAssessment.  # noqa: E501
        :type: float
        """

        self._max_raw_score = max_raw_score

    @property
    def nomenclature(self):
        """Gets the nomenclature of this EdFiObjectiveAssessment.  # noqa: E501

        Reflects the specific nomenclature used for this level of ObjectiveAssessment.  # noqa: E501

        :return: The nomenclature of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._nomenclature

    @nomenclature.setter
    def nomenclature(self, nomenclature):
        """Sets the nomenclature of this EdFiObjectiveAssessment.

        Reflects the specific nomenclature used for this level of ObjectiveAssessment.  # noqa: E501

        :param nomenclature: The nomenclature of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nomenclature is not None and len(nomenclature) > 35):
            raise ValueError("Invalid value for `nomenclature`, length must be less than or equal to `35`")  # noqa: E501

        self._nomenclature = nomenclature

    @property
    def percent_of_assessment(self):
        """Gets the percent_of_assessment of this EdFiObjectiveAssessment.  # noqa: E501

        The percentage of the Assessment that tests this objective.  # noqa: E501

        :return: The percent_of_assessment of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: float
        """
        return self._percent_of_assessment

    @percent_of_assessment.setter
    def percent_of_assessment(self, percent_of_assessment):
        """Sets the percent_of_assessment of this EdFiObjectiveAssessment.

        The percentage of the Assessment that tests this objective.  # noqa: E501

        :param percent_of_assessment: The percent_of_assessment of this EdFiObjectiveAssessment.  # noqa: E501
        :type: float
        """

        self._percent_of_assessment = percent_of_assessment

    @property
    def performance_levels(self):
        """Gets the performance_levels of this EdFiObjectiveAssessment.  # noqa: E501

        An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:        1. Specification of performance level by minimum and maximum score        2. Specification of performance level by cut score, using only minimum score        3. Specification of performance level without any mapping to scores  # noqa: E501

        :return: The performance_levels of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: list[EdFiObjectiveAssessmentPerformanceLevel]
        """
        return self._performance_levels

    @performance_levels.setter
    def performance_levels(self, performance_levels):
        """Sets the performance_levels of this EdFiObjectiveAssessment.

        An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:        1. Specification of performance level by minimum and maximum score        2. Specification of performance level by cut score, using only minimum score        3. Specification of performance level without any mapping to scores  # noqa: E501

        :param performance_levels: The performance_levels of this EdFiObjectiveAssessment.  # noqa: E501
        :type: list[EdFiObjectiveAssessmentPerformanceLevel]
        """

        self._performance_levels = performance_levels

    @property
    def scores(self):
        """Gets the scores of this EdFiObjectiveAssessment.  # noqa: E501

        An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.  # noqa: E501

        :return: The scores of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: list[EdFiObjectiveAssessmentScore]
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this EdFiObjectiveAssessment.

        An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.  # noqa: E501

        :param scores: The scores of this EdFiObjectiveAssessment.  # noqa: E501
        :type: list[EdFiObjectiveAssessmentScore]
        """

        self._scores = scores

    @property
    def etag(self):
        """Gets the etag of this EdFiObjectiveAssessment.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiObjectiveAssessment.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiObjectiveAssessment.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiObjectiveAssessment.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiObjectiveAssessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiObjectiveAssessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiObjectiveAssessment):
            return True

        return self.to_dict() != other.to_dict()
