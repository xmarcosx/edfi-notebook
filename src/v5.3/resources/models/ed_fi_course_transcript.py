# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCourseTranscript(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'course_attempt_result_descriptor': 'str',
        'course_reference': 'EdFiCourseReference',
        'external_education_organization_reference': 'EdFiEducationOrganizationReference',
        'student_academic_record_reference': 'EdFiStudentAcademicRecordReference',
        'academic_subjects': 'list[EdFiCourseTranscriptAcademicSubject]',
        'alternative_course_code': 'str',
        'alternative_course_identification_codes': 'list[EdFiCourseTranscriptAlternativeCourseIdentificationCode]',
        'alternative_course_title': 'str',
        'assigning_organization_identification_code': 'str',
        'attempted_credit_conversion': 'float',
        'attempted_credits': 'float',
        'attempted_credit_type_descriptor': 'str',
        'course_catalog_url': 'str',
        'course_repeat_code_descriptor': 'str',
        'course_title': 'str',
        'credit_categories': 'list[EdFiCourseTranscriptCreditCategory]',
        'earned_additional_credits': 'list[EdFiCourseTranscriptEarnedAdditionalCredits]',
        'earned_credit_conversion': 'float',
        'earned_credits': 'float',
        'earned_credit_type_descriptor': 'str',
        'external_education_organization_name_of_institution': 'str',
        'final_letter_grade_earned': 'str',
        'final_numeric_grade_earned': 'float',
        'method_credit_earned_descriptor': 'str',
        'partial_course_transcript_awards': 'list[EdFiCourseTranscriptPartialCourseTranscriptAwards]',
        'when_taken_grade_level_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'course_attempt_result_descriptor': 'courseAttemptResultDescriptor',
        'course_reference': 'courseReference',
        'external_education_organization_reference': 'externalEducationOrganizationReference',
        'student_academic_record_reference': 'studentAcademicRecordReference',
        'academic_subjects': 'academicSubjects',
        'alternative_course_code': 'alternativeCourseCode',
        'alternative_course_identification_codes': 'alternativeCourseIdentificationCodes',
        'alternative_course_title': 'alternativeCourseTitle',
        'assigning_organization_identification_code': 'assigningOrganizationIdentificationCode',
        'attempted_credit_conversion': 'attemptedCreditConversion',
        'attempted_credits': 'attemptedCredits',
        'attempted_credit_type_descriptor': 'attemptedCreditTypeDescriptor',
        'course_catalog_url': 'courseCatalogURL',
        'course_repeat_code_descriptor': 'courseRepeatCodeDescriptor',
        'course_title': 'courseTitle',
        'credit_categories': 'creditCategories',
        'earned_additional_credits': 'earnedAdditionalCredits',
        'earned_credit_conversion': 'earnedCreditConversion',
        'earned_credits': 'earnedCredits',
        'earned_credit_type_descriptor': 'earnedCreditTypeDescriptor',
        'external_education_organization_name_of_institution': 'externalEducationOrganizationNameOfInstitution',
        'final_letter_grade_earned': 'finalLetterGradeEarned',
        'final_numeric_grade_earned': 'finalNumericGradeEarned',
        'method_credit_earned_descriptor': 'methodCreditEarnedDescriptor',
        'partial_course_transcript_awards': 'partialCourseTranscriptAwards',
        'when_taken_grade_level_descriptor': 'whenTakenGradeLevelDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, course_attempt_result_descriptor=None, course_reference=None, external_education_organization_reference=None, student_academic_record_reference=None, academic_subjects=None, alternative_course_code=None, alternative_course_identification_codes=None, alternative_course_title=None, assigning_organization_identification_code=None, attempted_credit_conversion=None, attempted_credits=None, attempted_credit_type_descriptor=None, course_catalog_url=None, course_repeat_code_descriptor=None, course_title=None, credit_categories=None, earned_additional_credits=None, earned_credit_conversion=None, earned_credits=None, earned_credit_type_descriptor=None, external_education_organization_name_of_institution=None, final_letter_grade_earned=None, final_numeric_grade_earned=None, method_credit_earned_descriptor=None, partial_course_transcript_awards=None, when_taken_grade_level_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCourseTranscript - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._course_attempt_result_descriptor = None
        self._course_reference = None
        self._external_education_organization_reference = None
        self._student_academic_record_reference = None
        self._academic_subjects = None
        self._alternative_course_code = None
        self._alternative_course_identification_codes = None
        self._alternative_course_title = None
        self._assigning_organization_identification_code = None
        self._attempted_credit_conversion = None
        self._attempted_credits = None
        self._attempted_credit_type_descriptor = None
        self._course_catalog_url = None
        self._course_repeat_code_descriptor = None
        self._course_title = None
        self._credit_categories = None
        self._earned_additional_credits = None
        self._earned_credit_conversion = None
        self._earned_credits = None
        self._earned_credit_type_descriptor = None
        self._external_education_organization_name_of_institution = None
        self._final_letter_grade_earned = None
        self._final_numeric_grade_earned = None
        self._method_credit_earned_descriptor = None
        self._partial_course_transcript_awards = None
        self._when_taken_grade_level_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.course_attempt_result_descriptor = course_attempt_result_descriptor
        self.course_reference = course_reference
        if external_education_organization_reference is not None:
            self.external_education_organization_reference = external_education_organization_reference
        self.student_academic_record_reference = student_academic_record_reference
        if academic_subjects is not None:
            self.academic_subjects = academic_subjects
        if alternative_course_code is not None:
            self.alternative_course_code = alternative_course_code
        if alternative_course_identification_codes is not None:
            self.alternative_course_identification_codes = alternative_course_identification_codes
        if alternative_course_title is not None:
            self.alternative_course_title = alternative_course_title
        if assigning_organization_identification_code is not None:
            self.assigning_organization_identification_code = assigning_organization_identification_code
        if attempted_credit_conversion is not None:
            self.attempted_credit_conversion = attempted_credit_conversion
        if attempted_credits is not None:
            self.attempted_credits = attempted_credits
        if attempted_credit_type_descriptor is not None:
            self.attempted_credit_type_descriptor = attempted_credit_type_descriptor
        if course_catalog_url is not None:
            self.course_catalog_url = course_catalog_url
        if course_repeat_code_descriptor is not None:
            self.course_repeat_code_descriptor = course_repeat_code_descriptor
        if course_title is not None:
            self.course_title = course_title
        if credit_categories is not None:
            self.credit_categories = credit_categories
        if earned_additional_credits is not None:
            self.earned_additional_credits = earned_additional_credits
        if earned_credit_conversion is not None:
            self.earned_credit_conversion = earned_credit_conversion
        self.earned_credits = earned_credits
        if earned_credit_type_descriptor is not None:
            self.earned_credit_type_descriptor = earned_credit_type_descriptor
        if external_education_organization_name_of_institution is not None:
            self.external_education_organization_name_of_institution = external_education_organization_name_of_institution
        if final_letter_grade_earned is not None:
            self.final_letter_grade_earned = final_letter_grade_earned
        if final_numeric_grade_earned is not None:
            self.final_numeric_grade_earned = final_numeric_grade_earned
        if method_credit_earned_descriptor is not None:
            self.method_credit_earned_descriptor = method_credit_earned_descriptor
        if partial_course_transcript_awards is not None:
            self.partial_course_transcript_awards = partial_course_transcript_awards
        if when_taken_grade_level_descriptor is not None:
            self.when_taken_grade_level_descriptor = when_taken_grade_level_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCourseTranscript.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCourseTranscript.

          # noqa: E501

        :param id: The id of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def course_attempt_result_descriptor(self):
        """Gets the course_attempt_result_descriptor of this EdFiCourseTranscript.  # noqa: E501

        The result from the student's attempt to take the course, for example:        Pass        Fail        Incomplete        Withdrawn.  # noqa: E501

        :return: The course_attempt_result_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_attempt_result_descriptor

    @course_attempt_result_descriptor.setter
    def course_attempt_result_descriptor(self, course_attempt_result_descriptor):
        """Sets the course_attempt_result_descriptor of this EdFiCourseTranscript.

        The result from the student's attempt to take the course, for example:        Pass        Fail        Incomplete        Withdrawn.  # noqa: E501

        :param course_attempt_result_descriptor: The course_attempt_result_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and course_attempt_result_descriptor is None:
            raise ValueError("Invalid value for `course_attempt_result_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                course_attempt_result_descriptor is not None and len(course_attempt_result_descriptor) > 306):
            raise ValueError("Invalid value for `course_attempt_result_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._course_attempt_result_descriptor = course_attempt_result_descriptor

    @property
    def course_reference(self):
        """Gets the course_reference of this EdFiCourseTranscript.  # noqa: E501


        :return: The course_reference of this EdFiCourseTranscript.  # noqa: E501
        :rtype: EdFiCourseReference
        """
        return self._course_reference

    @course_reference.setter
    def course_reference(self, course_reference):
        """Sets the course_reference of this EdFiCourseTranscript.


        :param course_reference: The course_reference of this EdFiCourseTranscript.  # noqa: E501
        :type: EdFiCourseReference
        """
        if self._configuration.client_side_validation and course_reference is None:
            raise ValueError("Invalid value for `course_reference`, must not be `None`")  # noqa: E501

        self._course_reference = course_reference

    @property
    def external_education_organization_reference(self):
        """Gets the external_education_organization_reference of this EdFiCourseTranscript.  # noqa: E501


        :return: The external_education_organization_reference of this EdFiCourseTranscript.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._external_education_organization_reference

    @external_education_organization_reference.setter
    def external_education_organization_reference(self, external_education_organization_reference):
        """Sets the external_education_organization_reference of this EdFiCourseTranscript.


        :param external_education_organization_reference: The external_education_organization_reference of this EdFiCourseTranscript.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """

        self._external_education_organization_reference = external_education_organization_reference

    @property
    def student_academic_record_reference(self):
        """Gets the student_academic_record_reference of this EdFiCourseTranscript.  # noqa: E501


        :return: The student_academic_record_reference of this EdFiCourseTranscript.  # noqa: E501
        :rtype: EdFiStudentAcademicRecordReference
        """
        return self._student_academic_record_reference

    @student_academic_record_reference.setter
    def student_academic_record_reference(self, student_academic_record_reference):
        """Sets the student_academic_record_reference of this EdFiCourseTranscript.


        :param student_academic_record_reference: The student_academic_record_reference of this EdFiCourseTranscript.  # noqa: E501
        :type: EdFiStudentAcademicRecordReference
        """
        if self._configuration.client_side_validation and student_academic_record_reference is None:
            raise ValueError("Invalid value for `student_academic_record_reference`, must not be `None`")  # noqa: E501

        self._student_academic_record_reference = student_academic_record_reference

    @property
    def academic_subjects(self):
        """Gets the academic_subjects of this EdFiCourseTranscript.  # noqa: E501

        An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.  # noqa: E501

        :return: The academic_subjects of this EdFiCourseTranscript.  # noqa: E501
        :rtype: list[EdFiCourseTranscriptAcademicSubject]
        """
        return self._academic_subjects

    @academic_subjects.setter
    def academic_subjects(self, academic_subjects):
        """Sets the academic_subjects of this EdFiCourseTranscript.

        An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.  # noqa: E501

        :param academic_subjects: The academic_subjects of this EdFiCourseTranscript.  # noqa: E501
        :type: list[EdFiCourseTranscriptAcademicSubject]
        """

        self._academic_subjects = academic_subjects

    @property
    def alternative_course_code(self):
        """Gets the alternative_course_code of this EdFiCourseTranscript.  # noqa: E501

        The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.  # noqa: E501

        :return: The alternative_course_code of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._alternative_course_code

    @alternative_course_code.setter
    def alternative_course_code(self, alternative_course_code):
        """Sets the alternative_course_code of this EdFiCourseTranscript.

        The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.  # noqa: E501

        :param alternative_course_code: The alternative_course_code of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                alternative_course_code is not None and len(alternative_course_code) > 60):
            raise ValueError("Invalid value for `alternative_course_code`, length must be less than or equal to `60`")  # noqa: E501

        self._alternative_course_code = alternative_course_code

    @property
    def alternative_course_identification_codes(self):
        """Gets the alternative_course_identification_codes of this EdFiCourseTranscript.  # noqa: E501

        An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.  # noqa: E501

        :return: The alternative_course_identification_codes of this EdFiCourseTranscript.  # noqa: E501
        :rtype: list[EdFiCourseTranscriptAlternativeCourseIdentificationCode]
        """
        return self._alternative_course_identification_codes

    @alternative_course_identification_codes.setter
    def alternative_course_identification_codes(self, alternative_course_identification_codes):
        """Sets the alternative_course_identification_codes of this EdFiCourseTranscript.

        An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.  # noqa: E501

        :param alternative_course_identification_codes: The alternative_course_identification_codes of this EdFiCourseTranscript.  # noqa: E501
        :type: list[EdFiCourseTranscriptAlternativeCourseIdentificationCode]
        """

        self._alternative_course_identification_codes = alternative_course_identification_codes

    @property
    def alternative_course_title(self):
        """Gets the alternative_course_title of this EdFiCourseTranscript.  # noqa: E501

        The descriptive name given to a course of study offered in the school, if different from the CourseTitle.  # noqa: E501

        :return: The alternative_course_title of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._alternative_course_title

    @alternative_course_title.setter
    def alternative_course_title(self, alternative_course_title):
        """Sets the alternative_course_title of this EdFiCourseTranscript.

        The descriptive name given to a course of study offered in the school, if different from the CourseTitle.  # noqa: E501

        :param alternative_course_title: The alternative_course_title of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                alternative_course_title is not None and len(alternative_course_title) > 60):
            raise ValueError("Invalid value for `alternative_course_title`, length must be less than or equal to `60`")  # noqa: E501

        self._alternative_course_title = alternative_course_title

    @property
    def assigning_organization_identification_code(self):
        """Gets the assigning_organization_identification_code of this EdFiCourseTranscript.  # noqa: E501

        The organization code or name assigning the course identification code.  # noqa: E501

        :return: The assigning_organization_identification_code of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._assigning_organization_identification_code

    @assigning_organization_identification_code.setter
    def assigning_organization_identification_code(self, assigning_organization_identification_code):
        """Sets the assigning_organization_identification_code of this EdFiCourseTranscript.

        The organization code or name assigning the course identification code.  # noqa: E501

        :param assigning_organization_identification_code: The assigning_organization_identification_code of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assigning_organization_identification_code is not None and len(assigning_organization_identification_code) > 60):
            raise ValueError("Invalid value for `assigning_organization_identification_code`, length must be less than or equal to `60`")  # noqa: E501

        self._assigning_organization_identification_code = assigning_organization_identification_code

    @property
    def attempted_credit_conversion(self):
        """Gets the attempted_credit_conversion of this EdFiCourseTranscript.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The attempted_credit_conversion of this EdFiCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._attempted_credit_conversion

    @attempted_credit_conversion.setter
    def attempted_credit_conversion(self, attempted_credit_conversion):
        """Sets the attempted_credit_conversion of this EdFiCourseTranscript.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param attempted_credit_conversion: The attempted_credit_conversion of this EdFiCourseTranscript.  # noqa: E501
        :type: float
        """

        self._attempted_credit_conversion = attempted_credit_conversion

    @property
    def attempted_credits(self):
        """Gets the attempted_credits of this EdFiCourseTranscript.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The attempted_credits of this EdFiCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._attempted_credits

    @attempted_credits.setter
    def attempted_credits(self, attempted_credits):
        """Sets the attempted_credits of this EdFiCourseTranscript.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param attempted_credits: The attempted_credits of this EdFiCourseTranscript.  # noqa: E501
        :type: float
        """

        self._attempted_credits = attempted_credits

    @property
    def attempted_credit_type_descriptor(self):
        """Gets the attempted_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The attempted_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._attempted_credit_type_descriptor

    @attempted_credit_type_descriptor.setter
    def attempted_credit_type_descriptor(self, attempted_credit_type_descriptor):
        """Sets the attempted_credit_type_descriptor of this EdFiCourseTranscript.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param attempted_credit_type_descriptor: The attempted_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                attempted_credit_type_descriptor is not None and len(attempted_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `attempted_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._attempted_credit_type_descriptor = attempted_credit_type_descriptor

    @property
    def course_catalog_url(self):
        """Gets the course_catalog_url of this EdFiCourseTranscript.  # noqa: E501

        The URL for the course catalog that defines the course identification code.  # noqa: E501

        :return: The course_catalog_url of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_catalog_url

    @course_catalog_url.setter
    def course_catalog_url(self, course_catalog_url):
        """Sets the course_catalog_url of this EdFiCourseTranscript.

        The URL for the course catalog that defines the course identification code.  # noqa: E501

        :param course_catalog_url: The course_catalog_url of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_catalog_url is not None and len(course_catalog_url) > 255):
            raise ValueError("Invalid value for `course_catalog_url`, length must be less than or equal to `255`")  # noqa: E501

        self._course_catalog_url = course_catalog_url

    @property
    def course_repeat_code_descriptor(self):
        """Gets the course_repeat_code_descriptor of this EdFiCourseTranscript.  # noqa: E501

        Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.  # noqa: E501

        :return: The course_repeat_code_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_repeat_code_descriptor

    @course_repeat_code_descriptor.setter
    def course_repeat_code_descriptor(self, course_repeat_code_descriptor):
        """Sets the course_repeat_code_descriptor of this EdFiCourseTranscript.

        Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.  # noqa: E501

        :param course_repeat_code_descriptor: The course_repeat_code_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_repeat_code_descriptor is not None and len(course_repeat_code_descriptor) > 306):
            raise ValueError("Invalid value for `course_repeat_code_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._course_repeat_code_descriptor = course_repeat_code_descriptor

    @property
    def course_title(self):
        """Gets the course_title of this EdFiCourseTranscript.  # noqa: E501

        The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).  # noqa: E501

        :return: The course_title of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._course_title

    @course_title.setter
    def course_title(self, course_title):
        """Sets the course_title of this EdFiCourseTranscript.

        The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).  # noqa: E501

        :param course_title: The course_title of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_title is not None and len(course_title) > 60):
            raise ValueError("Invalid value for `course_title`, length must be less than or equal to `60`")  # noqa: E501

        self._course_title = course_title

    @property
    def credit_categories(self):
        """Gets the credit_categories of this EdFiCourseTranscript.  # noqa: E501

        An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.  # noqa: E501

        :return: The credit_categories of this EdFiCourseTranscript.  # noqa: E501
        :rtype: list[EdFiCourseTranscriptCreditCategory]
        """
        return self._credit_categories

    @credit_categories.setter
    def credit_categories(self, credit_categories):
        """Sets the credit_categories of this EdFiCourseTranscript.

        An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.  # noqa: E501

        :param credit_categories: The credit_categories of this EdFiCourseTranscript.  # noqa: E501
        :type: list[EdFiCourseTranscriptCreditCategory]
        """

        self._credit_categories = credit_categories

    @property
    def earned_additional_credits(self):
        """Gets the earned_additional_credits of this EdFiCourseTranscript.  # noqa: E501

        An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).  # noqa: E501

        :return: The earned_additional_credits of this EdFiCourseTranscript.  # noqa: E501
        :rtype: list[EdFiCourseTranscriptEarnedAdditionalCredits]
        """
        return self._earned_additional_credits

    @earned_additional_credits.setter
    def earned_additional_credits(self, earned_additional_credits):
        """Sets the earned_additional_credits of this EdFiCourseTranscript.

        An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).  # noqa: E501

        :param earned_additional_credits: The earned_additional_credits of this EdFiCourseTranscript.  # noqa: E501
        :type: list[EdFiCourseTranscriptEarnedAdditionalCredits]
        """

        self._earned_additional_credits = earned_additional_credits

    @property
    def earned_credit_conversion(self):
        """Gets the earned_credit_conversion of this EdFiCourseTranscript.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The earned_credit_conversion of this EdFiCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._earned_credit_conversion

    @earned_credit_conversion.setter
    def earned_credit_conversion(self, earned_credit_conversion):
        """Sets the earned_credit_conversion of this EdFiCourseTranscript.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param earned_credit_conversion: The earned_credit_conversion of this EdFiCourseTranscript.  # noqa: E501
        :type: float
        """

        self._earned_credit_conversion = earned_credit_conversion

    @property
    def earned_credits(self):
        """Gets the earned_credits of this EdFiCourseTranscript.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The earned_credits of this EdFiCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._earned_credits

    @earned_credits.setter
    def earned_credits(self, earned_credits):
        """Sets the earned_credits of this EdFiCourseTranscript.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param earned_credits: The earned_credits of this EdFiCourseTranscript.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and earned_credits is None:
            raise ValueError("Invalid value for `earned_credits`, must not be `None`")  # noqa: E501

        self._earned_credits = earned_credits

    @property
    def earned_credit_type_descriptor(self):
        """Gets the earned_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The earned_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._earned_credit_type_descriptor

    @earned_credit_type_descriptor.setter
    def earned_credit_type_descriptor(self, earned_credit_type_descriptor):
        """Sets the earned_credit_type_descriptor of this EdFiCourseTranscript.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param earned_credit_type_descriptor: The earned_credit_type_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                earned_credit_type_descriptor is not None and len(earned_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `earned_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._earned_credit_type_descriptor = earned_credit_type_descriptor

    @property
    def external_education_organization_name_of_institution(self):
        """Gets the external_education_organization_name_of_institution of this EdFiCourseTranscript.  # noqa: E501

        Name of the external institution where the student completed the course; to be used only when the reference ExternalEducationOrganization is not available.  # noqa: E501

        :return: The external_education_organization_name_of_institution of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._external_education_organization_name_of_institution

    @external_education_organization_name_of_institution.setter
    def external_education_organization_name_of_institution(self, external_education_organization_name_of_institution):
        """Sets the external_education_organization_name_of_institution of this EdFiCourseTranscript.

        Name of the external institution where the student completed the course; to be used only when the reference ExternalEducationOrganization is not available.  # noqa: E501

        :param external_education_organization_name_of_institution: The external_education_organization_name_of_institution of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                external_education_organization_name_of_institution is not None and len(external_education_organization_name_of_institution) > 75):
            raise ValueError("Invalid value for `external_education_organization_name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._external_education_organization_name_of_institution = external_education_organization_name_of_institution

    @property
    def final_letter_grade_earned(self):
        """Gets the final_letter_grade_earned of this EdFiCourseTranscript.  # noqa: E501

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :return: The final_letter_grade_earned of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._final_letter_grade_earned

    @final_letter_grade_earned.setter
    def final_letter_grade_earned(self, final_letter_grade_earned):
        """Sets the final_letter_grade_earned of this EdFiCourseTranscript.

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :param final_letter_grade_earned: The final_letter_grade_earned of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                final_letter_grade_earned is not None and len(final_letter_grade_earned) > 20):
            raise ValueError("Invalid value for `final_letter_grade_earned`, length must be less than or equal to `20`")  # noqa: E501

        self._final_letter_grade_earned = final_letter_grade_earned

    @property
    def final_numeric_grade_earned(self):
        """Gets the final_numeric_grade_earned of this EdFiCourseTranscript.  # noqa: E501

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :return: The final_numeric_grade_earned of this EdFiCourseTranscript.  # noqa: E501
        :rtype: float
        """
        return self._final_numeric_grade_earned

    @final_numeric_grade_earned.setter
    def final_numeric_grade_earned(self, final_numeric_grade_earned):
        """Sets the final_numeric_grade_earned of this EdFiCourseTranscript.

        The final indicator of student performance in a class as submitted by the instructor.  # noqa: E501

        :param final_numeric_grade_earned: The final_numeric_grade_earned of this EdFiCourseTranscript.  # noqa: E501
        :type: float
        """

        self._final_numeric_grade_earned = final_numeric_grade_earned

    @property
    def method_credit_earned_descriptor(self):
        """Gets the method_credit_earned_descriptor of this EdFiCourseTranscript.  # noqa: E501

        The method the credits were earned (e.g., Classroom, Examination, Transfer).  # noqa: E501

        :return: The method_credit_earned_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._method_credit_earned_descriptor

    @method_credit_earned_descriptor.setter
    def method_credit_earned_descriptor(self, method_credit_earned_descriptor):
        """Sets the method_credit_earned_descriptor of this EdFiCourseTranscript.

        The method the credits were earned (e.g., Classroom, Examination, Transfer).  # noqa: E501

        :param method_credit_earned_descriptor: The method_credit_earned_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                method_credit_earned_descriptor is not None and len(method_credit_earned_descriptor) > 306):
            raise ValueError("Invalid value for `method_credit_earned_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._method_credit_earned_descriptor = method_credit_earned_descriptor

    @property
    def partial_course_transcript_awards(self):
        """Gets the partial_course_transcript_awards of this EdFiCourseTranscript.  # noqa: E501

        An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.  # noqa: E501

        :return: The partial_course_transcript_awards of this EdFiCourseTranscript.  # noqa: E501
        :rtype: list[EdFiCourseTranscriptPartialCourseTranscriptAwards]
        """
        return self._partial_course_transcript_awards

    @partial_course_transcript_awards.setter
    def partial_course_transcript_awards(self, partial_course_transcript_awards):
        """Sets the partial_course_transcript_awards of this EdFiCourseTranscript.

        An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.  # noqa: E501

        :param partial_course_transcript_awards: The partial_course_transcript_awards of this EdFiCourseTranscript.  # noqa: E501
        :type: list[EdFiCourseTranscriptPartialCourseTranscriptAwards]
        """

        self._partial_course_transcript_awards = partial_course_transcript_awards

    @property
    def when_taken_grade_level_descriptor(self):
        """Gets the when_taken_grade_level_descriptor of this EdFiCourseTranscript.  # noqa: E501

        Student's grade level at time of course.  # noqa: E501

        :return: The when_taken_grade_level_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._when_taken_grade_level_descriptor

    @when_taken_grade_level_descriptor.setter
    def when_taken_grade_level_descriptor(self, when_taken_grade_level_descriptor):
        """Sets the when_taken_grade_level_descriptor of this EdFiCourseTranscript.

        Student's grade level at time of course.  # noqa: E501

        :param when_taken_grade_level_descriptor: The when_taken_grade_level_descriptor of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                when_taken_grade_level_descriptor is not None and len(when_taken_grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `when_taken_grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._when_taken_grade_level_descriptor = when_taken_grade_level_descriptor

    @property
    def etag(self):
        """Gets the etag of this EdFiCourseTranscript.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCourseTranscript.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCourseTranscript.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCourseTranscript.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCourseTranscript, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCourseTranscript):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCourseTranscript):
            return True

        return self.to_dict() != other.to_dict()
