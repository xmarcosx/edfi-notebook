# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiGraduationPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'graduation_plan_type_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'graduation_school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'credits_by_courses': 'list[EdFiGraduationPlanCreditsByCourse]',
        'credits_by_credit_categories': 'list[EdFiGraduationPlanCreditsByCreditCategory]',
        'credits_by_subjects': 'list[EdFiGraduationPlanCreditsBySubject]',
        'individual_plan': 'bool',
        'required_assessments': 'list[EdFiGraduationPlanRequiredAssessment]',
        'total_required_credit_conversion': 'float',
        'total_required_credits': 'float',
        'total_required_credit_type_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'graduation_plan_type_descriptor': 'graduationPlanTypeDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'graduation_school_year_type_reference': 'graduationSchoolYearTypeReference',
        'credits_by_courses': 'creditsByCourses',
        'credits_by_credit_categories': 'creditsByCreditCategories',
        'credits_by_subjects': 'creditsBySubjects',
        'individual_plan': 'individualPlan',
        'required_assessments': 'requiredAssessments',
        'total_required_credit_conversion': 'totalRequiredCreditConversion',
        'total_required_credits': 'totalRequiredCredits',
        'total_required_credit_type_descriptor': 'totalRequiredCreditTypeDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, graduation_plan_type_descriptor=None, education_organization_reference=None, graduation_school_year_type_reference=None, credits_by_courses=None, credits_by_credit_categories=None, credits_by_subjects=None, individual_plan=None, required_assessments=None, total_required_credit_conversion=None, total_required_credits=None, total_required_credit_type_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiGraduationPlan - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._graduation_plan_type_descriptor = None
        self._education_organization_reference = None
        self._graduation_school_year_type_reference = None
        self._credits_by_courses = None
        self._credits_by_credit_categories = None
        self._credits_by_subjects = None
        self._individual_plan = None
        self._required_assessments = None
        self._total_required_credit_conversion = None
        self._total_required_credits = None
        self._total_required_credit_type_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.graduation_plan_type_descriptor = graduation_plan_type_descriptor
        self.education_organization_reference = education_organization_reference
        self.graduation_school_year_type_reference = graduation_school_year_type_reference
        if credits_by_courses is not None:
            self.credits_by_courses = credits_by_courses
        if credits_by_credit_categories is not None:
            self.credits_by_credit_categories = credits_by_credit_categories
        if credits_by_subjects is not None:
            self.credits_by_subjects = credits_by_subjects
        if individual_plan is not None:
            self.individual_plan = individual_plan
        if required_assessments is not None:
            self.required_assessments = required_assessments
        if total_required_credit_conversion is not None:
            self.total_required_credit_conversion = total_required_credit_conversion
        self.total_required_credits = total_required_credits
        if total_required_credit_type_descriptor is not None:
            self.total_required_credit_type_descriptor = total_required_credit_type_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiGraduationPlan.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiGraduationPlan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiGraduationPlan.

          # noqa: E501

        :param id: The id of this EdFiGraduationPlan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def graduation_plan_type_descriptor(self):
        """Gets the graduation_plan_type_descriptor of this EdFiGraduationPlan.  # noqa: E501

        The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.  # noqa: E501

        :return: The graduation_plan_type_descriptor of this EdFiGraduationPlan.  # noqa: E501
        :rtype: str
        """
        return self._graduation_plan_type_descriptor

    @graduation_plan_type_descriptor.setter
    def graduation_plan_type_descriptor(self, graduation_plan_type_descriptor):
        """Sets the graduation_plan_type_descriptor of this EdFiGraduationPlan.

        The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.  # noqa: E501

        :param graduation_plan_type_descriptor: The graduation_plan_type_descriptor of this EdFiGraduationPlan.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and graduation_plan_type_descriptor is None:
            raise ValueError("Invalid value for `graduation_plan_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                graduation_plan_type_descriptor is not None and len(graduation_plan_type_descriptor) > 306):
            raise ValueError("Invalid value for `graduation_plan_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._graduation_plan_type_descriptor = graduation_plan_type_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiGraduationPlan.  # noqa: E501


        :return: The education_organization_reference of this EdFiGraduationPlan.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiGraduationPlan.


        :param education_organization_reference: The education_organization_reference of this EdFiGraduationPlan.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def graduation_school_year_type_reference(self):
        """Gets the graduation_school_year_type_reference of this EdFiGraduationPlan.  # noqa: E501


        :return: The graduation_school_year_type_reference of this EdFiGraduationPlan.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._graduation_school_year_type_reference

    @graduation_school_year_type_reference.setter
    def graduation_school_year_type_reference(self, graduation_school_year_type_reference):
        """Sets the graduation_school_year_type_reference of this EdFiGraduationPlan.


        :param graduation_school_year_type_reference: The graduation_school_year_type_reference of this EdFiGraduationPlan.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and graduation_school_year_type_reference is None:
            raise ValueError("Invalid value for `graduation_school_year_type_reference`, must not be `None`")  # noqa: E501

        self._graduation_school_year_type_reference = graduation_school_year_type_reference

    @property
    def credits_by_courses(self):
        """Gets the credits_by_courses of this EdFiGraduationPlan.  # noqa: E501

        An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.  # noqa: E501

        :return: The credits_by_courses of this EdFiGraduationPlan.  # noqa: E501
        :rtype: list[EdFiGraduationPlanCreditsByCourse]
        """
        return self._credits_by_courses

    @credits_by_courses.setter
    def credits_by_courses(self, credits_by_courses):
        """Sets the credits_by_courses of this EdFiGraduationPlan.

        An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.  # noqa: E501

        :param credits_by_courses: The credits_by_courses of this EdFiGraduationPlan.  # noqa: E501
        :type: list[EdFiGraduationPlanCreditsByCourse]
        """

        self._credits_by_courses = credits_by_courses

    @property
    def credits_by_credit_categories(self):
        """Gets the credits_by_credit_categories of this EdFiGraduationPlan.  # noqa: E501

        An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.  # noqa: E501

        :return: The credits_by_credit_categories of this EdFiGraduationPlan.  # noqa: E501
        :rtype: list[EdFiGraduationPlanCreditsByCreditCategory]
        """
        return self._credits_by_credit_categories

    @credits_by_credit_categories.setter
    def credits_by_credit_categories(self, credits_by_credit_categories):
        """Sets the credits_by_credit_categories of this EdFiGraduationPlan.

        An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.  # noqa: E501

        :param credits_by_credit_categories: The credits_by_credit_categories of this EdFiGraduationPlan.  # noqa: E501
        :type: list[EdFiGraduationPlanCreditsByCreditCategory]
        """

        self._credits_by_credit_categories = credits_by_credit_categories

    @property
    def credits_by_subjects(self):
        """Gets the credits_by_subjects of this EdFiGraduationPlan.  # noqa: E501

        An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.  # noqa: E501

        :return: The credits_by_subjects of this EdFiGraduationPlan.  # noqa: E501
        :rtype: list[EdFiGraduationPlanCreditsBySubject]
        """
        return self._credits_by_subjects

    @credits_by_subjects.setter
    def credits_by_subjects(self, credits_by_subjects):
        """Sets the credits_by_subjects of this EdFiGraduationPlan.

        An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.  # noqa: E501

        :param credits_by_subjects: The credits_by_subjects of this EdFiGraduationPlan.  # noqa: E501
        :type: list[EdFiGraduationPlanCreditsBySubject]
        """

        self._credits_by_subjects = credits_by_subjects

    @property
    def individual_plan(self):
        """Gets the individual_plan of this EdFiGraduationPlan.  # noqa: E501

        An indicator of whether the GraduationPlan is tailored for an individual.  # noqa: E501

        :return: The individual_plan of this EdFiGraduationPlan.  # noqa: E501
        :rtype: bool
        """
        return self._individual_plan

    @individual_plan.setter
    def individual_plan(self, individual_plan):
        """Sets the individual_plan of this EdFiGraduationPlan.

        An indicator of whether the GraduationPlan is tailored for an individual.  # noqa: E501

        :param individual_plan: The individual_plan of this EdFiGraduationPlan.  # noqa: E501
        :type: bool
        """

        self._individual_plan = individual_plan

    @property
    def required_assessments(self):
        """Gets the required_assessments of this EdFiGraduationPlan.  # noqa: E501

        An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.  # noqa: E501

        :return: The required_assessments of this EdFiGraduationPlan.  # noqa: E501
        :rtype: list[EdFiGraduationPlanRequiredAssessment]
        """
        return self._required_assessments

    @required_assessments.setter
    def required_assessments(self, required_assessments):
        """Sets the required_assessments of this EdFiGraduationPlan.

        An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.  # noqa: E501

        :param required_assessments: The required_assessments of this EdFiGraduationPlan.  # noqa: E501
        :type: list[EdFiGraduationPlanRequiredAssessment]
        """

        self._required_assessments = required_assessments

    @property
    def total_required_credit_conversion(self):
        """Gets the total_required_credit_conversion of this EdFiGraduationPlan.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The total_required_credit_conversion of this EdFiGraduationPlan.  # noqa: E501
        :rtype: float
        """
        return self._total_required_credit_conversion

    @total_required_credit_conversion.setter
    def total_required_credit_conversion(self, total_required_credit_conversion):
        """Sets the total_required_credit_conversion of this EdFiGraduationPlan.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param total_required_credit_conversion: The total_required_credit_conversion of this EdFiGraduationPlan.  # noqa: E501
        :type: float
        """

        self._total_required_credit_conversion = total_required_credit_conversion

    @property
    def total_required_credits(self):
        """Gets the total_required_credits of this EdFiGraduationPlan.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The total_required_credits of this EdFiGraduationPlan.  # noqa: E501
        :rtype: float
        """
        return self._total_required_credits

    @total_required_credits.setter
    def total_required_credits(self, total_required_credits):
        """Sets the total_required_credits of this EdFiGraduationPlan.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param total_required_credits: The total_required_credits of this EdFiGraduationPlan.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_required_credits is None:
            raise ValueError("Invalid value for `total_required_credits`, must not be `None`")  # noqa: E501

        self._total_required_credits = total_required_credits

    @property
    def total_required_credit_type_descriptor(self):
        """Gets the total_required_credit_type_descriptor of this EdFiGraduationPlan.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The total_required_credit_type_descriptor of this EdFiGraduationPlan.  # noqa: E501
        :rtype: str
        """
        return self._total_required_credit_type_descriptor

    @total_required_credit_type_descriptor.setter
    def total_required_credit_type_descriptor(self, total_required_credit_type_descriptor):
        """Sets the total_required_credit_type_descriptor of this EdFiGraduationPlan.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param total_required_credit_type_descriptor: The total_required_credit_type_descriptor of this EdFiGraduationPlan.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                total_required_credit_type_descriptor is not None and len(total_required_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `total_required_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._total_required_credit_type_descriptor = total_required_credit_type_descriptor

    @property
    def etag(self):
        """Gets the etag of this EdFiGraduationPlan.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiGraduationPlan.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiGraduationPlan.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiGraduationPlan.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiGraduationPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiGraduationPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiGraduationPlan):
            return True

        return self.to_dict() != other.to_dict()
