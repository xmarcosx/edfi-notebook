# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiSurveyQuestionMatrix(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matrix_element': 'str',
        'max_raw_score': 'int',
        'min_raw_score': 'int'
    }

    attribute_map = {
        'matrix_element': 'matrixElement',
        'max_raw_score': 'maxRawScore',
        'min_raw_score': 'minRawScore'
    }

    def __init__(self, matrix_element=None, max_raw_score=None, min_raw_score=None, _configuration=None):  # noqa: E501
        """EdFiSurveyQuestionMatrix - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._matrix_element = None
        self._max_raw_score = None
        self._min_raw_score = None
        self.discriminator = None

        self.matrix_element = matrix_element
        if max_raw_score is not None:
            self.max_raw_score = max_raw_score
        if min_raw_score is not None:
            self.min_raw_score = min_raw_score

    @property
    def matrix_element(self):
        """Gets the matrix_element of this EdFiSurveyQuestionMatrix.  # noqa: E501

        For matrix questions, the text identifying each row of the matrix.  # noqa: E501

        :return: The matrix_element of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :rtype: str
        """
        return self._matrix_element

    @matrix_element.setter
    def matrix_element(self, matrix_element):
        """Sets the matrix_element of this EdFiSurveyQuestionMatrix.

        For matrix questions, the text identifying each row of the matrix.  # noqa: E501

        :param matrix_element: The matrix_element of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and matrix_element is None:
            raise ValueError("Invalid value for `matrix_element`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                matrix_element is not None and len(matrix_element) > 255):
            raise ValueError("Invalid value for `matrix_element`, length must be less than or equal to `255`")  # noqa: E501

        self._matrix_element = matrix_element

    @property
    def max_raw_score(self):
        """Gets the max_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501

        The maximum score possible on a survey.  # noqa: E501

        :return: The max_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :rtype: int
        """
        return self._max_raw_score

    @max_raw_score.setter
    def max_raw_score(self, max_raw_score):
        """Sets the max_raw_score of this EdFiSurveyQuestionMatrix.

        The maximum score possible on a survey.  # noqa: E501

        :param max_raw_score: The max_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :type: int
        """

        self._max_raw_score = max_raw_score

    @property
    def min_raw_score(self):
        """Gets the min_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501

        The minimum score possible on a survey.  # noqa: E501

        :return: The min_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :rtype: int
        """
        return self._min_raw_score

    @min_raw_score.setter
    def min_raw_score(self, min_raw_score):
        """Sets the min_raw_score of this EdFiSurveyQuestionMatrix.

        The minimum score possible on a survey.  # noqa: E501

        :param min_raw_score: The min_raw_score of this EdFiSurveyQuestionMatrix.  # noqa: E501
        :type: int
        """

        self._min_raw_score = min_raw_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiSurveyQuestionMatrix, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiSurveyQuestionMatrix):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiSurveyQuestionMatrix):
            return True

        return self.to_dict() != other.to_dict()
