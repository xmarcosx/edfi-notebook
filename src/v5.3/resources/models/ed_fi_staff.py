# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStaff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'staff_unique_id': 'str',
        'person_reference': 'EdFiPersonReference',
        'addresses': 'list[EdFiStaffAddress]',
        'ancestry_ethnic_origins': 'list[EdFiStaffAncestryEthnicOrigin]',
        'birth_date': 'date',
        'citizenship_status_descriptor': 'str',
        'credentials': 'list[EdFiStaffCredential]',
        'electronic_mails': 'list[EdFiStaffElectronicMail]',
        'first_name': 'str',
        'generation_code_suffix': 'str',
        'highest_completed_level_of_education_descriptor': 'str',
        'highly_qualified_teacher': 'bool',
        'hispanic_latino_ethnicity': 'bool',
        'identification_codes': 'list[EdFiStaffIdentificationCode]',
        'identification_documents': 'list[EdFiStaffIdentificationDocument]',
        'international_addresses': 'list[EdFiStaffInternationalAddress]',
        'languages': 'list[EdFiStaffLanguage]',
        'last_surname': 'str',
        'login_id': 'str',
        'maiden_name': 'str',
        'middle_name': 'str',
        'old_ethnicity_descriptor': 'str',
        'other_names': 'list[EdFiStaffOtherName]',
        'personal_identification_documents': 'list[EdFiStaffPersonalIdentificationDocument]',
        'personal_title_prefix': 'str',
        'races': 'list[EdFiStaffRace]',
        'recognitions': 'list[EdFiStaffRecognition]',
        'sex_descriptor': 'str',
        'telephones': 'list[EdFiStaffTelephone]',
        'tribal_affiliations': 'list[EdFiStaffTribalAffiliation]',
        'visas': 'list[EdFiStaffVisa]',
        'years_of_prior_professional_experience': 'float',
        'years_of_prior_teaching_experience': 'float',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'staff_unique_id': 'staffUniqueId',
        'person_reference': 'personReference',
        'addresses': 'addresses',
        'ancestry_ethnic_origins': 'ancestryEthnicOrigins',
        'birth_date': 'birthDate',
        'citizenship_status_descriptor': 'citizenshipStatusDescriptor',
        'credentials': 'credentials',
        'electronic_mails': 'electronicMails',
        'first_name': 'firstName',
        'generation_code_suffix': 'generationCodeSuffix',
        'highest_completed_level_of_education_descriptor': 'highestCompletedLevelOfEducationDescriptor',
        'highly_qualified_teacher': 'highlyQualifiedTeacher',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'identification_codes': 'identificationCodes',
        'identification_documents': 'identificationDocuments',
        'international_addresses': 'internationalAddresses',
        'languages': 'languages',
        'last_surname': 'lastSurname',
        'login_id': 'loginId',
        'maiden_name': 'maidenName',
        'middle_name': 'middleName',
        'old_ethnicity_descriptor': 'oldEthnicityDescriptor',
        'other_names': 'otherNames',
        'personal_identification_documents': 'personalIdentificationDocuments',
        'personal_title_prefix': 'personalTitlePrefix',
        'races': 'races',
        'recognitions': 'recognitions',
        'sex_descriptor': 'sexDescriptor',
        'telephones': 'telephones',
        'tribal_affiliations': 'tribalAffiliations',
        'visas': 'visas',
        'years_of_prior_professional_experience': 'yearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience': 'yearsOfPriorTeachingExperience',
        'etag': '_etag'
    }

    def __init__(self, id=None, staff_unique_id=None, person_reference=None, addresses=None, ancestry_ethnic_origins=None, birth_date=None, citizenship_status_descriptor=None, credentials=None, electronic_mails=None, first_name=None, generation_code_suffix=None, highest_completed_level_of_education_descriptor=None, highly_qualified_teacher=None, hispanic_latino_ethnicity=None, identification_codes=None, identification_documents=None, international_addresses=None, languages=None, last_surname=None, login_id=None, maiden_name=None, middle_name=None, old_ethnicity_descriptor=None, other_names=None, personal_identification_documents=None, personal_title_prefix=None, races=None, recognitions=None, sex_descriptor=None, telephones=None, tribal_affiliations=None, visas=None, years_of_prior_professional_experience=None, years_of_prior_teaching_experience=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStaff - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._staff_unique_id = None
        self._person_reference = None
        self._addresses = None
        self._ancestry_ethnic_origins = None
        self._birth_date = None
        self._citizenship_status_descriptor = None
        self._credentials = None
        self._electronic_mails = None
        self._first_name = None
        self._generation_code_suffix = None
        self._highest_completed_level_of_education_descriptor = None
        self._highly_qualified_teacher = None
        self._hispanic_latino_ethnicity = None
        self._identification_codes = None
        self._identification_documents = None
        self._international_addresses = None
        self._languages = None
        self._last_surname = None
        self._login_id = None
        self._maiden_name = None
        self._middle_name = None
        self._old_ethnicity_descriptor = None
        self._other_names = None
        self._personal_identification_documents = None
        self._personal_title_prefix = None
        self._races = None
        self._recognitions = None
        self._sex_descriptor = None
        self._telephones = None
        self._tribal_affiliations = None
        self._visas = None
        self._years_of_prior_professional_experience = None
        self._years_of_prior_teaching_experience = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.staff_unique_id = staff_unique_id
        if person_reference is not None:
            self.person_reference = person_reference
        if addresses is not None:
            self.addresses = addresses
        if ancestry_ethnic_origins is not None:
            self.ancestry_ethnic_origins = ancestry_ethnic_origins
        if birth_date is not None:
            self.birth_date = birth_date
        if citizenship_status_descriptor is not None:
            self.citizenship_status_descriptor = citizenship_status_descriptor
        if credentials is not None:
            self.credentials = credentials
        if electronic_mails is not None:
            self.electronic_mails = electronic_mails
        self.first_name = first_name
        if generation_code_suffix is not None:
            self.generation_code_suffix = generation_code_suffix
        if highest_completed_level_of_education_descriptor is not None:
            self.highest_completed_level_of_education_descriptor = highest_completed_level_of_education_descriptor
        if highly_qualified_teacher is not None:
            self.highly_qualified_teacher = highly_qualified_teacher
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if identification_documents is not None:
            self.identification_documents = identification_documents
        if international_addresses is not None:
            self.international_addresses = international_addresses
        if languages is not None:
            self.languages = languages
        self.last_surname = last_surname
        if login_id is not None:
            self.login_id = login_id
        if maiden_name is not None:
            self.maiden_name = maiden_name
        if middle_name is not None:
            self.middle_name = middle_name
        if old_ethnicity_descriptor is not None:
            self.old_ethnicity_descriptor = old_ethnicity_descriptor
        if other_names is not None:
            self.other_names = other_names
        if personal_identification_documents is not None:
            self.personal_identification_documents = personal_identification_documents
        if personal_title_prefix is not None:
            self.personal_title_prefix = personal_title_prefix
        if races is not None:
            self.races = races
        if recognitions is not None:
            self.recognitions = recognitions
        if sex_descriptor is not None:
            self.sex_descriptor = sex_descriptor
        if telephones is not None:
            self.telephones = telephones
        if tribal_affiliations is not None:
            self.tribal_affiliations = tribal_affiliations
        if visas is not None:
            self.visas = visas
        if years_of_prior_professional_experience is not None:
            self.years_of_prior_professional_experience = years_of_prior_professional_experience
        if years_of_prior_teaching_experience is not None:
            self.years_of_prior_teaching_experience = years_of_prior_teaching_experience
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStaff.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStaff.

          # noqa: E501

        :param id: The id of this EdFiStaff.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def staff_unique_id(self):
        """Gets the staff_unique_id of this EdFiStaff.  # noqa: E501

        A unique alphanumeric code assigned to a staff.  # noqa: E501

        :return: The staff_unique_id of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._staff_unique_id

    @staff_unique_id.setter
    def staff_unique_id(self, staff_unique_id):
        """Sets the staff_unique_id of this EdFiStaff.

        A unique alphanumeric code assigned to a staff.  # noqa: E501

        :param staff_unique_id: The staff_unique_id of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and staff_unique_id is None:
            raise ValueError("Invalid value for `staff_unique_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                staff_unique_id is not None and len(staff_unique_id) > 32):
            raise ValueError("Invalid value for `staff_unique_id`, length must be less than or equal to `32`")  # noqa: E501

        self._staff_unique_id = staff_unique_id

    @property
    def person_reference(self):
        """Gets the person_reference of this EdFiStaff.  # noqa: E501


        :return: The person_reference of this EdFiStaff.  # noqa: E501
        :rtype: EdFiPersonReference
        """
        return self._person_reference

    @person_reference.setter
    def person_reference(self, person_reference):
        """Sets the person_reference of this EdFiStaff.


        :param person_reference: The person_reference of this EdFiStaff.  # noqa: E501
        :type: EdFiPersonReference
        """

        self._person_reference = person_reference

    @property
    def addresses(self):
        """Gets the addresses of this EdFiStaff.  # noqa: E501

        An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.  # noqa: E501

        :return: The addresses of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this EdFiStaff.

        An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.  # noqa: E501

        :param addresses: The addresses of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffAddress]
        """

        self._addresses = addresses

    @property
    def ancestry_ethnic_origins(self):
        """Gets the ancestry_ethnic_origins of this EdFiStaff.  # noqa: E501

        An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.  # noqa: E501

        :return: The ancestry_ethnic_origins of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffAncestryEthnicOrigin]
        """
        return self._ancestry_ethnic_origins

    @ancestry_ethnic_origins.setter
    def ancestry_ethnic_origins(self, ancestry_ethnic_origins):
        """Sets the ancestry_ethnic_origins of this EdFiStaff.

        An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.  # noqa: E501

        :param ancestry_ethnic_origins: The ancestry_ethnic_origins of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffAncestryEthnicOrigin]
        """

        self._ancestry_ethnic_origins = ancestry_ethnic_origins

    @property
    def birth_date(self):
        """Gets the birth_date of this EdFiStaff.  # noqa: E501

        The month, day, and year on which an individual was born.  # noqa: E501

        :return: The birth_date of this EdFiStaff.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this EdFiStaff.

        The month, day, and year on which an individual was born.  # noqa: E501

        :param birth_date: The birth_date of this EdFiStaff.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def citizenship_status_descriptor(self):
        """Gets the citizenship_status_descriptor of this EdFiStaff.  # noqa: E501

        An indicator of whether or not the person is a U.S. citizen.  # noqa: E501

        :return: The citizenship_status_descriptor of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._citizenship_status_descriptor

    @citizenship_status_descriptor.setter
    def citizenship_status_descriptor(self, citizenship_status_descriptor):
        """Sets the citizenship_status_descriptor of this EdFiStaff.

        An indicator of whether or not the person is a U.S. citizen.  # noqa: E501

        :param citizenship_status_descriptor: The citizenship_status_descriptor of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                citizenship_status_descriptor is not None and len(citizenship_status_descriptor) > 306):
            raise ValueError("Invalid value for `citizenship_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._citizenship_status_descriptor = citizenship_status_descriptor

    @property
    def credentials(self):
        """Gets the credentials of this EdFiStaff.  # noqa: E501

        An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.  # noqa: E501

        :return: The credentials of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffCredential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this EdFiStaff.

        An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.  # noqa: E501

        :param credentials: The credentials of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffCredential]
        """

        self._credentials = credentials

    @property
    def electronic_mails(self):
        """Gets the electronic_mails of this EdFiStaff.  # noqa: E501

        An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :return: The electronic_mails of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffElectronicMail]
        """
        return self._electronic_mails

    @electronic_mails.setter
    def electronic_mails(self, electronic_mails):
        """Sets the electronic_mails of this EdFiStaff.

        An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :param electronic_mails: The electronic_mails of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffElectronicMail]
        """

        self._electronic_mails = electronic_mails

    @property
    def first_name(self):
        """Gets the first_name of this EdFiStaff.  # noqa: E501

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :return: The first_name of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EdFiStaff.

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :param first_name: The first_name of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 75):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `75`")  # noqa: E501

        self._first_name = first_name

    @property
    def generation_code_suffix(self):
        """Gets the generation_code_suffix of this EdFiStaff.  # noqa: E501

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :return: The generation_code_suffix of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._generation_code_suffix

    @generation_code_suffix.setter
    def generation_code_suffix(self, generation_code_suffix):
        """Sets the generation_code_suffix of this EdFiStaff.

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :param generation_code_suffix: The generation_code_suffix of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                generation_code_suffix is not None and len(generation_code_suffix) > 10):
            raise ValueError("Invalid value for `generation_code_suffix`, length must be less than or equal to `10`")  # noqa: E501

        self._generation_code_suffix = generation_code_suffix

    @property
    def highest_completed_level_of_education_descriptor(self):
        """Gets the highest_completed_level_of_education_descriptor of this EdFiStaff.  # noqa: E501

        The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).  # noqa: E501

        :return: The highest_completed_level_of_education_descriptor of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._highest_completed_level_of_education_descriptor

    @highest_completed_level_of_education_descriptor.setter
    def highest_completed_level_of_education_descriptor(self, highest_completed_level_of_education_descriptor):
        """Sets the highest_completed_level_of_education_descriptor of this EdFiStaff.

        The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).  # noqa: E501

        :param highest_completed_level_of_education_descriptor: The highest_completed_level_of_education_descriptor of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                highest_completed_level_of_education_descriptor is not None and len(highest_completed_level_of_education_descriptor) > 306):
            raise ValueError("Invalid value for `highest_completed_level_of_education_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._highest_completed_level_of_education_descriptor = highest_completed_level_of_education_descriptor

    @property
    def highly_qualified_teacher(self):
        """Gets the highly_qualified_teacher of this EdFiStaff.  # noqa: E501

        An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.  # noqa: E501

        :return: The highly_qualified_teacher of this EdFiStaff.  # noqa: E501
        :rtype: bool
        """
        return self._highly_qualified_teacher

    @highly_qualified_teacher.setter
    def highly_qualified_teacher(self, highly_qualified_teacher):
        """Sets the highly_qualified_teacher of this EdFiStaff.

        An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.  # noqa: E501

        :param highly_qualified_teacher: The highly_qualified_teacher of this EdFiStaff.  # noqa: E501
        :type: bool
        """

        self._highly_qualified_teacher = highly_qualified_teacher

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this EdFiStaff.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :return: The hispanic_latino_ethnicity of this EdFiStaff.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this EdFiStaff.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this EdFiStaff.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def identification_codes(self):
        """Gets the identification_codes of this EdFiStaff.  # noqa: E501

        An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The identification_codes of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this EdFiStaff.

        An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param identification_codes: The identification_codes of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def identification_documents(self):
        """Gets the identification_documents of this EdFiStaff.  # noqa: E501

        An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.  # noqa: E501

        :return: The identification_documents of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffIdentificationDocument]
        """
        return self._identification_documents

    @identification_documents.setter
    def identification_documents(self, identification_documents):
        """Sets the identification_documents of this EdFiStaff.

        An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.  # noqa: E501

        :param identification_documents: The identification_documents of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffIdentificationDocument]
        """

        self._identification_documents = identification_documents

    @property
    def international_addresses(self):
        """Gets the international_addresses of this EdFiStaff.  # noqa: E501

        An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.  # noqa: E501

        :return: The international_addresses of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffInternationalAddress]
        """
        return self._international_addresses

    @international_addresses.setter
    def international_addresses(self, international_addresses):
        """Sets the international_addresses of this EdFiStaff.

        An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.  # noqa: E501

        :param international_addresses: The international_addresses of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffInternationalAddress]
        """

        self._international_addresses = international_addresses

    @property
    def languages(self):
        """Gets the languages of this EdFiStaff.  # noqa: E501

        An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.  # noqa: E501

        :return: The languages of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this EdFiStaff.

        An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.  # noqa: E501

        :param languages: The languages of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffLanguage]
        """

        self._languages = languages

    @property
    def last_surname(self):
        """Gets the last_surname of this EdFiStaff.  # noqa: E501

        The name borne in common by members of a family.  # noqa: E501

        :return: The last_surname of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._last_surname

    @last_surname.setter
    def last_surname(self, last_surname):
        """Sets the last_surname of this EdFiStaff.

        The name borne in common by members of a family.  # noqa: E501

        :param last_surname: The last_surname of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_surname is None:
            raise ValueError("Invalid value for `last_surname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_surname is not None and len(last_surname) > 75):
            raise ValueError("Invalid value for `last_surname`, length must be less than or equal to `75`")  # noqa: E501

        self._last_surname = last_surname

    @property
    def login_id(self):
        """Gets the login_id of this EdFiStaff.  # noqa: E501

        The login ID for the user; used for security access control interface.  # noqa: E501

        :return: The login_id of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this EdFiStaff.

        The login ID for the user; used for security access control interface.  # noqa: E501

        :param login_id: The login_id of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                login_id is not None and len(login_id) > 60):
            raise ValueError("Invalid value for `login_id`, length must be less than or equal to `60`")  # noqa: E501

        self._login_id = login_id

    @property
    def maiden_name(self):
        """Gets the maiden_name of this EdFiStaff.  # noqa: E501

        The person's maiden name.  # noqa: E501

        :return: The maiden_name of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this EdFiStaff.

        The person's maiden name.  # noqa: E501

        :param maiden_name: The maiden_name of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                maiden_name is not None and len(maiden_name) > 75):
            raise ValueError("Invalid value for `maiden_name`, length must be less than or equal to `75`")  # noqa: E501

        self._maiden_name = maiden_name

    @property
    def middle_name(self):
        """Gets the middle_name of this EdFiStaff.  # noqa: E501

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :return: The middle_name of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this EdFiStaff.

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :param middle_name: The middle_name of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 75):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `75`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def old_ethnicity_descriptor(self):
        """Gets the old_ethnicity_descriptor of this EdFiStaff.  # noqa: E501

        Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.  # noqa: E501

        :return: The old_ethnicity_descriptor of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._old_ethnicity_descriptor

    @old_ethnicity_descriptor.setter
    def old_ethnicity_descriptor(self, old_ethnicity_descriptor):
        """Sets the old_ethnicity_descriptor of this EdFiStaff.

        Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.  # noqa: E501

        :param old_ethnicity_descriptor: The old_ethnicity_descriptor of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                old_ethnicity_descriptor is not None and len(old_ethnicity_descriptor) > 306):
            raise ValueError("Invalid value for `old_ethnicity_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._old_ethnicity_descriptor = old_ethnicity_descriptor

    @property
    def other_names(self):
        """Gets the other_names of this EdFiStaff.  # noqa: E501

        An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.  # noqa: E501

        :return: The other_names of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffOtherName]
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this EdFiStaff.

        An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.  # noqa: E501

        :param other_names: The other_names of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffOtherName]
        """

        self._other_names = other_names

    @property
    def personal_identification_documents(self):
        """Gets the personal_identification_documents of this EdFiStaff.  # noqa: E501

        An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :return: The personal_identification_documents of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffPersonalIdentificationDocument]
        """
        return self._personal_identification_documents

    @personal_identification_documents.setter
    def personal_identification_documents(self, personal_identification_documents):
        """Sets the personal_identification_documents of this EdFiStaff.

        An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :param personal_identification_documents: The personal_identification_documents of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffPersonalIdentificationDocument]
        """

        self._personal_identification_documents = personal_identification_documents

    @property
    def personal_title_prefix(self):
        """Gets the personal_title_prefix of this EdFiStaff.  # noqa: E501

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :return: The personal_title_prefix of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._personal_title_prefix

    @personal_title_prefix.setter
    def personal_title_prefix(self, personal_title_prefix):
        """Sets the personal_title_prefix of this EdFiStaff.

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :param personal_title_prefix: The personal_title_prefix of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                personal_title_prefix is not None and len(personal_title_prefix) > 30):
            raise ValueError("Invalid value for `personal_title_prefix`, length must be less than or equal to `30`")  # noqa: E501

        self._personal_title_prefix = personal_title_prefix

    @property
    def races(self):
        """Gets the races of this EdFiStaff.  # noqa: E501

        An unordered collection of staffRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :return: The races of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this EdFiStaff.

        An unordered collection of staffRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :param races: The races of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffRace]
        """

        self._races = races

    @property
    def recognitions(self):
        """Gets the recognitions of this EdFiStaff.  # noqa: E501

        An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.  # noqa: E501

        :return: The recognitions of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffRecognition]
        """
        return self._recognitions

    @recognitions.setter
    def recognitions(self, recognitions):
        """Sets the recognitions of this EdFiStaff.

        An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.  # noqa: E501

        :param recognitions: The recognitions of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffRecognition]
        """

        self._recognitions = recognitions

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this EdFiStaff.  # noqa: E501

        A person's gender.  # noqa: E501

        :return: The sex_descriptor of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this EdFiStaff.

        A person's gender.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this EdFiStaff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def telephones(self):
        """Gets the telephones of this EdFiStaff.  # noqa: E501

        An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :return: The telephones of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffTelephone]
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this EdFiStaff.

        An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :param telephones: The telephones of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffTelephone]
        """

        self._telephones = telephones

    @property
    def tribal_affiliations(self):
        """Gets the tribal_affiliations of this EdFiStaff.  # noqa: E501

        An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.  # noqa: E501

        :return: The tribal_affiliations of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffTribalAffiliation]
        """
        return self._tribal_affiliations

    @tribal_affiliations.setter
    def tribal_affiliations(self, tribal_affiliations):
        """Sets the tribal_affiliations of this EdFiStaff.

        An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.  # noqa: E501

        :param tribal_affiliations: The tribal_affiliations of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffTribalAffiliation]
        """

        self._tribal_affiliations = tribal_affiliations

    @property
    def visas(self):
        """Gets the visas of this EdFiStaff.  # noqa: E501

        An unordered collection of staffVisas. An indicator of a non-US citizen's Visa type.  # noqa: E501

        :return: The visas of this EdFiStaff.  # noqa: E501
        :rtype: list[EdFiStaffVisa]
        """
        return self._visas

    @visas.setter
    def visas(self, visas):
        """Sets the visas of this EdFiStaff.

        An unordered collection of staffVisas. An indicator of a non-US citizen's Visa type.  # noqa: E501

        :param visas: The visas of this EdFiStaff.  # noqa: E501
        :type: list[EdFiStaffVisa]
        """

        self._visas = visas

    @property
    def years_of_prior_professional_experience(self):
        """Gets the years_of_prior_professional_experience of this EdFiStaff.  # noqa: E501

        The total number of years that an individual has previously held a similar professional position in one or more education institutions.  # noqa: E501

        :return: The years_of_prior_professional_experience of this EdFiStaff.  # noqa: E501
        :rtype: float
        """
        return self._years_of_prior_professional_experience

    @years_of_prior_professional_experience.setter
    def years_of_prior_professional_experience(self, years_of_prior_professional_experience):
        """Sets the years_of_prior_professional_experience of this EdFiStaff.

        The total number of years that an individual has previously held a similar professional position in one or more education institutions.  # noqa: E501

        :param years_of_prior_professional_experience: The years_of_prior_professional_experience of this EdFiStaff.  # noqa: E501
        :type: float
        """

        self._years_of_prior_professional_experience = years_of_prior_professional_experience

    @property
    def years_of_prior_teaching_experience(self):
        """Gets the years_of_prior_teaching_experience of this EdFiStaff.  # noqa: E501

        The total number of years that an individual has previously held a teaching position in one or more education institutions.  # noqa: E501

        :return: The years_of_prior_teaching_experience of this EdFiStaff.  # noqa: E501
        :rtype: float
        """
        return self._years_of_prior_teaching_experience

    @years_of_prior_teaching_experience.setter
    def years_of_prior_teaching_experience(self, years_of_prior_teaching_experience):
        """Sets the years_of_prior_teaching_experience of this EdFiStaff.

        The total number of years that an individual has previously held a teaching position in one or more education institutions.  # noqa: E501

        :param years_of_prior_teaching_experience: The years_of_prior_teaching_experience of this EdFiStaff.  # noqa: E501
        :type: float
        """

        self._years_of_prior_teaching_experience = years_of_prior_teaching_experience

    @property
    def etag(self):
        """Gets the etag of this EdFiStaff.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStaff.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStaff.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStaff.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStaff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStaff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStaff):
            return True

        return self.to_dict() != other.to_dict()
