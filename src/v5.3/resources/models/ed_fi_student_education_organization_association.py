# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentEducationOrganizationAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'student_reference': 'EdFiStudentReference',
        'addresses': 'list[EdFiStudentEducationOrganizationAssociationAddress]',
        'ancestry_ethnic_origins': 'list[EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin]',
        'barrier_to_internet_access_in_residence_descriptor': 'str',
        'cohort_years': 'list[EdFiStudentEducationOrganizationAssociationCohortYear]',
        'disabilities': 'list[EdFiStudentEducationOrganizationAssociationDisability]',
        'electronic_mails': 'list[EdFiStudentEducationOrganizationAssociationElectronicMail]',
        'hispanic_latino_ethnicity': 'bool',
        'international_addresses': 'list[EdFiStudentEducationOrganizationAssociationInternationalAddress]',
        'internet_access_in_residence': 'bool',
        'internet_access_type_in_residence_descriptor': 'str',
        'internet_performance_in_residence_descriptor': 'str',
        'languages': 'list[EdFiStudentEducationOrganizationAssociationLanguage]',
        'limited_english_proficiency_descriptor': 'str',
        'login_id': 'str',
        'old_ethnicity_descriptor': 'str',
        'primary_learning_device_access_descriptor': 'str',
        'primary_learning_device_away_from_school_descriptor': 'str',
        'primary_learning_device_provider_descriptor': 'str',
        'profile_thumbnail': 'str',
        'program_participations': 'list[EdFiStudentEducationOrganizationAssociationProgramParticipation]',
        'races': 'list[EdFiStudentEducationOrganizationAssociationRace]',
        'sex_descriptor': 'str',
        'student_characteristics': 'list[EdFiStudentEducationOrganizationAssociationStudentCharacteristic]',
        'student_identification_codes': 'list[EdFiStudentEducationOrganizationAssociationStudentIdentificationCode]',
        'student_indicators': 'list[EdFiStudentEducationOrganizationAssociationStudentIndicator]',
        'telephones': 'list[EdFiStudentEducationOrganizationAssociationTelephone]',
        'tribal_affiliations': 'list[EdFiStudentEducationOrganizationAssociationTribalAffiliation]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'education_organization_reference': 'educationOrganizationReference',
        'student_reference': 'studentReference',
        'addresses': 'addresses',
        'ancestry_ethnic_origins': 'ancestryEthnicOrigins',
        'barrier_to_internet_access_in_residence_descriptor': 'barrierToInternetAccessInResidenceDescriptor',
        'cohort_years': 'cohortYears',
        'disabilities': 'disabilities',
        'electronic_mails': 'electronicMails',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'international_addresses': 'internationalAddresses',
        'internet_access_in_residence': 'internetAccessInResidence',
        'internet_access_type_in_residence_descriptor': 'internetAccessTypeInResidenceDescriptor',
        'internet_performance_in_residence_descriptor': 'internetPerformanceInResidenceDescriptor',
        'languages': 'languages',
        'limited_english_proficiency_descriptor': 'limitedEnglishProficiencyDescriptor',
        'login_id': 'loginId',
        'old_ethnicity_descriptor': 'oldEthnicityDescriptor',
        'primary_learning_device_access_descriptor': 'primaryLearningDeviceAccessDescriptor',
        'primary_learning_device_away_from_school_descriptor': 'primaryLearningDeviceAwayFromSchoolDescriptor',
        'primary_learning_device_provider_descriptor': 'primaryLearningDeviceProviderDescriptor',
        'profile_thumbnail': 'profileThumbnail',
        'program_participations': 'programParticipations',
        'races': 'races',
        'sex_descriptor': 'sexDescriptor',
        'student_characteristics': 'studentCharacteristics',
        'student_identification_codes': 'studentIdentificationCodes',
        'student_indicators': 'studentIndicators',
        'telephones': 'telephones',
        'tribal_affiliations': 'tribalAffiliations',
        'etag': '_etag'
    }

    def __init__(self, id=None, education_organization_reference=None, student_reference=None, addresses=None, ancestry_ethnic_origins=None, barrier_to_internet_access_in_residence_descriptor=None, cohort_years=None, disabilities=None, electronic_mails=None, hispanic_latino_ethnicity=None, international_addresses=None, internet_access_in_residence=None, internet_access_type_in_residence_descriptor=None, internet_performance_in_residence_descriptor=None, languages=None, limited_english_proficiency_descriptor=None, login_id=None, old_ethnicity_descriptor=None, primary_learning_device_access_descriptor=None, primary_learning_device_away_from_school_descriptor=None, primary_learning_device_provider_descriptor=None, profile_thumbnail=None, program_participations=None, races=None, sex_descriptor=None, student_characteristics=None, student_identification_codes=None, student_indicators=None, telephones=None, tribal_affiliations=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentEducationOrganizationAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._education_organization_reference = None
        self._student_reference = None
        self._addresses = None
        self._ancestry_ethnic_origins = None
        self._barrier_to_internet_access_in_residence_descriptor = None
        self._cohort_years = None
        self._disabilities = None
        self._electronic_mails = None
        self._hispanic_latino_ethnicity = None
        self._international_addresses = None
        self._internet_access_in_residence = None
        self._internet_access_type_in_residence_descriptor = None
        self._internet_performance_in_residence_descriptor = None
        self._languages = None
        self._limited_english_proficiency_descriptor = None
        self._login_id = None
        self._old_ethnicity_descriptor = None
        self._primary_learning_device_access_descriptor = None
        self._primary_learning_device_away_from_school_descriptor = None
        self._primary_learning_device_provider_descriptor = None
        self._profile_thumbnail = None
        self._program_participations = None
        self._races = None
        self._sex_descriptor = None
        self._student_characteristics = None
        self._student_identification_codes = None
        self._student_indicators = None
        self._telephones = None
        self._tribal_affiliations = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.education_organization_reference = education_organization_reference
        self.student_reference = student_reference
        if addresses is not None:
            self.addresses = addresses
        if ancestry_ethnic_origins is not None:
            self.ancestry_ethnic_origins = ancestry_ethnic_origins
        if barrier_to_internet_access_in_residence_descriptor is not None:
            self.barrier_to_internet_access_in_residence_descriptor = barrier_to_internet_access_in_residence_descriptor
        if cohort_years is not None:
            self.cohort_years = cohort_years
        if disabilities is not None:
            self.disabilities = disabilities
        if electronic_mails is not None:
            self.electronic_mails = electronic_mails
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        if international_addresses is not None:
            self.international_addresses = international_addresses
        if internet_access_in_residence is not None:
            self.internet_access_in_residence = internet_access_in_residence
        if internet_access_type_in_residence_descriptor is not None:
            self.internet_access_type_in_residence_descriptor = internet_access_type_in_residence_descriptor
        if internet_performance_in_residence_descriptor is not None:
            self.internet_performance_in_residence_descriptor = internet_performance_in_residence_descriptor
        if languages is not None:
            self.languages = languages
        if limited_english_proficiency_descriptor is not None:
            self.limited_english_proficiency_descriptor = limited_english_proficiency_descriptor
        if login_id is not None:
            self.login_id = login_id
        if old_ethnicity_descriptor is not None:
            self.old_ethnicity_descriptor = old_ethnicity_descriptor
        if primary_learning_device_access_descriptor is not None:
            self.primary_learning_device_access_descriptor = primary_learning_device_access_descriptor
        if primary_learning_device_away_from_school_descriptor is not None:
            self.primary_learning_device_away_from_school_descriptor = primary_learning_device_away_from_school_descriptor
        if primary_learning_device_provider_descriptor is not None:
            self.primary_learning_device_provider_descriptor = primary_learning_device_provider_descriptor
        if profile_thumbnail is not None:
            self.profile_thumbnail = profile_thumbnail
        if program_participations is not None:
            self.program_participations = program_participations
        if races is not None:
            self.races = races
        self.sex_descriptor = sex_descriptor
        if student_characteristics is not None:
            self.student_characteristics = student_characteristics
        if student_identification_codes is not None:
            self.student_identification_codes = student_identification_codes
        if student_indicators is not None:
            self.student_indicators = student_indicators
        if telephones is not None:
            self.telephones = telephones
        if tribal_affiliations is not None:
            self.tribal_affiliations = tribal_affiliations
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentEducationOrganizationAssociation.

          # noqa: E501

        :param id: The id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501


        :return: The education_organization_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiStudentEducationOrganizationAssociation.


        :param education_organization_reference: The education_organization_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501


        :return: The student_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentEducationOrganizationAssociation.


        :param student_reference: The student_reference of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def addresses(self):
        """Gets the addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.  # noqa: E501

        :return: The addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.  # noqa: E501

        :param addresses: The addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationAddress]
        """

        self._addresses = addresses

    @property
    def ancestry_ethnic_origins(self):
        """Gets the ancestry_ethnic_origins of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.  # noqa: E501

        :return: The ancestry_ethnic_origins of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin]
        """
        return self._ancestry_ethnic_origins

    @ancestry_ethnic_origins.setter
    def ancestry_ethnic_origins(self, ancestry_ethnic_origins):
        """Sets the ancestry_ethnic_origins of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.  # noqa: E501

        :param ancestry_ethnic_origins: The ancestry_ethnic_origins of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationAncestryEthnicOrigin]
        """

        self._ancestry_ethnic_origins = ancestry_ethnic_origins

    @property
    def barrier_to_internet_access_in_residence_descriptor(self):
        """Gets the barrier_to_internet_access_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication of the barrier to having internet access in the student s primary place of residence.  # noqa: E501

        :return: The barrier_to_internet_access_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._barrier_to_internet_access_in_residence_descriptor

    @barrier_to_internet_access_in_residence_descriptor.setter
    def barrier_to_internet_access_in_residence_descriptor(self, barrier_to_internet_access_in_residence_descriptor):
        """Sets the barrier_to_internet_access_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.

        An indication of the barrier to having internet access in the student s primary place of residence.  # noqa: E501

        :param barrier_to_internet_access_in_residence_descriptor: The barrier_to_internet_access_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                barrier_to_internet_access_in_residence_descriptor is not None and len(barrier_to_internet_access_in_residence_descriptor) > 306):
            raise ValueError("Invalid value for `barrier_to_internet_access_in_residence_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._barrier_to_internet_access_in_residence_descriptor = barrier_to_internet_access_in_residence_descriptor

    @property
    def cohort_years(self):
        """Gets the cohort_years of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.  # noqa: E501

        :return: The cohort_years of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationCohortYear]
        """
        return self._cohort_years

    @cohort_years.setter
    def cohort_years(self, cohort_years):
        """Sets the cohort_years of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.  # noqa: E501

        :param cohort_years: The cohort_years of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationCohortYear]
        """

        self._cohort_years = cohort_years

    @property
    def disabilities(self):
        """Gets the disabilities of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual's impairment, as determined by evaluation(s) conducted by the education organization.  # noqa: E501

        :return: The disabilities of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationDisability]
        """
        return self._disabilities

    @disabilities.setter
    def disabilities(self, disabilities):
        """Sets the disabilities of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual's impairment, as determined by evaluation(s) conducted by the education organization.  # noqa: E501

        :param disabilities: The disabilities of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationDisability]
        """

        self._disabilities = disabilities

    @property
    def electronic_mails(self):
        """Gets the electronic_mails of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :return: The electronic_mails of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationElectronicMail]
        """
        return self._electronic_mails

    @electronic_mails.setter
    def electronic_mails(self, electronic_mails):
        """Sets the electronic_mails of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.  # noqa: E501

        :param electronic_mails: The electronic_mails of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationElectronicMail]
        """

        self._electronic_mails = electronic_mails

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :return: The hispanic_latino_ethnicity of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this EdFiStudentEducationOrganizationAssociation.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def international_addresses(self):
        """Gets the international_addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address.  # noqa: E501

        :return: The international_addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationInternationalAddress]
        """
        return self._international_addresses

    @international_addresses.setter
    def international_addresses(self, international_addresses):
        """Sets the international_addresses of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address.  # noqa: E501

        :param international_addresses: The international_addresses of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationInternationalAddress]
        """

        self._international_addresses = international_addresses

    @property
    def internet_access_in_residence(self):
        """Gets the internet_access_in_residence of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication of whether the student is able to access the internet in their primary place of residence.  # noqa: E501

        :return: The internet_access_in_residence of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._internet_access_in_residence

    @internet_access_in_residence.setter
    def internet_access_in_residence(self, internet_access_in_residence):
        """Sets the internet_access_in_residence of this EdFiStudentEducationOrganizationAssociation.

        An indication of whether the student is able to access the internet in their primary place of residence.  # noqa: E501

        :param internet_access_in_residence: The internet_access_in_residence of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: bool
        """

        self._internet_access_in_residence = internet_access_in_residence

    @property
    def internet_access_type_in_residence_descriptor(self):
        """Gets the internet_access_type_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        The primary type of internet service used in the student s primary place of residence.  # noqa: E501

        :return: The internet_access_type_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._internet_access_type_in_residence_descriptor

    @internet_access_type_in_residence_descriptor.setter
    def internet_access_type_in_residence_descriptor(self, internet_access_type_in_residence_descriptor):
        """Sets the internet_access_type_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.

        The primary type of internet service used in the student s primary place of residence.  # noqa: E501

        :param internet_access_type_in_residence_descriptor: The internet_access_type_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                internet_access_type_in_residence_descriptor is not None and len(internet_access_type_in_residence_descriptor) > 306):
            raise ValueError("Invalid value for `internet_access_type_in_residence_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._internet_access_type_in_residence_descriptor = internet_access_type_in_residence_descriptor

    @property
    def internet_performance_in_residence_descriptor(self):
        """Gets the internet_performance_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence.  # noqa: E501

        :return: The internet_performance_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._internet_performance_in_residence_descriptor

    @internet_performance_in_residence_descriptor.setter
    def internet_performance_in_residence_descriptor(self, internet_performance_in_residence_descriptor):
        """Sets the internet_performance_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.

        An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence.  # noqa: E501

        :param internet_performance_in_residence_descriptor: The internet_performance_in_residence_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                internet_performance_in_residence_descriptor is not None and len(internet_performance_in_residence_descriptor) > 306):
            raise ValueError("Invalid value for `internet_performance_in_residence_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._internet_performance_in_residence_descriptor = internet_performance_in_residence_descriptor

    @property
    def languages(self):
        """Gets the languages of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.  # noqa: E501

        :return: The languages of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.  # noqa: E501

        :param languages: The languages of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationLanguage]
        """

        self._languages = languages

    @property
    def limited_english_proficiency_descriptor(self):
        """Gets the limited_english_proficiency_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.  # noqa: E501

        :return: The limited_english_proficiency_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._limited_english_proficiency_descriptor

    @limited_english_proficiency_descriptor.setter
    def limited_english_proficiency_descriptor(self, limited_english_proficiency_descriptor):
        """Sets the limited_english_proficiency_descriptor of this EdFiStudentEducationOrganizationAssociation.

        An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.  # noqa: E501

        :param limited_english_proficiency_descriptor: The limited_english_proficiency_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                limited_english_proficiency_descriptor is not None and len(limited_english_proficiency_descriptor) > 306):
            raise ValueError("Invalid value for `limited_english_proficiency_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._limited_english_proficiency_descriptor = limited_english_proficiency_descriptor

    @property
    def login_id(self):
        """Gets the login_id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        The login ID for the user; used for security access control interface.  # noqa: E501

        :return: The login_id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this EdFiStudentEducationOrganizationAssociation.

        The login ID for the user; used for security access control interface.  # noqa: E501

        :param login_id: The login_id of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                login_id is not None and len(login_id) > 60):
            raise ValueError("Invalid value for `login_id`, length must be less than or equal to `60`")  # noqa: E501

        self._login_id = login_id

    @property
    def old_ethnicity_descriptor(self):
        """Gets the old_ethnicity_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.  # noqa: E501

        :return: The old_ethnicity_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._old_ethnicity_descriptor

    @old_ethnicity_descriptor.setter
    def old_ethnicity_descriptor(self, old_ethnicity_descriptor):
        """Sets the old_ethnicity_descriptor of this EdFiStudentEducationOrganizationAssociation.

        Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.  # noqa: E501

        :param old_ethnicity_descriptor: The old_ethnicity_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                old_ethnicity_descriptor is not None and len(old_ethnicity_descriptor) > 306):
            raise ValueError("Invalid value for `old_ethnicity_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._old_ethnicity_descriptor = old_ethnicity_descriptor

    @property
    def primary_learning_device_access_descriptor(self):
        """Gets the primary_learning_device_access_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An indication of whether the primary learning device is shared or not shared with another individual.  # noqa: E501

        :return: The primary_learning_device_access_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._primary_learning_device_access_descriptor

    @primary_learning_device_access_descriptor.setter
    def primary_learning_device_access_descriptor(self, primary_learning_device_access_descriptor):
        """Sets the primary_learning_device_access_descriptor of this EdFiStudentEducationOrganizationAssociation.

        An indication of whether the primary learning device is shared or not shared with another individual.  # noqa: E501

        :param primary_learning_device_access_descriptor: The primary_learning_device_access_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                primary_learning_device_access_descriptor is not None and len(primary_learning_device_access_descriptor) > 306):
            raise ValueError("Invalid value for `primary_learning_device_access_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._primary_learning_device_access_descriptor = primary_learning_device_access_descriptor

    @property
    def primary_learning_device_away_from_school_descriptor(self):
        """Gets the primary_learning_device_away_from_school_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        The type of device the student uses most often to complete learning activities away from school.  # noqa: E501

        :return: The primary_learning_device_away_from_school_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._primary_learning_device_away_from_school_descriptor

    @primary_learning_device_away_from_school_descriptor.setter
    def primary_learning_device_away_from_school_descriptor(self, primary_learning_device_away_from_school_descriptor):
        """Sets the primary_learning_device_away_from_school_descriptor of this EdFiStudentEducationOrganizationAssociation.

        The type of device the student uses most often to complete learning activities away from school.  # noqa: E501

        :param primary_learning_device_away_from_school_descriptor: The primary_learning_device_away_from_school_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                primary_learning_device_away_from_school_descriptor is not None and len(primary_learning_device_away_from_school_descriptor) > 306):
            raise ValueError("Invalid value for `primary_learning_device_away_from_school_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._primary_learning_device_away_from_school_descriptor = primary_learning_device_away_from_school_descriptor

    @property
    def primary_learning_device_provider_descriptor(self):
        """Gets the primary_learning_device_provider_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        The provider of the primary learning device.  # noqa: E501

        :return: The primary_learning_device_provider_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._primary_learning_device_provider_descriptor

    @primary_learning_device_provider_descriptor.setter
    def primary_learning_device_provider_descriptor(self, primary_learning_device_provider_descriptor):
        """Sets the primary_learning_device_provider_descriptor of this EdFiStudentEducationOrganizationAssociation.

        The provider of the primary learning device.  # noqa: E501

        :param primary_learning_device_provider_descriptor: The primary_learning_device_provider_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                primary_learning_device_provider_descriptor is not None and len(primary_learning_device_provider_descriptor) > 306):
            raise ValueError("Invalid value for `primary_learning_device_provider_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._primary_learning_device_provider_descriptor = primary_learning_device_provider_descriptor

    @property
    def profile_thumbnail(self):
        """Gets the profile_thumbnail of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        Locator reference for the student photo. The specification for that reference is left to local definition.  # noqa: E501

        :return: The profile_thumbnail of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._profile_thumbnail

    @profile_thumbnail.setter
    def profile_thumbnail(self, profile_thumbnail):
        """Sets the profile_thumbnail of this EdFiStudentEducationOrganizationAssociation.

        Locator reference for the student photo. The specification for that reference is left to local definition.  # noqa: E501

        :param profile_thumbnail: The profile_thumbnail of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                profile_thumbnail is not None and len(profile_thumbnail) > 255):
            raise ValueError("Invalid value for `profile_thumbnail`, length must be less than or equal to `255`")  # noqa: E501

        self._profile_thumbnail = profile_thumbnail

    @property
    def program_participations(self):
        """Gets the program_participations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationProgramParticipations. Key programs the student is participating in or receives services from.  # noqa: E501

        :return: The program_participations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationProgramParticipation]
        """
        return self._program_participations

    @program_participations.setter
    def program_participations(self, program_participations):
        """Sets the program_participations of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationProgramParticipations. Key programs the student is participating in or receives services from.  # noqa: E501

        :param program_participations: The program_participations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationProgramParticipation]
        """

        self._program_participations = program_participations

    @property
    def races(self):
        """Gets the races of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies as last reported to the education organization. The data model allows for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :return: The races of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies as last reported to the education organization. The data model allows for multiple entries so that each individual can specify all appropriate races.  # noqa: E501

        :param races: The races of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationRace]
        """

        self._races = races

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        The student's gender as last reported to the education organization.  # noqa: E501

        :return: The sex_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this EdFiStudentEducationOrganizationAssociation.

        The student's gender as last reported to the education organization.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sex_descriptor is None:
            raise ValueError("Invalid value for `sex_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def student_characteristics(self):
        """Gets the student_characteristics of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of a student. If a student has a characteristic present, that characteristic is considered true or active for that student. If a characteristic is not present, no assumption is made as to the applicability of the characteristic, but local policy may dictate otherwise.  # noqa: E501

        :return: The student_characteristics of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationStudentCharacteristic]
        """
        return self._student_characteristics

    @student_characteristics.setter
    def student_characteristics(self, student_characteristics):
        """Sets the student_characteristics of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of a student. If a student has a characteristic present, that characteristic is considered true or active for that student. If a characteristic is not present, no assumption is made as to the applicability of the characteristic, but local policy may dictate otherwise.  # noqa: E501

        :param student_characteristics: The student_characteristics of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationStudentCharacteristic]
        """

        self._student_characteristics = student_characteristics

    @property
    def student_identification_codes(self):
        """Gets the student_identification_codes of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.  # noqa: E501

        :return: The student_identification_codes of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationStudentIdentificationCode]
        """
        return self._student_identification_codes

    @student_identification_codes.setter
    def student_identification_codes(self, student_identification_codes):
        """Sets the student_identification_codes of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.  # noqa: E501

        :param student_identification_codes: The student_identification_codes of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationStudentIdentificationCode]
        """

        self._student_identification_codes = student_identification_codes

    @property
    def student_indicators(self):
        """Gets the student_indicators of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationStudentIndicators. An indicator or metric computed for the student (e.g., at risk).  # noqa: E501

        :return: The student_indicators of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationStudentIndicator]
        """
        return self._student_indicators

    @student_indicators.setter
    def student_indicators(self, student_indicators):
        """Sets the student_indicators of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationStudentIndicators. An indicator or metric computed for the student (e.g., at risk).  # noqa: E501

        :param student_indicators: The student_indicators of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationStudentIndicator]
        """

        self._student_indicators = student_indicators

    @property
    def telephones(self):
        """Gets the telephones of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :return: The telephones of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationTelephone]
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person.  # noqa: E501

        :param telephones: The telephones of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationTelephone]
        """

        self._telephones = telephones

    @property
    def tribal_affiliations(self):
        """Gets the tribal_affiliations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated as last reported to the education organization.  # noqa: E501

        :return: The tribal_affiliations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[EdFiStudentEducationOrganizationAssociationTribalAffiliation]
        """
        return self._tribal_affiliations

    @tribal_affiliations.setter
    def tribal_affiliations(self, tribal_affiliations):
        """Sets the tribal_affiliations of this EdFiStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated as last reported to the education organization.  # noqa: E501

        :param tribal_affiliations: The tribal_affiliations of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[EdFiStudentEducationOrganizationAssociationTribalAffiliation]
        """

        self._tribal_affiliations = tribal_affiliations

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentEducationOrganizationAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentEducationOrganizationAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentEducationOrganizationAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentEducationOrganizationAssociation):
            return True

        return self.to_dict() != other.to_dict()
