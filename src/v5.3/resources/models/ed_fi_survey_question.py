# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiSurveyQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'question_code': 'str',
        'survey_reference': 'EdFiSurveyReference',
        'survey_section_reference': 'EdFiSurveySectionReference',
        'matrices': 'list[EdFiSurveyQuestionMatrix]',
        'question_form_descriptor': 'str',
        'question_text': 'str',
        'response_choices': 'list[EdFiSurveyQuestionResponseChoice]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'question_code': 'questionCode',
        'survey_reference': 'surveyReference',
        'survey_section_reference': 'surveySectionReference',
        'matrices': 'matrices',
        'question_form_descriptor': 'questionFormDescriptor',
        'question_text': 'questionText',
        'response_choices': 'responseChoices',
        'etag': '_etag'
    }

    def __init__(self, id=None, question_code=None, survey_reference=None, survey_section_reference=None, matrices=None, question_form_descriptor=None, question_text=None, response_choices=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiSurveyQuestion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._question_code = None
        self._survey_reference = None
        self._survey_section_reference = None
        self._matrices = None
        self._question_form_descriptor = None
        self._question_text = None
        self._response_choices = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.question_code = question_code
        self.survey_reference = survey_reference
        if survey_section_reference is not None:
            self.survey_section_reference = survey_section_reference
        if matrices is not None:
            self.matrices = matrices
        self.question_form_descriptor = question_form_descriptor
        self.question_text = question_text
        if response_choices is not None:
            self.response_choices = response_choices
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiSurveyQuestion.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiSurveyQuestion.

          # noqa: E501

        :param id: The id of this EdFiSurveyQuestion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def question_code(self):
        """Gets the question_code of this EdFiSurveyQuestion.  # noqa: E501

        The identifying code for the question, unique for the survey.  # noqa: E501

        :return: The question_code of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_code

    @question_code.setter
    def question_code(self, question_code):
        """Sets the question_code of this EdFiSurveyQuestion.

        The identifying code for the question, unique for the survey.  # noqa: E501

        :param question_code: The question_code of this EdFiSurveyQuestion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and question_code is None:
            raise ValueError("Invalid value for `question_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                question_code is not None and len(question_code) > 60):
            raise ValueError("Invalid value for `question_code`, length must be less than or equal to `60`")  # noqa: E501

        self._question_code = question_code

    @property
    def survey_reference(self):
        """Gets the survey_reference of this EdFiSurveyQuestion.  # noqa: E501


        :return: The survey_reference of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: EdFiSurveyReference
        """
        return self._survey_reference

    @survey_reference.setter
    def survey_reference(self, survey_reference):
        """Sets the survey_reference of this EdFiSurveyQuestion.


        :param survey_reference: The survey_reference of this EdFiSurveyQuestion.  # noqa: E501
        :type: EdFiSurveyReference
        """
        if self._configuration.client_side_validation and survey_reference is None:
            raise ValueError("Invalid value for `survey_reference`, must not be `None`")  # noqa: E501

        self._survey_reference = survey_reference

    @property
    def survey_section_reference(self):
        """Gets the survey_section_reference of this EdFiSurveyQuestion.  # noqa: E501


        :return: The survey_section_reference of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: EdFiSurveySectionReference
        """
        return self._survey_section_reference

    @survey_section_reference.setter
    def survey_section_reference(self, survey_section_reference):
        """Sets the survey_section_reference of this EdFiSurveyQuestion.


        :param survey_section_reference: The survey_section_reference of this EdFiSurveyQuestion.  # noqa: E501
        :type: EdFiSurveySectionReference
        """

        self._survey_section_reference = survey_section_reference

    @property
    def matrices(self):
        """Gets the matrices of this EdFiSurveyQuestion.  # noqa: E501

        An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.  # noqa: E501

        :return: The matrices of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: list[EdFiSurveyQuestionMatrix]
        """
        return self._matrices

    @matrices.setter
    def matrices(self, matrices):
        """Sets the matrices of this EdFiSurveyQuestion.

        An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.  # noqa: E501

        :param matrices: The matrices of this EdFiSurveyQuestion.  # noqa: E501
        :type: list[EdFiSurveyQuestionMatrix]
        """

        self._matrices = matrices

    @property
    def question_form_descriptor(self):
        """Gets the question_form_descriptor of this EdFiSurveyQuestion.  # noqa: E501

        The form or type of question.  # noqa: E501

        :return: The question_form_descriptor of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_form_descriptor

    @question_form_descriptor.setter
    def question_form_descriptor(self, question_form_descriptor):
        """Sets the question_form_descriptor of this EdFiSurveyQuestion.

        The form or type of question.  # noqa: E501

        :param question_form_descriptor: The question_form_descriptor of this EdFiSurveyQuestion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and question_form_descriptor is None:
            raise ValueError("Invalid value for `question_form_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                question_form_descriptor is not None and len(question_form_descriptor) > 306):
            raise ValueError("Invalid value for `question_form_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._question_form_descriptor = question_form_descriptor

    @property
    def question_text(self):
        """Gets the question_text of this EdFiSurveyQuestion.  # noqa: E501

        The text of the question.  # noqa: E501

        :return: The question_text of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this EdFiSurveyQuestion.

        The text of the question.  # noqa: E501

        :param question_text: The question_text of this EdFiSurveyQuestion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                question_text is not None and len(question_text) > 1024):
            raise ValueError("Invalid value for `question_text`, length must be less than or equal to `1024`")  # noqa: E501

        self._question_text = question_text

    @property
    def response_choices(self):
        """Gets the response_choices of this EdFiSurveyQuestion.  # noqa: E501

        An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.  # noqa: E501

        :return: The response_choices of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: list[EdFiSurveyQuestionResponseChoice]
        """
        return self._response_choices

    @response_choices.setter
    def response_choices(self, response_choices):
        """Sets the response_choices of this EdFiSurveyQuestion.

        An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.  # noqa: E501

        :param response_choices: The response_choices of this EdFiSurveyQuestion.  # noqa: E501
        :type: list[EdFiSurveyQuestionResponseChoice]
        """

        self._response_choices = response_choices

    @property
    def etag(self):
        """Gets the etag of this EdFiSurveyQuestion.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiSurveyQuestion.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiSurveyQuestion.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiSurveyQuestion.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiSurveyQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiSurveyQuestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiSurveyQuestion):
            return True

        return self.to_dict() != other.to_dict()
