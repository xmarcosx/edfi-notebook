# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStaffEducationOrganizationAssignmentAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'begin_date': 'date',
        'staff_classification_descriptor': 'str',
        'credential_reference': 'EdFiCredentialReference',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'employment_staff_education_organization_employment_association_reference': 'EdFiStaffEducationOrganizationEmploymentAssociationReference',
        'staff_reference': 'EdFiStaffReference',
        'end_date': 'date',
        'full_time_equivalency': 'float',
        'order_of_assignment': 'int',
        'position_title': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'begin_date': 'beginDate',
        'staff_classification_descriptor': 'staffClassificationDescriptor',
        'credential_reference': 'credentialReference',
        'education_organization_reference': 'educationOrganizationReference',
        'employment_staff_education_organization_employment_association_reference': 'employmentStaffEducationOrganizationEmploymentAssociationReference',
        'staff_reference': 'staffReference',
        'end_date': 'endDate',
        'full_time_equivalency': 'fullTimeEquivalency',
        'order_of_assignment': 'orderOfAssignment',
        'position_title': 'positionTitle',
        'etag': '_etag'
    }

    def __init__(self, id=None, begin_date=None, staff_classification_descriptor=None, credential_reference=None, education_organization_reference=None, employment_staff_education_organization_employment_association_reference=None, staff_reference=None, end_date=None, full_time_equivalency=None, order_of_assignment=None, position_title=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStaffEducationOrganizationAssignmentAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._begin_date = None
        self._staff_classification_descriptor = None
        self._credential_reference = None
        self._education_organization_reference = None
        self._employment_staff_education_organization_employment_association_reference = None
        self._staff_reference = None
        self._end_date = None
        self._full_time_equivalency = None
        self._order_of_assignment = None
        self._position_title = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.begin_date = begin_date
        self.staff_classification_descriptor = staff_classification_descriptor
        if credential_reference is not None:
            self.credential_reference = credential_reference
        self.education_organization_reference = education_organization_reference
        if employment_staff_education_organization_employment_association_reference is not None:
            self.employment_staff_education_organization_employment_association_reference = employment_staff_education_organization_employment_association_reference
        self.staff_reference = staff_reference
        if end_date is not None:
            self.end_date = end_date
        if full_time_equivalency is not None:
            self.full_time_equivalency = full_time_equivalency
        if order_of_assignment is not None:
            self.order_of_assignment = order_of_assignment
        if position_title is not None:
            self.position_title = position_title
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStaffEducationOrganizationAssignmentAssociation.

          # noqa: E501

        :param id: The id of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def begin_date(self):
        """Gets the begin_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        Month, day, and year of the start or effective date of a staff member's employment, contract, or relationship with the education organization.  # noqa: E501

        :return: The begin_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EdFiStaffEducationOrganizationAssignmentAssociation.

        Month, day, and year of the start or effective date of a staff member's employment, contract, or relationship with the education organization.  # noqa: E501

        :param begin_date: The begin_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def staff_classification_descriptor(self):
        """Gets the staff_classification_descriptor of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        The titles of employment, official status, or rank of education staff.  # noqa: E501

        :return: The staff_classification_descriptor of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: str
        """
        return self._staff_classification_descriptor

    @staff_classification_descriptor.setter
    def staff_classification_descriptor(self, staff_classification_descriptor):
        """Sets the staff_classification_descriptor of this EdFiStaffEducationOrganizationAssignmentAssociation.

        The titles of employment, official status, or rank of education staff.  # noqa: E501

        :param staff_classification_descriptor: The staff_classification_descriptor of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and staff_classification_descriptor is None:
            raise ValueError("Invalid value for `staff_classification_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                staff_classification_descriptor is not None and len(staff_classification_descriptor) > 306):
            raise ValueError("Invalid value for `staff_classification_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._staff_classification_descriptor = staff_classification_descriptor

    @property
    def credential_reference(self):
        """Gets the credential_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501


        :return: The credential_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: EdFiCredentialReference
        """
        return self._credential_reference

    @credential_reference.setter
    def credential_reference(self, credential_reference):
        """Sets the credential_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.


        :param credential_reference: The credential_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: EdFiCredentialReference
        """

        self._credential_reference = credential_reference

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501


        :return: The education_organization_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.


        :param education_organization_reference: The education_organization_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def employment_staff_education_organization_employment_association_reference(self):
        """Gets the employment_staff_education_organization_employment_association_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501


        :return: The employment_staff_education_organization_employment_association_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: EdFiStaffEducationOrganizationEmploymentAssociationReference
        """
        return self._employment_staff_education_organization_employment_association_reference

    @employment_staff_education_organization_employment_association_reference.setter
    def employment_staff_education_organization_employment_association_reference(self, employment_staff_education_organization_employment_association_reference):
        """Sets the employment_staff_education_organization_employment_association_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.


        :param employment_staff_education_organization_employment_association_reference: The employment_staff_education_organization_employment_association_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: EdFiStaffEducationOrganizationEmploymentAssociationReference
        """

        self._employment_staff_education_organization_employment_association_reference = employment_staff_education_organization_employment_association_reference

    @property
    def staff_reference(self):
        """Gets the staff_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501


        :return: The staff_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: EdFiStaffReference
        """
        return self._staff_reference

    @staff_reference.setter
    def staff_reference(self, staff_reference):
        """Sets the staff_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.


        :param staff_reference: The staff_reference of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: EdFiStaffReference
        """
        if self._configuration.client_side_validation and staff_reference is None:
            raise ValueError("Invalid value for `staff_reference`, must not be `None`")  # noqa: E501

        self._staff_reference = staff_reference

    @property
    def end_date(self):
        """Gets the end_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        Month, day, and year of the end or termination date of a staff member's employment, contract, or relationship with the education organization.  # noqa: E501

        :return: The end_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EdFiStaffEducationOrganizationAssignmentAssociation.

        Month, day, and year of the end or termination date of a staff member's employment, contract, or relationship with the education organization.  # noqa: E501

        :param end_date: The end_date of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def full_time_equivalency(self):
        """Gets the full_time_equivalency of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.  # noqa: E501

        :return: The full_time_equivalency of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: float
        """
        return self._full_time_equivalency

    @full_time_equivalency.setter
    def full_time_equivalency(self, full_time_equivalency):
        """Sets the full_time_equivalency of this EdFiStaffEducationOrganizationAssignmentAssociation.

        The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.  # noqa: E501

        :param full_time_equivalency: The full_time_equivalency of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: float
        """

        self._full_time_equivalency = full_time_equivalency

    @property
    def order_of_assignment(self):
        """Gets the order_of_assignment of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        Describes whether the assignment is this the staff member's primary assignment, secondary assignment, etc.  # noqa: E501

        :return: The order_of_assignment of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: int
        """
        return self._order_of_assignment

    @order_of_assignment.setter
    def order_of_assignment(self, order_of_assignment):
        """Sets the order_of_assignment of this EdFiStaffEducationOrganizationAssignmentAssociation.

        Describes whether the assignment is this the staff member's primary assignment, secondary assignment, etc.  # noqa: E501

        :param order_of_assignment: The order_of_assignment of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: int
        """

        self._order_of_assignment = order_of_assignment

    @property
    def position_title(self):
        """Gets the position_title of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        The descriptive name of an individual's position.  # noqa: E501

        :return: The position_title of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: str
        """
        return self._position_title

    @position_title.setter
    def position_title(self, position_title):
        """Sets the position_title of this EdFiStaffEducationOrganizationAssignmentAssociation.

        The descriptive name of an individual's position.  # noqa: E501

        :param position_title: The position_title of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                position_title is not None and len(position_title) > 100):
            raise ValueError("Invalid value for `position_title`, length must be less than or equal to `100`")  # noqa: E501

        self._position_title = position_title

    @property
    def etag(self):
        """Gets the etag of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStaffEducationOrganizationAssignmentAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStaffEducationOrganizationAssignmentAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStaffEducationOrganizationAssignmentAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStaffEducationOrganizationAssignmentAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStaffEducationOrganizationAssignmentAssociation):
            return True

        return self.to_dict() != other.to_dict()
