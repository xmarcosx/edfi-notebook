# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmEvaluationRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'evaluation_date': 'datetime',
        'evaluation_reference': 'TpdmEvaluationReference',
        'performance_evaluation_rating_reference': 'TpdmPerformanceEvaluationRatingReference',
        'section_reference': 'EdFiSectionReference',
        'evaluation_rating_level_descriptor': 'str',
        'evaluation_rating_status_descriptor': 'str',
        'results': 'list[TpdmEvaluationRatingResult]',
        'reviewers': 'list[TpdmEvaluationRatingReviewer]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'evaluation_date': 'evaluationDate',
        'evaluation_reference': 'evaluationReference',
        'performance_evaluation_rating_reference': 'performanceEvaluationRatingReference',
        'section_reference': 'sectionReference',
        'evaluation_rating_level_descriptor': 'evaluationRatingLevelDescriptor',
        'evaluation_rating_status_descriptor': 'evaluationRatingStatusDescriptor',
        'results': 'results',
        'reviewers': 'reviewers',
        'etag': '_etag'
    }

    def __init__(self, id=None, evaluation_date=None, evaluation_reference=None, performance_evaluation_rating_reference=None, section_reference=None, evaluation_rating_level_descriptor=None, evaluation_rating_status_descriptor=None, results=None, reviewers=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmEvaluationRating - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._evaluation_date = None
        self._evaluation_reference = None
        self._performance_evaluation_rating_reference = None
        self._section_reference = None
        self._evaluation_rating_level_descriptor = None
        self._evaluation_rating_status_descriptor = None
        self._results = None
        self._reviewers = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.evaluation_date = evaluation_date
        self.evaluation_reference = evaluation_reference
        self.performance_evaluation_rating_reference = performance_evaluation_rating_reference
        if section_reference is not None:
            self.section_reference = section_reference
        if evaluation_rating_level_descriptor is not None:
            self.evaluation_rating_level_descriptor = evaluation_rating_level_descriptor
        if evaluation_rating_status_descriptor is not None:
            self.evaluation_rating_status_descriptor = evaluation_rating_status_descriptor
        if results is not None:
            self.results = results
        if reviewers is not None:
            self.reviewers = reviewers
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmEvaluationRating.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmEvaluationRating.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmEvaluationRating.

          # noqa: E501

        :param id: The id of this TpdmEvaluationRating.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def evaluation_date(self):
        """Gets the evaluation_date of this TpdmEvaluationRating.  # noqa: E501

        The date for the person's evaluation.  # noqa: E501

        :return: The evaluation_date of this TpdmEvaluationRating.  # noqa: E501
        :rtype: datetime
        """
        return self._evaluation_date

    @evaluation_date.setter
    def evaluation_date(self, evaluation_date):
        """Sets the evaluation_date of this TpdmEvaluationRating.

        The date for the person's evaluation.  # noqa: E501

        :param evaluation_date: The evaluation_date of this TpdmEvaluationRating.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and evaluation_date is None:
            raise ValueError("Invalid value for `evaluation_date`, must not be `None`")  # noqa: E501

        self._evaluation_date = evaluation_date

    @property
    def evaluation_reference(self):
        """Gets the evaluation_reference of this TpdmEvaluationRating.  # noqa: E501


        :return: The evaluation_reference of this TpdmEvaluationRating.  # noqa: E501
        :rtype: TpdmEvaluationReference
        """
        return self._evaluation_reference

    @evaluation_reference.setter
    def evaluation_reference(self, evaluation_reference):
        """Sets the evaluation_reference of this TpdmEvaluationRating.


        :param evaluation_reference: The evaluation_reference of this TpdmEvaluationRating.  # noqa: E501
        :type: TpdmEvaluationReference
        """
        if self._configuration.client_side_validation and evaluation_reference is None:
            raise ValueError("Invalid value for `evaluation_reference`, must not be `None`")  # noqa: E501

        self._evaluation_reference = evaluation_reference

    @property
    def performance_evaluation_rating_reference(self):
        """Gets the performance_evaluation_rating_reference of this TpdmEvaluationRating.  # noqa: E501


        :return: The performance_evaluation_rating_reference of this TpdmEvaluationRating.  # noqa: E501
        :rtype: TpdmPerformanceEvaluationRatingReference
        """
        return self._performance_evaluation_rating_reference

    @performance_evaluation_rating_reference.setter
    def performance_evaluation_rating_reference(self, performance_evaluation_rating_reference):
        """Sets the performance_evaluation_rating_reference of this TpdmEvaluationRating.


        :param performance_evaluation_rating_reference: The performance_evaluation_rating_reference of this TpdmEvaluationRating.  # noqa: E501
        :type: TpdmPerformanceEvaluationRatingReference
        """
        if self._configuration.client_side_validation and performance_evaluation_rating_reference is None:
            raise ValueError("Invalid value for `performance_evaluation_rating_reference`, must not be `None`")  # noqa: E501

        self._performance_evaluation_rating_reference = performance_evaluation_rating_reference

    @property
    def section_reference(self):
        """Gets the section_reference of this TpdmEvaluationRating.  # noqa: E501


        :return: The section_reference of this TpdmEvaluationRating.  # noqa: E501
        :rtype: EdFiSectionReference
        """
        return self._section_reference

    @section_reference.setter
    def section_reference(self, section_reference):
        """Sets the section_reference of this TpdmEvaluationRating.


        :param section_reference: The section_reference of this TpdmEvaluationRating.  # noqa: E501
        :type: EdFiSectionReference
        """

        self._section_reference = section_reference

    @property
    def evaluation_rating_level_descriptor(self):
        """Gets the evaluation_rating_level_descriptor of this TpdmEvaluationRating.  # noqa: E501

        The rating level achieved based upon the rating or score.  # noqa: E501

        :return: The evaluation_rating_level_descriptor of this TpdmEvaluationRating.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_rating_level_descriptor

    @evaluation_rating_level_descriptor.setter
    def evaluation_rating_level_descriptor(self, evaluation_rating_level_descriptor):
        """Sets the evaluation_rating_level_descriptor of this TpdmEvaluationRating.

        The rating level achieved based upon the rating or score.  # noqa: E501

        :param evaluation_rating_level_descriptor: The evaluation_rating_level_descriptor of this TpdmEvaluationRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evaluation_rating_level_descriptor is not None and len(evaluation_rating_level_descriptor) > 306):
            raise ValueError("Invalid value for `evaluation_rating_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._evaluation_rating_level_descriptor = evaluation_rating_level_descriptor

    @property
    def evaluation_rating_status_descriptor(self):
        """Gets the evaluation_rating_status_descriptor of this TpdmEvaluationRating.  # noqa: E501

        The Status of the poerformance evaluation.  # noqa: E501

        :return: The evaluation_rating_status_descriptor of this TpdmEvaluationRating.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_rating_status_descriptor

    @evaluation_rating_status_descriptor.setter
    def evaluation_rating_status_descriptor(self, evaluation_rating_status_descriptor):
        """Sets the evaluation_rating_status_descriptor of this TpdmEvaluationRating.

        The Status of the poerformance evaluation.  # noqa: E501

        :param evaluation_rating_status_descriptor: The evaluation_rating_status_descriptor of this TpdmEvaluationRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evaluation_rating_status_descriptor is not None and len(evaluation_rating_status_descriptor) > 306):
            raise ValueError("Invalid value for `evaluation_rating_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._evaluation_rating_status_descriptor = evaluation_rating_status_descriptor

    @property
    def results(self):
        """Gets the results of this TpdmEvaluationRating.  # noqa: E501

        An unordered collection of evaluationRatingResults. The numerical summary rating or score for the evaluation.  # noqa: E501

        :return: The results of this TpdmEvaluationRating.  # noqa: E501
        :rtype: list[TpdmEvaluationRatingResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this TpdmEvaluationRating.

        An unordered collection of evaluationRatingResults. The numerical summary rating or score for the evaluation.  # noqa: E501

        :param results: The results of this TpdmEvaluationRating.  # noqa: E501
        :type: list[TpdmEvaluationRatingResult]
        """

        self._results = results

    @property
    def reviewers(self):
        """Gets the reviewers of this TpdmEvaluationRating.  # noqa: E501

        An unordered collection of evaluationRatingReviewers. The person(s) that conducted the performance evaluation.  # noqa: E501

        :return: The reviewers of this TpdmEvaluationRating.  # noqa: E501
        :rtype: list[TpdmEvaluationRatingReviewer]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this TpdmEvaluationRating.

        An unordered collection of evaluationRatingReviewers. The person(s) that conducted the performance evaluation.  # noqa: E501

        :param reviewers: The reviewers of this TpdmEvaluationRating.  # noqa: E501
        :type: list[TpdmEvaluationRatingReviewer]
        """

        self._reviewers = reviewers

    @property
    def etag(self):
        """Gets the etag of this TpdmEvaluationRating.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmEvaluationRating.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmEvaluationRating.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmEvaluationRating.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmEvaluationRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmEvaluationRating):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmEvaluationRating):
            return True

        return self.to_dict() != other.to_dict()
