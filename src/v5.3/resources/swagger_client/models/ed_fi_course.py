# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCourse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'course_code': 'str',
        'identification_codes': 'list[EdFiCourseIdentificationCode]',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'academic_subject_descriptor': 'str',
        'career_pathway_descriptor': 'str',
        'competency_levels': 'list[EdFiCourseCompetencyLevel]',
        'course_defined_by_descriptor': 'str',
        'course_description': 'str',
        'course_gpa_applicability_descriptor': 'str',
        'course_title': 'str',
        'date_course_adopted': 'date',
        'high_school_course_requirement': 'bool',
        'learning_objectives': 'list[EdFiCourseLearningObjective]',
        'learning_standards': 'list[EdFiCourseLearningStandard]',
        'level_characteristics': 'list[EdFiCourseLevelCharacteristic]',
        'max_completions_for_credit': 'int',
        'maximum_available_credit_conversion': 'float',
        'maximum_available_credits': 'float',
        'maximum_available_credit_type_descriptor': 'str',
        'minimum_available_credit_conversion': 'float',
        'minimum_available_credits': 'float',
        'minimum_available_credit_type_descriptor': 'str',
        'number_of_parts': 'int',
        'offered_grade_levels': 'list[EdFiCourseOfferedGradeLevel]',
        'time_required_for_completion': 'int',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'course_code': 'courseCode',
        'identification_codes': 'identificationCodes',
        'education_organization_reference': 'educationOrganizationReference',
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'career_pathway_descriptor': 'careerPathwayDescriptor',
        'competency_levels': 'competencyLevels',
        'course_defined_by_descriptor': 'courseDefinedByDescriptor',
        'course_description': 'courseDescription',
        'course_gpa_applicability_descriptor': 'courseGPAApplicabilityDescriptor',
        'course_title': 'courseTitle',
        'date_course_adopted': 'dateCourseAdopted',
        'high_school_course_requirement': 'highSchoolCourseRequirement',
        'learning_objectives': 'learningObjectives',
        'learning_standards': 'learningStandards',
        'level_characteristics': 'levelCharacteristics',
        'max_completions_for_credit': 'maxCompletionsForCredit',
        'maximum_available_credit_conversion': 'maximumAvailableCreditConversion',
        'maximum_available_credits': 'maximumAvailableCredits',
        'maximum_available_credit_type_descriptor': 'maximumAvailableCreditTypeDescriptor',
        'minimum_available_credit_conversion': 'minimumAvailableCreditConversion',
        'minimum_available_credits': 'minimumAvailableCredits',
        'minimum_available_credit_type_descriptor': 'minimumAvailableCreditTypeDescriptor',
        'number_of_parts': 'numberOfParts',
        'offered_grade_levels': 'offeredGradeLevels',
        'time_required_for_completion': 'timeRequiredForCompletion',
        'etag': '_etag'
    }

    def __init__(self, id=None, course_code=None, identification_codes=None, education_organization_reference=None, academic_subject_descriptor=None, career_pathway_descriptor=None, competency_levels=None, course_defined_by_descriptor=None, course_description=None, course_gpa_applicability_descriptor=None, course_title=None, date_course_adopted=None, high_school_course_requirement=None, learning_objectives=None, learning_standards=None, level_characteristics=None, max_completions_for_credit=None, maximum_available_credit_conversion=None, maximum_available_credits=None, maximum_available_credit_type_descriptor=None, minimum_available_credit_conversion=None, minimum_available_credits=None, minimum_available_credit_type_descriptor=None, number_of_parts=None, offered_grade_levels=None, time_required_for_completion=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCourse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._course_code = None
        self._identification_codes = None
        self._education_organization_reference = None
        self._academic_subject_descriptor = None
        self._career_pathway_descriptor = None
        self._competency_levels = None
        self._course_defined_by_descriptor = None
        self._course_description = None
        self._course_gpa_applicability_descriptor = None
        self._course_title = None
        self._date_course_adopted = None
        self._high_school_course_requirement = None
        self._learning_objectives = None
        self._learning_standards = None
        self._level_characteristics = None
        self._max_completions_for_credit = None
        self._maximum_available_credit_conversion = None
        self._maximum_available_credits = None
        self._maximum_available_credit_type_descriptor = None
        self._minimum_available_credit_conversion = None
        self._minimum_available_credits = None
        self._minimum_available_credit_type_descriptor = None
        self._number_of_parts = None
        self._offered_grade_levels = None
        self._time_required_for_completion = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.course_code = course_code
        self.identification_codes = identification_codes
        self.education_organization_reference = education_organization_reference
        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        if career_pathway_descriptor is not None:
            self.career_pathway_descriptor = career_pathway_descriptor
        if competency_levels is not None:
            self.competency_levels = competency_levels
        if course_defined_by_descriptor is not None:
            self.course_defined_by_descriptor = course_defined_by_descriptor
        if course_description is not None:
            self.course_description = course_description
        if course_gpa_applicability_descriptor is not None:
            self.course_gpa_applicability_descriptor = course_gpa_applicability_descriptor
        self.course_title = course_title
        if date_course_adopted is not None:
            self.date_course_adopted = date_course_adopted
        if high_school_course_requirement is not None:
            self.high_school_course_requirement = high_school_course_requirement
        if learning_objectives is not None:
            self.learning_objectives = learning_objectives
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if level_characteristics is not None:
            self.level_characteristics = level_characteristics
        if max_completions_for_credit is not None:
            self.max_completions_for_credit = max_completions_for_credit
        if maximum_available_credit_conversion is not None:
            self.maximum_available_credit_conversion = maximum_available_credit_conversion
        if maximum_available_credits is not None:
            self.maximum_available_credits = maximum_available_credits
        if maximum_available_credit_type_descriptor is not None:
            self.maximum_available_credit_type_descriptor = maximum_available_credit_type_descriptor
        if minimum_available_credit_conversion is not None:
            self.minimum_available_credit_conversion = minimum_available_credit_conversion
        if minimum_available_credits is not None:
            self.minimum_available_credits = minimum_available_credits
        if minimum_available_credit_type_descriptor is not None:
            self.minimum_available_credit_type_descriptor = minimum_available_credit_type_descriptor
        self.number_of_parts = number_of_parts
        if offered_grade_levels is not None:
            self.offered_grade_levels = offered_grade_levels
        if time_required_for_completion is not None:
            self.time_required_for_completion = time_required_for_completion
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCourse.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCourse.

          # noqa: E501

        :param id: The id of this EdFiCourse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def course_code(self):
        """Gets the course_code of this EdFiCourse.  # noqa: E501

        A unique alphanumeric code assigned to a course.  # noqa: E501

        :return: The course_code of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this EdFiCourse.

        A unique alphanumeric code assigned to a course.  # noqa: E501

        :param course_code: The course_code of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and course_code is None:
            raise ValueError("Invalid value for `course_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                course_code is not None and len(course_code) > 60):
            raise ValueError("Invalid value for `course_code`, length must be less than or equal to `60`")  # noqa: E501

        self._course_code = course_code

    @property
    def identification_codes(self):
        """Gets the identification_codes of this EdFiCourse.  # noqa: E501

        An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.  # noqa: E501

        :return: The identification_codes of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this EdFiCourse.

        An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.  # noqa: E501

        :param identification_codes: The identification_codes of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseIdentificationCode]
        """
        if self._configuration.client_side_validation and identification_codes is None:
            raise ValueError("Invalid value for `identification_codes`, must not be `None`")  # noqa: E501

        self._identification_codes = identification_codes

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiCourse.  # noqa: E501


        :return: The education_organization_reference of this EdFiCourse.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiCourse.


        :param education_organization_reference: The education_organization_reference of this EdFiCourse.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this EdFiCourse.  # noqa: E501

        The intended major subject area of the course.  # noqa: E501

        :return: The academic_subject_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this EdFiCourse.

        The intended major subject area of the course.  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306):
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def career_pathway_descriptor(self):
        """Gets the career_pathway_descriptor of this EdFiCourse.  # noqa: E501

        Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.  # noqa: E501

        :return: The career_pathway_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._career_pathway_descriptor

    @career_pathway_descriptor.setter
    def career_pathway_descriptor(self, career_pathway_descriptor):
        """Sets the career_pathway_descriptor of this EdFiCourse.

        Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.  # noqa: E501

        :param career_pathway_descriptor: The career_pathway_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                career_pathway_descriptor is not None and len(career_pathway_descriptor) > 306):
            raise ValueError("Invalid value for `career_pathway_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._career_pathway_descriptor = career_pathway_descriptor

    @property
    def competency_levels(self):
        """Gets the competency_levels of this EdFiCourse.  # noqa: E501

        An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.  # noqa: E501

        :return: The competency_levels of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseCompetencyLevel]
        """
        return self._competency_levels

    @competency_levels.setter
    def competency_levels(self, competency_levels):
        """Sets the competency_levels of this EdFiCourse.

        An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.  # noqa: E501

        :param competency_levels: The competency_levels of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseCompetencyLevel]
        """

        self._competency_levels = competency_levels

    @property
    def course_defined_by_descriptor(self):
        """Gets the course_defined_by_descriptor of this EdFiCourse.  # noqa: E501

        Specifies whether the course was defined by the SEA, LEA, School, or national organization.  # noqa: E501

        :return: The course_defined_by_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_defined_by_descriptor

    @course_defined_by_descriptor.setter
    def course_defined_by_descriptor(self, course_defined_by_descriptor):
        """Sets the course_defined_by_descriptor of this EdFiCourse.

        Specifies whether the course was defined by the SEA, LEA, School, or national organization.  # noqa: E501

        :param course_defined_by_descriptor: The course_defined_by_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_defined_by_descriptor is not None and len(course_defined_by_descriptor) > 306):
            raise ValueError("Invalid value for `course_defined_by_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._course_defined_by_descriptor = course_defined_by_descriptor

    @property
    def course_description(self):
        """Gets the course_description of this EdFiCourse.  # noqa: E501

        A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.  # noqa: E501

        :return: The course_description of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_description

    @course_description.setter
    def course_description(self, course_description):
        """Sets the course_description of this EdFiCourse.

        A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.  # noqa: E501

        :param course_description: The course_description of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_description is not None and len(course_description) > 1024):
            raise ValueError("Invalid value for `course_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._course_description = course_description

    @property
    def course_gpa_applicability_descriptor(self):
        """Gets the course_gpa_applicability_descriptor of this EdFiCourse.  # noqa: E501

        An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.  # noqa: E501

        :return: The course_gpa_applicability_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_gpa_applicability_descriptor

    @course_gpa_applicability_descriptor.setter
    def course_gpa_applicability_descriptor(self, course_gpa_applicability_descriptor):
        """Sets the course_gpa_applicability_descriptor of this EdFiCourse.

        An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.  # noqa: E501

        :param course_gpa_applicability_descriptor: The course_gpa_applicability_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                course_gpa_applicability_descriptor is not None and len(course_gpa_applicability_descriptor) > 306):
            raise ValueError("Invalid value for `course_gpa_applicability_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._course_gpa_applicability_descriptor = course_gpa_applicability_descriptor

    @property
    def course_title(self):
        """Gets the course_title of this EdFiCourse.  # noqa: E501

        The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).  # noqa: E501

        :return: The course_title of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_title

    @course_title.setter
    def course_title(self, course_title):
        """Sets the course_title of this EdFiCourse.

        The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).  # noqa: E501

        :param course_title: The course_title of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and course_title is None:
            raise ValueError("Invalid value for `course_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                course_title is not None and len(course_title) > 60):
            raise ValueError("Invalid value for `course_title`, length must be less than or equal to `60`")  # noqa: E501

        self._course_title = course_title

    @property
    def date_course_adopted(self):
        """Gets the date_course_adopted of this EdFiCourse.  # noqa: E501

        Date the course was adopted by the education agency.  # noqa: E501

        :return: The date_course_adopted of this EdFiCourse.  # noqa: E501
        :rtype: date
        """
        return self._date_course_adopted

    @date_course_adopted.setter
    def date_course_adopted(self, date_course_adopted):
        """Sets the date_course_adopted of this EdFiCourse.

        Date the course was adopted by the education agency.  # noqa: E501

        :param date_course_adopted: The date_course_adopted of this EdFiCourse.  # noqa: E501
        :type: date
        """

        self._date_course_adopted = date_course_adopted

    @property
    def high_school_course_requirement(self):
        """Gets the high_school_course_requirement of this EdFiCourse.  # noqa: E501

        An indication that this course may satisfy high school graduation requirements in the course's subject area.  # noqa: E501

        :return: The high_school_course_requirement of this EdFiCourse.  # noqa: E501
        :rtype: bool
        """
        return self._high_school_course_requirement

    @high_school_course_requirement.setter
    def high_school_course_requirement(self, high_school_course_requirement):
        """Sets the high_school_course_requirement of this EdFiCourse.

        An indication that this course may satisfy high school graduation requirements in the course's subject area.  # noqa: E501

        :param high_school_course_requirement: The high_school_course_requirement of this EdFiCourse.  # noqa: E501
        :type: bool
        """

        self._high_school_course_requirement = high_school_course_requirement

    @property
    def learning_objectives(self):
        """Gets the learning_objectives of this EdFiCourse.  # noqa: E501

        An unordered collection of courseLearningObjectives. Learning Objectives to be mastered in the course.  # noqa: E501

        :return: The learning_objectives of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseLearningObjective]
        """
        return self._learning_objectives

    @learning_objectives.setter
    def learning_objectives(self, learning_objectives):
        """Sets the learning_objectives of this EdFiCourse.

        An unordered collection of courseLearningObjectives. Learning Objectives to be mastered in the course.  # noqa: E501

        :param learning_objectives: The learning_objectives of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseLearningObjective]
        """

        self._learning_objectives = learning_objectives

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiCourse.  # noqa: E501

        An unordered collection of courseLearningStandards. Learning Standard(s) to be taught by the course.  # noqa: E501

        :return: The learning_standards of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiCourse.

        An unordered collection of courseLearningStandards. Learning Standard(s) to be taught by the course.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def level_characteristics(self):
        """Gets the level_characteristics of this EdFiCourse.  # noqa: E501

        An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).  # noqa: E501

        :return: The level_characteristics of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseLevelCharacteristic]
        """
        return self._level_characteristics

    @level_characteristics.setter
    def level_characteristics(self, level_characteristics):
        """Sets the level_characteristics of this EdFiCourse.

        An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).  # noqa: E501

        :param level_characteristics: The level_characteristics of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseLevelCharacteristic]
        """

        self._level_characteristics = level_characteristics

    @property
    def max_completions_for_credit(self):
        """Gets the max_completions_for_credit of this EdFiCourse.  # noqa: E501

        Designates how many times the course may be taken with credit received by the student.  # noqa: E501

        :return: The max_completions_for_credit of this EdFiCourse.  # noqa: E501
        :rtype: int
        """
        return self._max_completions_for_credit

    @max_completions_for_credit.setter
    def max_completions_for_credit(self, max_completions_for_credit):
        """Sets the max_completions_for_credit of this EdFiCourse.

        Designates how many times the course may be taken with credit received by the student.  # noqa: E501

        :param max_completions_for_credit: The max_completions_for_credit of this EdFiCourse.  # noqa: E501
        :type: int
        """

        self._max_completions_for_credit = max_completions_for_credit

    @property
    def maximum_available_credit_conversion(self):
        """Gets the maximum_available_credit_conversion of this EdFiCourse.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The maximum_available_credit_conversion of this EdFiCourse.  # noqa: E501
        :rtype: float
        """
        return self._maximum_available_credit_conversion

    @maximum_available_credit_conversion.setter
    def maximum_available_credit_conversion(self, maximum_available_credit_conversion):
        """Sets the maximum_available_credit_conversion of this EdFiCourse.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param maximum_available_credit_conversion: The maximum_available_credit_conversion of this EdFiCourse.  # noqa: E501
        :type: float
        """

        self._maximum_available_credit_conversion = maximum_available_credit_conversion

    @property
    def maximum_available_credits(self):
        """Gets the maximum_available_credits of this EdFiCourse.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The maximum_available_credits of this EdFiCourse.  # noqa: E501
        :rtype: float
        """
        return self._maximum_available_credits

    @maximum_available_credits.setter
    def maximum_available_credits(self, maximum_available_credits):
        """Sets the maximum_available_credits of this EdFiCourse.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param maximum_available_credits: The maximum_available_credits of this EdFiCourse.  # noqa: E501
        :type: float
        """

        self._maximum_available_credits = maximum_available_credits

    @property
    def maximum_available_credit_type_descriptor(self):
        """Gets the maximum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The maximum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._maximum_available_credit_type_descriptor

    @maximum_available_credit_type_descriptor.setter
    def maximum_available_credit_type_descriptor(self, maximum_available_credit_type_descriptor):
        """Sets the maximum_available_credit_type_descriptor of this EdFiCourse.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param maximum_available_credit_type_descriptor: The maximum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                maximum_available_credit_type_descriptor is not None and len(maximum_available_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `maximum_available_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._maximum_available_credit_type_descriptor = maximum_available_credit_type_descriptor

    @property
    def minimum_available_credit_conversion(self):
        """Gets the minimum_available_credit_conversion of this EdFiCourse.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The minimum_available_credit_conversion of this EdFiCourse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_available_credit_conversion

    @minimum_available_credit_conversion.setter
    def minimum_available_credit_conversion(self, minimum_available_credit_conversion):
        """Sets the minimum_available_credit_conversion of this EdFiCourse.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param minimum_available_credit_conversion: The minimum_available_credit_conversion of this EdFiCourse.  # noqa: E501
        :type: float
        """

        self._minimum_available_credit_conversion = minimum_available_credit_conversion

    @property
    def minimum_available_credits(self):
        """Gets the minimum_available_credits of this EdFiCourse.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The minimum_available_credits of this EdFiCourse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_available_credits

    @minimum_available_credits.setter
    def minimum_available_credits(self, minimum_available_credits):
        """Sets the minimum_available_credits of this EdFiCourse.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param minimum_available_credits: The minimum_available_credits of this EdFiCourse.  # noqa: E501
        :type: float
        """

        self._minimum_available_credits = minimum_available_credits

    @property
    def minimum_available_credit_type_descriptor(self):
        """Gets the minimum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The minimum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._minimum_available_credit_type_descriptor

    @minimum_available_credit_type_descriptor.setter
    def minimum_available_credit_type_descriptor(self, minimum_available_credit_type_descriptor):
        """Sets the minimum_available_credit_type_descriptor of this EdFiCourse.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param minimum_available_credit_type_descriptor: The minimum_available_credit_type_descriptor of this EdFiCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                minimum_available_credit_type_descriptor is not None and len(minimum_available_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `minimum_available_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._minimum_available_credit_type_descriptor = minimum_available_credit_type_descriptor

    @property
    def number_of_parts(self):
        """Gets the number_of_parts of this EdFiCourse.  # noqa: E501

        The number of parts identified for a course.  # noqa: E501

        :return: The number_of_parts of this EdFiCourse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_parts

    @number_of_parts.setter
    def number_of_parts(self, number_of_parts):
        """Sets the number_of_parts of this EdFiCourse.

        The number of parts identified for a course.  # noqa: E501

        :param number_of_parts: The number_of_parts of this EdFiCourse.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and number_of_parts is None:
            raise ValueError("Invalid value for `number_of_parts`, must not be `None`")  # noqa: E501

        self._number_of_parts = number_of_parts

    @property
    def offered_grade_levels(self):
        """Gets the offered_grade_levels of this EdFiCourse.  # noqa: E501

        An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.  # noqa: E501

        :return: The offered_grade_levels of this EdFiCourse.  # noqa: E501
        :rtype: list[EdFiCourseOfferedGradeLevel]
        """
        return self._offered_grade_levels

    @offered_grade_levels.setter
    def offered_grade_levels(self, offered_grade_levels):
        """Sets the offered_grade_levels of this EdFiCourse.

        An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.  # noqa: E501

        :param offered_grade_levels: The offered_grade_levels of this EdFiCourse.  # noqa: E501
        :type: list[EdFiCourseOfferedGradeLevel]
        """

        self._offered_grade_levels = offered_grade_levels

    @property
    def time_required_for_completion(self):
        """Gets the time_required_for_completion of this EdFiCourse.  # noqa: E501

        The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.  # noqa: E501

        :return: The time_required_for_completion of this EdFiCourse.  # noqa: E501
        :rtype: int
        """
        return self._time_required_for_completion

    @time_required_for_completion.setter
    def time_required_for_completion(self, time_required_for_completion):
        """Sets the time_required_for_completion of this EdFiCourse.

        The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.  # noqa: E501

        :param time_required_for_completion: The time_required_for_completion of this EdFiCourse.  # noqa: E501
        :type: int
        """

        self._time_required_for_completion = time_required_for_completion

    @property
    def etag(self):
        """Gets the etag of this EdFiCourse.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCourse.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCourse.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCourse.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCourse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCourse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCourse):
            return True

        return self.to_dict() != other.to_dict()
