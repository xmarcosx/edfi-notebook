# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'credential_identifier': 'str',
        'state_of_issue_state_abbreviation_descriptor': 'str',
        'academic_subjects': 'list[EdFiCredentialAcademicSubject]',
        'credential_field_descriptor': 'str',
        'credential_type_descriptor': 'str',
        'effective_date': 'date',
        'endorsements': 'list[EdFiCredentialEndorsement]',
        'expiration_date': 'date',
        'grade_levels': 'list[EdFiCredentialGradeLevel]',
        'issuance_date': 'date',
        'namespace': 'str',
        'teaching_credential_basis_descriptor': 'str',
        'teaching_credential_descriptor': 'str',
        'etag': 'str',
        'ext': 'CredentialExtensions'
    }

    attribute_map = {
        'id': 'id',
        'credential_identifier': 'credentialIdentifier',
        'state_of_issue_state_abbreviation_descriptor': 'stateOfIssueStateAbbreviationDescriptor',
        'academic_subjects': 'academicSubjects',
        'credential_field_descriptor': 'credentialFieldDescriptor',
        'credential_type_descriptor': 'credentialTypeDescriptor',
        'effective_date': 'effectiveDate',
        'endorsements': 'endorsements',
        'expiration_date': 'expirationDate',
        'grade_levels': 'gradeLevels',
        'issuance_date': 'issuanceDate',
        'namespace': 'namespace',
        'teaching_credential_basis_descriptor': 'teachingCredentialBasisDescriptor',
        'teaching_credential_descriptor': 'teachingCredentialDescriptor',
        'etag': '_etag',
        'ext': '_ext'
    }

    def __init__(self, id=None, credential_identifier=None, state_of_issue_state_abbreviation_descriptor=None, academic_subjects=None, credential_field_descriptor=None, credential_type_descriptor=None, effective_date=None, endorsements=None, expiration_date=None, grade_levels=None, issuance_date=None, namespace=None, teaching_credential_basis_descriptor=None, teaching_credential_descriptor=None, etag=None, ext=None, _configuration=None):  # noqa: E501
        """EdFiCredential - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._credential_identifier = None
        self._state_of_issue_state_abbreviation_descriptor = None
        self._academic_subjects = None
        self._credential_field_descriptor = None
        self._credential_type_descriptor = None
        self._effective_date = None
        self._endorsements = None
        self._expiration_date = None
        self._grade_levels = None
        self._issuance_date = None
        self._namespace = None
        self._teaching_credential_basis_descriptor = None
        self._teaching_credential_descriptor = None
        self._etag = None
        self._ext = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.credential_identifier = credential_identifier
        self.state_of_issue_state_abbreviation_descriptor = state_of_issue_state_abbreviation_descriptor
        if academic_subjects is not None:
            self.academic_subjects = academic_subjects
        if credential_field_descriptor is not None:
            self.credential_field_descriptor = credential_field_descriptor
        self.credential_type_descriptor = credential_type_descriptor
        if effective_date is not None:
            self.effective_date = effective_date
        if endorsements is not None:
            self.endorsements = endorsements
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if grade_levels is not None:
            self.grade_levels = grade_levels
        self.issuance_date = issuance_date
        self.namespace = namespace
        if teaching_credential_basis_descriptor is not None:
            self.teaching_credential_basis_descriptor = teaching_credential_basis_descriptor
        if teaching_credential_descriptor is not None:
            self.teaching_credential_descriptor = teaching_credential_descriptor
        if etag is not None:
            self.etag = etag
        if ext is not None:
            self.ext = ext

    @property
    def id(self):
        """Gets the id of this EdFiCredential.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCredential.

          # noqa: E501

        :param id: The id of this EdFiCredential.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def credential_identifier(self):
        """Gets the credential_identifier of this EdFiCredential.  # noqa: E501

        Identifier or serial number assigned to the credential.  # noqa: E501

        :return: The credential_identifier of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._credential_identifier

    @credential_identifier.setter
    def credential_identifier(self, credential_identifier):
        """Sets the credential_identifier of this EdFiCredential.

        Identifier or serial number assigned to the credential.  # noqa: E501

        :param credential_identifier: The credential_identifier of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credential_identifier is None:
            raise ValueError("Invalid value for `credential_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credential_identifier is not None and len(credential_identifier) > 60):
            raise ValueError("Invalid value for `credential_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._credential_identifier = credential_identifier

    @property
    def state_of_issue_state_abbreviation_descriptor(self):
        """Gets the state_of_issue_state_abbreviation_descriptor of this EdFiCredential.  # noqa: E501

        The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.  # noqa: E501

        :return: The state_of_issue_state_abbreviation_descriptor of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._state_of_issue_state_abbreviation_descriptor

    @state_of_issue_state_abbreviation_descriptor.setter
    def state_of_issue_state_abbreviation_descriptor(self, state_of_issue_state_abbreviation_descriptor):
        """Sets the state_of_issue_state_abbreviation_descriptor of this EdFiCredential.

        The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.  # noqa: E501

        :param state_of_issue_state_abbreviation_descriptor: The state_of_issue_state_abbreviation_descriptor of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state_of_issue_state_abbreviation_descriptor is None:
            raise ValueError("Invalid value for `state_of_issue_state_abbreviation_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state_of_issue_state_abbreviation_descriptor is not None and len(state_of_issue_state_abbreviation_descriptor) > 306):
            raise ValueError("Invalid value for `state_of_issue_state_abbreviation_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._state_of_issue_state_abbreviation_descriptor = state_of_issue_state_abbreviation_descriptor

    @property
    def academic_subjects(self):
        """Gets the academic_subjects of this EdFiCredential.  # noqa: E501

        An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.  # noqa: E501

        :return: The academic_subjects of this EdFiCredential.  # noqa: E501
        :rtype: list[EdFiCredentialAcademicSubject]
        """
        return self._academic_subjects

    @academic_subjects.setter
    def academic_subjects(self, academic_subjects):
        """Sets the academic_subjects of this EdFiCredential.

        An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.  # noqa: E501

        :param academic_subjects: The academic_subjects of this EdFiCredential.  # noqa: E501
        :type: list[EdFiCredentialAcademicSubject]
        """

        self._academic_subjects = academic_subjects

    @property
    def credential_field_descriptor(self):
        """Gets the credential_field_descriptor of this EdFiCredential.  # noqa: E501

        The field of certification for the certificate (e.g., Mathematics, Music).  # noqa: E501

        :return: The credential_field_descriptor of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._credential_field_descriptor

    @credential_field_descriptor.setter
    def credential_field_descriptor(self, credential_field_descriptor):
        """Sets the credential_field_descriptor of this EdFiCredential.

        The field of certification for the certificate (e.g., Mathematics, Music).  # noqa: E501

        :param credential_field_descriptor: The credential_field_descriptor of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                credential_field_descriptor is not None and len(credential_field_descriptor) > 306):
            raise ValueError("Invalid value for `credential_field_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credential_field_descriptor = credential_field_descriptor

    @property
    def credential_type_descriptor(self):
        """Gets the credential_type_descriptor of this EdFiCredential.  # noqa: E501

        An indication of the category of credential an individual holds.  # noqa: E501

        :return: The credential_type_descriptor of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._credential_type_descriptor

    @credential_type_descriptor.setter
    def credential_type_descriptor(self, credential_type_descriptor):
        """Sets the credential_type_descriptor of this EdFiCredential.

        An indication of the category of credential an individual holds.  # noqa: E501

        :param credential_type_descriptor: The credential_type_descriptor of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credential_type_descriptor is None:
            raise ValueError("Invalid value for `credential_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credential_type_descriptor is not None and len(credential_type_descriptor) > 306):
            raise ValueError("Invalid value for `credential_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credential_type_descriptor = credential_type_descriptor

    @property
    def effective_date(self):
        """Gets the effective_date of this EdFiCredential.  # noqa: E501

        The year, month and day on which an active credential held by an individual was issued.  # noqa: E501

        :return: The effective_date of this EdFiCredential.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this EdFiCredential.

        The year, month and day on which an active credential held by an individual was issued.  # noqa: E501

        :param effective_date: The effective_date of this EdFiCredential.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def endorsements(self):
        """Gets the endorsements of this EdFiCredential.  # noqa: E501

        An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.  # noqa: E501

        :return: The endorsements of this EdFiCredential.  # noqa: E501
        :rtype: list[EdFiCredentialEndorsement]
        """
        return self._endorsements

    @endorsements.setter
    def endorsements(self, endorsements):
        """Sets the endorsements of this EdFiCredential.

        An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.  # noqa: E501

        :param endorsements: The endorsements of this EdFiCredential.  # noqa: E501
        :type: list[EdFiCredentialEndorsement]
        """

        self._endorsements = endorsements

    @property
    def expiration_date(self):
        """Gets the expiration_date of this EdFiCredential.  # noqa: E501

        The month, day, and year on which an active credential held by an individual will expire.  # noqa: E501

        :return: The expiration_date of this EdFiCredential.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this EdFiCredential.

        The month, day, and year on which an active credential held by an individual will expire.  # noqa: E501

        :param expiration_date: The expiration_date of this EdFiCredential.  # noqa: E501
        :type: date
        """

        self._expiration_date = expiration_date

    @property
    def grade_levels(self):
        """Gets the grade_levels of this EdFiCredential.  # noqa: E501

        An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.  # noqa: E501

        :return: The grade_levels of this EdFiCredential.  # noqa: E501
        :rtype: list[EdFiCredentialGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this EdFiCredential.

        An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.  # noqa: E501

        :param grade_levels: The grade_levels of this EdFiCredential.  # noqa: E501
        :type: list[EdFiCredentialGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def issuance_date(self):
        """Gets the issuance_date of this EdFiCredential.  # noqa: E501

        The month, day, and year on which an active credential was issued to an individual.  # noqa: E501

        :return: The issuance_date of this EdFiCredential.  # noqa: E501
        :rtype: date
        """
        return self._issuance_date

    @issuance_date.setter
    def issuance_date(self, issuance_date):
        """Sets the issuance_date of this EdFiCredential.

        The month, day, and year on which an active credential was issued to an individual.  # noqa: E501

        :param issuance_date: The issuance_date of this EdFiCredential.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and issuance_date is None:
            raise ValueError("Invalid value for `issuance_date`, must not be `None`")  # noqa: E501

        self._issuance_date = issuance_date

    @property
    def namespace(self):
        """Gets the namespace of this EdFiCredential.  # noqa: E501

        Namespace for the Credential.  # noqa: E501

        :return: The namespace of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiCredential.

        Namespace for the Credential.  # noqa: E501

        :param namespace: The namespace of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def teaching_credential_basis_descriptor(self):
        """Gets the teaching_credential_basis_descriptor of this EdFiCredential.  # noqa: E501

        An indication of the pre-determined criteria for granting the teaching credential that an individual holds.  # noqa: E501

        :return: The teaching_credential_basis_descriptor of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._teaching_credential_basis_descriptor

    @teaching_credential_basis_descriptor.setter
    def teaching_credential_basis_descriptor(self, teaching_credential_basis_descriptor):
        """Sets the teaching_credential_basis_descriptor of this EdFiCredential.

        An indication of the pre-determined criteria for granting the teaching credential that an individual holds.  # noqa: E501

        :param teaching_credential_basis_descriptor: The teaching_credential_basis_descriptor of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                teaching_credential_basis_descriptor is not None and len(teaching_credential_basis_descriptor) > 306):
            raise ValueError("Invalid value for `teaching_credential_basis_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._teaching_credential_basis_descriptor = teaching_credential_basis_descriptor

    @property
    def teaching_credential_descriptor(self):
        """Gets the teaching_credential_descriptor of this EdFiCredential.  # noqa: E501

        An indication of the category of a legal document giving authorization to perform teaching assignment services.  # noqa: E501

        :return: The teaching_credential_descriptor of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._teaching_credential_descriptor

    @teaching_credential_descriptor.setter
    def teaching_credential_descriptor(self, teaching_credential_descriptor):
        """Sets the teaching_credential_descriptor of this EdFiCredential.

        An indication of the category of a legal document giving authorization to perform teaching assignment services.  # noqa: E501

        :param teaching_credential_descriptor: The teaching_credential_descriptor of this EdFiCredential.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                teaching_credential_descriptor is not None and len(teaching_credential_descriptor) > 306):
            raise ValueError("Invalid value for `teaching_credential_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._teaching_credential_descriptor = teaching_credential_descriptor

    @property
    def etag(self):
        """Gets the etag of this EdFiCredential.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCredential.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCredential.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCredential.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def ext(self):
        """Gets the ext of this EdFiCredential.  # noqa: E501


        :return: The ext of this EdFiCredential.  # noqa: E501
        :rtype: CredentialExtensions
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this EdFiCredential.


        :param ext: The ext of this EdFiCredential.  # noqa: E501
        :type: CredentialExtensions
        """

        self._ext = ext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCredential):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCredential):
            return True

        return self.to_dict() != other.to_dict()
