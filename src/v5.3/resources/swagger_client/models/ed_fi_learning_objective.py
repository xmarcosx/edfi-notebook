# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiLearningObjective(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'academic_subjects': 'list[EdFiLearningObjectiveAcademicSubject]',
        'learning_objective_id': 'str',
        'namespace': 'str',
        'parent_learning_objective_reference': 'EdFiLearningObjectiveReference',
        'content_standard': 'EdFiLearningObjectiveContentStandard',
        'description': 'str',
        'grade_levels': 'list[EdFiLearningObjectiveGradeLevel]',
        'learning_standards': 'list[EdFiLearningObjectiveLearningStandard]',
        'nomenclature': 'str',
        'objective': 'str',
        'success_criteria': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'academic_subjects': 'academicSubjects',
        'learning_objective_id': 'learningObjectiveId',
        'namespace': 'namespace',
        'parent_learning_objective_reference': 'parentLearningObjectiveReference',
        'content_standard': 'contentStandard',
        'description': 'description',
        'grade_levels': 'gradeLevels',
        'learning_standards': 'learningStandards',
        'nomenclature': 'nomenclature',
        'objective': 'objective',
        'success_criteria': 'successCriteria',
        'etag': '_etag'
    }

    def __init__(self, id=None, academic_subjects=None, learning_objective_id=None, namespace=None, parent_learning_objective_reference=None, content_standard=None, description=None, grade_levels=None, learning_standards=None, nomenclature=None, objective=None, success_criteria=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiLearningObjective - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._academic_subjects = None
        self._learning_objective_id = None
        self._namespace = None
        self._parent_learning_objective_reference = None
        self._content_standard = None
        self._description = None
        self._grade_levels = None
        self._learning_standards = None
        self._nomenclature = None
        self._objective = None
        self._success_criteria = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.academic_subjects = academic_subjects
        self.learning_objective_id = learning_objective_id
        self.namespace = namespace
        if parent_learning_objective_reference is not None:
            self.parent_learning_objective_reference = parent_learning_objective_reference
        if content_standard is not None:
            self.content_standard = content_standard
        if description is not None:
            self.description = description
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if nomenclature is not None:
            self.nomenclature = nomenclature
        self.objective = objective
        if success_criteria is not None:
            self.success_criteria = success_criteria
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiLearningObjective.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiLearningObjective.

          # noqa: E501

        :param id: The id of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def academic_subjects(self):
        """Gets the academic_subjects of this EdFiLearningObjective.  # noqa: E501

        An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  # noqa: E501

        :return: The academic_subjects of this EdFiLearningObjective.  # noqa: E501
        :rtype: list[EdFiLearningObjectiveAcademicSubject]
        """
        return self._academic_subjects

    @academic_subjects.setter
    def academic_subjects(self, academic_subjects):
        """Sets the academic_subjects of this EdFiLearningObjective.

        An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  # noqa: E501

        :param academic_subjects: The academic_subjects of this EdFiLearningObjective.  # noqa: E501
        :type: list[EdFiLearningObjectiveAcademicSubject]
        """
        if self._configuration.client_side_validation and academic_subjects is None:
            raise ValueError("Invalid value for `academic_subjects`, must not be `None`")  # noqa: E501

        self._academic_subjects = academic_subjects

    @property
    def learning_objective_id(self):
        """Gets the learning_objective_id of this EdFiLearningObjective.  # noqa: E501

        The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).  # noqa: E501

        :return: The learning_objective_id of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._learning_objective_id

    @learning_objective_id.setter
    def learning_objective_id(self, learning_objective_id):
        """Sets the learning_objective_id of this EdFiLearningObjective.

        The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).  # noqa: E501

        :param learning_objective_id: The learning_objective_id of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and learning_objective_id is None:
            raise ValueError("Invalid value for `learning_objective_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                learning_objective_id is not None and len(learning_objective_id) > 60):
            raise ValueError("Invalid value for `learning_objective_id`, length must be less than or equal to `60`")  # noqa: E501

        self._learning_objective_id = learning_objective_id

    @property
    def namespace(self):
        """Gets the namespace of this EdFiLearningObjective.  # noqa: E501

        Namespace for the LearningObjective.  # noqa: E501

        :return: The namespace of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiLearningObjective.

        Namespace for the LearningObjective.  # noqa: E501

        :param namespace: The namespace of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def parent_learning_objective_reference(self):
        """Gets the parent_learning_objective_reference of this EdFiLearningObjective.  # noqa: E501


        :return: The parent_learning_objective_reference of this EdFiLearningObjective.  # noqa: E501
        :rtype: EdFiLearningObjectiveReference
        """
        return self._parent_learning_objective_reference

    @parent_learning_objective_reference.setter
    def parent_learning_objective_reference(self, parent_learning_objective_reference):
        """Sets the parent_learning_objective_reference of this EdFiLearningObjective.


        :param parent_learning_objective_reference: The parent_learning_objective_reference of this EdFiLearningObjective.  # noqa: E501
        :type: EdFiLearningObjectiveReference
        """

        self._parent_learning_objective_reference = parent_learning_objective_reference

    @property
    def content_standard(self):
        """Gets the content_standard of this EdFiLearningObjective.  # noqa: E501


        :return: The content_standard of this EdFiLearningObjective.  # noqa: E501
        :rtype: EdFiLearningObjectiveContentStandard
        """
        return self._content_standard

    @content_standard.setter
    def content_standard(self, content_standard):
        """Sets the content_standard of this EdFiLearningObjective.


        :param content_standard: The content_standard of this EdFiLearningObjective.  # noqa: E501
        :type: EdFiLearningObjectiveContentStandard
        """

        self._content_standard = content_standard

    @property
    def description(self):
        """Gets the description of this EdFiLearningObjective.  # noqa: E501

        The description of the LearningObjective.  # noqa: E501

        :return: The description of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdFiLearningObjective.

        The description of the LearningObjective.  # noqa: E501

        :param description: The description of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def grade_levels(self):
        """Gets the grade_levels of this EdFiLearningObjective.  # noqa: E501

        An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.  # noqa: E501

        :return: The grade_levels of this EdFiLearningObjective.  # noqa: E501
        :rtype: list[EdFiLearningObjectiveGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this EdFiLearningObjective.

        An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.  # noqa: E501

        :param grade_levels: The grade_levels of this EdFiLearningObjective.  # noqa: E501
        :type: list[EdFiLearningObjectiveGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiLearningObjective.  # noqa: E501

        An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective.  # noqa: E501

        :return: The learning_standards of this EdFiLearningObjective.  # noqa: E501
        :rtype: list[EdFiLearningObjectiveLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiLearningObjective.

        An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiLearningObjective.  # noqa: E501
        :type: list[EdFiLearningObjectiveLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def nomenclature(self):
        """Gets the nomenclature of this EdFiLearningObjective.  # noqa: E501

        Reflects the specific nomenclature used for the LearningObjective.  # noqa: E501

        :return: The nomenclature of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._nomenclature

    @nomenclature.setter
    def nomenclature(self, nomenclature):
        """Sets the nomenclature of this EdFiLearningObjective.

        Reflects the specific nomenclature used for the LearningObjective.  # noqa: E501

        :param nomenclature: The nomenclature of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nomenclature is not None and len(nomenclature) > 35):
            raise ValueError("Invalid value for `nomenclature`, length must be less than or equal to `35`")  # noqa: E501

        self._nomenclature = nomenclature

    @property
    def objective(self):
        """Gets the objective of this EdFiLearningObjective.  # noqa: E501

        The designated title of the LearningObjective.  # noqa: E501

        :return: The objective of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this EdFiLearningObjective.

        The designated title of the LearningObjective.  # noqa: E501

        :param objective: The objective of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and objective is None:
            raise ValueError("Invalid value for `objective`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                objective is not None and len(objective) > 60):
            raise ValueError("Invalid value for `objective`, length must be less than or equal to `60`")  # noqa: E501

        self._objective = objective

    @property
    def success_criteria(self):
        """Gets the success_criteria of this EdFiLearningObjective.  # noqa: E501

        One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.  # noqa: E501

        :return: The success_criteria of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._success_criteria

    @success_criteria.setter
    def success_criteria(self, success_criteria):
        """Sets the success_criteria of this EdFiLearningObjective.

        One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.  # noqa: E501

        :param success_criteria: The success_criteria of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                success_criteria is not None and len(success_criteria) > 150):
            raise ValueError("Invalid value for `success_criteria`, length must be less than or equal to `150`")  # noqa: E501

        self._success_criteria = success_criteria

    @property
    def etag(self):
        """Gets the etag of this EdFiLearningObjective.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiLearningObjective.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiLearningObjective.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiLearningObjective.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiLearningObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiLearningObjective):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiLearningObjective):
            return True

        return self.to_dict() != other.to_dict()
