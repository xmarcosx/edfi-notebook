# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiInterventionStudy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'intervention_study_identification_code': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'intervention_prescription_reference': 'EdFiInterventionPrescriptionReference',
        'appropriate_grade_levels': 'list[EdFiInterventionStudyAppropriateGradeLevel]',
        'appropriate_sexes': 'list[EdFiInterventionStudyAppropriateSex]',
        'delivery_method_descriptor': 'str',
        'education_contents': 'list[EdFiInterventionStudyEducationContent]',
        'intervention_class_descriptor': 'str',
        'intervention_effectivenesses': 'list[EdFiInterventionStudyInterventionEffectiveness]',
        'learning_resource_metadata_ur_is': 'list[EdFiInterventionStudyLearningResourceMetadataURI]',
        'participants': 'int',
        'population_serveds': 'list[EdFiInterventionStudyPopulationServed]',
        'state_abbreviations': 'list[EdFiInterventionStudyStateAbbreviation]',
        'uris': 'list[EdFiInterventionStudyURI]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'intervention_study_identification_code': 'interventionStudyIdentificationCode',
        'education_organization_reference': 'educationOrganizationReference',
        'intervention_prescription_reference': 'interventionPrescriptionReference',
        'appropriate_grade_levels': 'appropriateGradeLevels',
        'appropriate_sexes': 'appropriateSexes',
        'delivery_method_descriptor': 'deliveryMethodDescriptor',
        'education_contents': 'educationContents',
        'intervention_class_descriptor': 'interventionClassDescriptor',
        'intervention_effectivenesses': 'interventionEffectivenesses',
        'learning_resource_metadata_ur_is': 'learningResourceMetadataURIs',
        'participants': 'participants',
        'population_serveds': 'populationServeds',
        'state_abbreviations': 'stateAbbreviations',
        'uris': 'uris',
        'etag': '_etag'
    }

    def __init__(self, id=None, intervention_study_identification_code=None, education_organization_reference=None, intervention_prescription_reference=None, appropriate_grade_levels=None, appropriate_sexes=None, delivery_method_descriptor=None, education_contents=None, intervention_class_descriptor=None, intervention_effectivenesses=None, learning_resource_metadata_ur_is=None, participants=None, population_serveds=None, state_abbreviations=None, uris=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiInterventionStudy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._intervention_study_identification_code = None
        self._education_organization_reference = None
        self._intervention_prescription_reference = None
        self._appropriate_grade_levels = None
        self._appropriate_sexes = None
        self._delivery_method_descriptor = None
        self._education_contents = None
        self._intervention_class_descriptor = None
        self._intervention_effectivenesses = None
        self._learning_resource_metadata_ur_is = None
        self._participants = None
        self._population_serveds = None
        self._state_abbreviations = None
        self._uris = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.intervention_study_identification_code = intervention_study_identification_code
        self.education_organization_reference = education_organization_reference
        self.intervention_prescription_reference = intervention_prescription_reference
        if appropriate_grade_levels is not None:
            self.appropriate_grade_levels = appropriate_grade_levels
        if appropriate_sexes is not None:
            self.appropriate_sexes = appropriate_sexes
        self.delivery_method_descriptor = delivery_method_descriptor
        if education_contents is not None:
            self.education_contents = education_contents
        self.intervention_class_descriptor = intervention_class_descriptor
        if intervention_effectivenesses is not None:
            self.intervention_effectivenesses = intervention_effectivenesses
        if learning_resource_metadata_ur_is is not None:
            self.learning_resource_metadata_ur_is = learning_resource_metadata_ur_is
        self.participants = participants
        if population_serveds is not None:
            self.population_serveds = population_serveds
        if state_abbreviations is not None:
            self.state_abbreviations = state_abbreviations
        if uris is not None:
            self.uris = uris
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiInterventionStudy.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiInterventionStudy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiInterventionStudy.

          # noqa: E501

        :param id: The id of this EdFiInterventionStudy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intervention_study_identification_code(self):
        """Gets the intervention_study_identification_code of this EdFiInterventionStudy.  # noqa: E501

        A unique number or alphanumeric code assigned to an intervention study.  # noqa: E501

        :return: The intervention_study_identification_code of this EdFiInterventionStudy.  # noqa: E501
        :rtype: str
        """
        return self._intervention_study_identification_code

    @intervention_study_identification_code.setter
    def intervention_study_identification_code(self, intervention_study_identification_code):
        """Sets the intervention_study_identification_code of this EdFiInterventionStudy.

        A unique number or alphanumeric code assigned to an intervention study.  # noqa: E501

        :param intervention_study_identification_code: The intervention_study_identification_code of this EdFiInterventionStudy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and intervention_study_identification_code is None:
            raise ValueError("Invalid value for `intervention_study_identification_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                intervention_study_identification_code is not None and len(intervention_study_identification_code) > 60):
            raise ValueError("Invalid value for `intervention_study_identification_code`, length must be less than or equal to `60`")  # noqa: E501

        self._intervention_study_identification_code = intervention_study_identification_code

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiInterventionStudy.  # noqa: E501


        :return: The education_organization_reference of this EdFiInterventionStudy.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiInterventionStudy.


        :param education_organization_reference: The education_organization_reference of this EdFiInterventionStudy.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def intervention_prescription_reference(self):
        """Gets the intervention_prescription_reference of this EdFiInterventionStudy.  # noqa: E501


        :return: The intervention_prescription_reference of this EdFiInterventionStudy.  # noqa: E501
        :rtype: EdFiInterventionPrescriptionReference
        """
        return self._intervention_prescription_reference

    @intervention_prescription_reference.setter
    def intervention_prescription_reference(self, intervention_prescription_reference):
        """Sets the intervention_prescription_reference of this EdFiInterventionStudy.


        :param intervention_prescription_reference: The intervention_prescription_reference of this EdFiInterventionStudy.  # noqa: E501
        :type: EdFiInterventionPrescriptionReference
        """
        if self._configuration.client_side_validation and intervention_prescription_reference is None:
            raise ValueError("Invalid value for `intervention_prescription_reference`, must not be `None`")  # noqa: E501

        self._intervention_prescription_reference = intervention_prescription_reference

    @property
    def appropriate_grade_levels(self):
        """Gets the appropriate_grade_levels of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.  # noqa: E501

        :return: The appropriate_grade_levels of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyAppropriateGradeLevel]
        """
        return self._appropriate_grade_levels

    @appropriate_grade_levels.setter
    def appropriate_grade_levels(self, appropriate_grade_levels):
        """Sets the appropriate_grade_levels of this EdFiInterventionStudy.

        An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.  # noqa: E501

        :param appropriate_grade_levels: The appropriate_grade_levels of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyAppropriateGradeLevel]
        """

        self._appropriate_grade_levels = appropriate_grade_levels

    @property
    def appropriate_sexes(self):
        """Gets the appropriate_sexes of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.  # noqa: E501

        :return: The appropriate_sexes of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyAppropriateSex]
        """
        return self._appropriate_sexes

    @appropriate_sexes.setter
    def appropriate_sexes(self, appropriate_sexes):
        """Sets the appropriate_sexes of this EdFiInterventionStudy.

        An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.  # noqa: E501

        :param appropriate_sexes: The appropriate_sexes of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyAppropriateSex]
        """

        self._appropriate_sexes = appropriate_sexes

    @property
    def delivery_method_descriptor(self):
        """Gets the delivery_method_descriptor of this EdFiInterventionStudy.  # noqa: E501

        The way in which an intervention was implemented: individual, small group, whole class, or whole school.  # noqa: E501

        :return: The delivery_method_descriptor of this EdFiInterventionStudy.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method_descriptor

    @delivery_method_descriptor.setter
    def delivery_method_descriptor(self, delivery_method_descriptor):
        """Sets the delivery_method_descriptor of this EdFiInterventionStudy.

        The way in which an intervention was implemented: individual, small group, whole class, or whole school.  # noqa: E501

        :param delivery_method_descriptor: The delivery_method_descriptor of this EdFiInterventionStudy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and delivery_method_descriptor is None:
            raise ValueError("Invalid value for `delivery_method_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                delivery_method_descriptor is not None and len(delivery_method_descriptor) > 306):
            raise ValueError("Invalid value for `delivery_method_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._delivery_method_descriptor = delivery_method_descriptor

    @property
    def education_contents(self):
        """Gets the education_contents of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.  # noqa: E501

        :return: The education_contents of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyEducationContent]
        """
        return self._education_contents

    @education_contents.setter
    def education_contents(self, education_contents):
        """Sets the education_contents of this EdFiInterventionStudy.

        An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.  # noqa: E501

        :param education_contents: The education_contents of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyEducationContent]
        """

        self._education_contents = education_contents

    @property
    def intervention_class_descriptor(self):
        """Gets the intervention_class_descriptor of this EdFiInterventionStudy.  # noqa: E501

        The way in which an intervention is used: curriculum, supplement, or practice.  # noqa: E501

        :return: The intervention_class_descriptor of this EdFiInterventionStudy.  # noqa: E501
        :rtype: str
        """
        return self._intervention_class_descriptor

    @intervention_class_descriptor.setter
    def intervention_class_descriptor(self, intervention_class_descriptor):
        """Sets the intervention_class_descriptor of this EdFiInterventionStudy.

        The way in which an intervention is used: curriculum, supplement, or practice.  # noqa: E501

        :param intervention_class_descriptor: The intervention_class_descriptor of this EdFiInterventionStudy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and intervention_class_descriptor is None:
            raise ValueError("Invalid value for `intervention_class_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                intervention_class_descriptor is not None and len(intervention_class_descriptor) > 306):
            raise ValueError("Invalid value for `intervention_class_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._intervention_class_descriptor = intervention_class_descriptor

    @property
    def intervention_effectivenesses(self):
        """Gets the intervention_effectivenesses of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the InterventionStudy per diagnosis.  # noqa: E501

        :return: The intervention_effectivenesses of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyInterventionEffectiveness]
        """
        return self._intervention_effectivenesses

    @intervention_effectivenesses.setter
    def intervention_effectivenesses(self, intervention_effectivenesses):
        """Sets the intervention_effectivenesses of this EdFiInterventionStudy.

        An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the InterventionStudy per diagnosis.  # noqa: E501

        :param intervention_effectivenesses: The intervention_effectivenesses of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyInterventionEffectiveness]
        """

        self._intervention_effectivenesses = intervention_effectivenesses

    @property
    def learning_resource_metadata_ur_is(self):
        """Gets the learning_resource_metadata_ur_is of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :return: The learning_resource_metadata_ur_is of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyLearningResourceMetadataURI]
        """
        return self._learning_resource_metadata_ur_is

    @learning_resource_metadata_ur_is.setter
    def learning_resource_metadata_ur_is(self, learning_resource_metadata_ur_is):
        """Sets the learning_resource_metadata_ur_is of this EdFiInterventionStudy.

        An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :param learning_resource_metadata_ur_is: The learning_resource_metadata_ur_is of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyLearningResourceMetadataURI]
        """

        self._learning_resource_metadata_ur_is = learning_resource_metadata_ur_is

    @property
    def participants(self):
        """Gets the participants of this EdFiInterventionStudy.  # noqa: E501

        The number of participants observed in the study.  # noqa: E501

        :return: The participants of this EdFiInterventionStudy.  # noqa: E501
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this EdFiInterventionStudy.

        The number of participants observed in the study.  # noqa: E501

        :param participants: The participants of this EdFiInterventionStudy.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and participants is None:
            raise ValueError("Invalid value for `participants`, must not be `None`")  # noqa: E501

        self._participants = participants

    @property
    def population_serveds(self):
        """Gets the population_serveds of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the InterventionStudy.  # noqa: E501

        :return: The population_serveds of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyPopulationServed]
        """
        return self._population_serveds

    @population_serveds.setter
    def population_serveds(self, population_serveds):
        """Sets the population_serveds of this EdFiInterventionStudy.

        An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the InterventionStudy.  # noqa: E501

        :param population_serveds: The population_serveds of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyPopulationServed]
        """

        self._population_serveds = population_serveds

    @property
    def state_abbreviations(self):
        """Gets the state_abbreviations of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.  # noqa: E501

        :return: The state_abbreviations of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyStateAbbreviation]
        """
        return self._state_abbreviations

    @state_abbreviations.setter
    def state_abbreviations(self, state_abbreviations):
        """Sets the state_abbreviations of this EdFiInterventionStudy.

        An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.  # noqa: E501

        :param state_abbreviations: The state_abbreviations of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyStateAbbreviation]
        """

        self._state_abbreviations = state_abbreviations

    @property
    def uris(self):
        """Gets the uris of this EdFiInterventionStudy.  # noqa: E501

        An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :return: The uris of this EdFiInterventionStudy.  # noqa: E501
        :rtype: list[EdFiInterventionStudyURI]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this EdFiInterventionStudy.

        An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :param uris: The uris of this EdFiInterventionStudy.  # noqa: E501
        :type: list[EdFiInterventionStudyURI]
        """

        self._uris = uris

    @property
    def etag(self):
        """Gets the etag of this EdFiInterventionStudy.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiInterventionStudy.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiInterventionStudy.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiInterventionStudy.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiInterventionStudy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiInterventionStudy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiInterventionStudy):
            return True

        return self.to_dict() != other.to_dict()
