# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmRubricDimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rubric_rating': 'int',
        'evaluation_element_reference': 'TpdmEvaluationElementReference',
        'criterion_description': 'str',
        'dimension_order': 'int',
        'rubric_rating_level_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'rubric_rating': 'rubricRating',
        'evaluation_element_reference': 'evaluationElementReference',
        'criterion_description': 'criterionDescription',
        'dimension_order': 'dimensionOrder',
        'rubric_rating_level_descriptor': 'rubricRatingLevelDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, rubric_rating=None, evaluation_element_reference=None, criterion_description=None, dimension_order=None, rubric_rating_level_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmRubricDimension - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._rubric_rating = None
        self._evaluation_element_reference = None
        self._criterion_description = None
        self._dimension_order = None
        self._rubric_rating_level_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.rubric_rating = rubric_rating
        self.evaluation_element_reference = evaluation_element_reference
        self.criterion_description = criterion_description
        if dimension_order is not None:
            self.dimension_order = dimension_order
        if rubric_rating_level_descriptor is not None:
            self.rubric_rating_level_descriptor = rubric_rating_level_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmRubricDimension.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmRubricDimension.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmRubricDimension.

          # noqa: E501

        :param id: The id of this TpdmRubricDimension.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rubric_rating(self):
        """Gets the rubric_rating of this TpdmRubricDimension.  # noqa: E501

        The rating achieved for the rubric dimension.  # noqa: E501

        :return: The rubric_rating of this TpdmRubricDimension.  # noqa: E501
        :rtype: int
        """
        return self._rubric_rating

    @rubric_rating.setter
    def rubric_rating(self, rubric_rating):
        """Sets the rubric_rating of this TpdmRubricDimension.

        The rating achieved for the rubric dimension.  # noqa: E501

        :param rubric_rating: The rubric_rating of this TpdmRubricDimension.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and rubric_rating is None:
            raise ValueError("Invalid value for `rubric_rating`, must not be `None`")  # noqa: E501

        self._rubric_rating = rubric_rating

    @property
    def evaluation_element_reference(self):
        """Gets the evaluation_element_reference of this TpdmRubricDimension.  # noqa: E501


        :return: The evaluation_element_reference of this TpdmRubricDimension.  # noqa: E501
        :rtype: TpdmEvaluationElementReference
        """
        return self._evaluation_element_reference

    @evaluation_element_reference.setter
    def evaluation_element_reference(self, evaluation_element_reference):
        """Sets the evaluation_element_reference of this TpdmRubricDimension.


        :param evaluation_element_reference: The evaluation_element_reference of this TpdmRubricDimension.  # noqa: E501
        :type: TpdmEvaluationElementReference
        """
        if self._configuration.client_side_validation and evaluation_element_reference is None:
            raise ValueError("Invalid value for `evaluation_element_reference`, must not be `None`")  # noqa: E501

        self._evaluation_element_reference = evaluation_element_reference

    @property
    def criterion_description(self):
        """Gets the criterion_description of this TpdmRubricDimension.  # noqa: E501

        The criterion description for the rubric dimension.  # noqa: E501

        :return: The criterion_description of this TpdmRubricDimension.  # noqa: E501
        :rtype: str
        """
        return self._criterion_description

    @criterion_description.setter
    def criterion_description(self, criterion_description):
        """Sets the criterion_description of this TpdmRubricDimension.

        The criterion description for the rubric dimension.  # noqa: E501

        :param criterion_description: The criterion_description of this TpdmRubricDimension.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and criterion_description is None:
            raise ValueError("Invalid value for `criterion_description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                criterion_description is not None and len(criterion_description) > 1024):
            raise ValueError("Invalid value for `criterion_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._criterion_description = criterion_description

    @property
    def dimension_order(self):
        """Gets the dimension_order of this TpdmRubricDimension.  # noqa: E501

        The order for the rubric dimension.  # noqa: E501

        :return: The dimension_order of this TpdmRubricDimension.  # noqa: E501
        :rtype: int
        """
        return self._dimension_order

    @dimension_order.setter
    def dimension_order(self, dimension_order):
        """Sets the dimension_order of this TpdmRubricDimension.

        The order for the rubric dimension.  # noqa: E501

        :param dimension_order: The dimension_order of this TpdmRubricDimension.  # noqa: E501
        :type: int
        """

        self._dimension_order = dimension_order

    @property
    def rubric_rating_level_descriptor(self):
        """Gets the rubric_rating_level_descriptor of this TpdmRubricDimension.  # noqa: E501

        The rating level achieved for the rubric dimension.  # noqa: E501

        :return: The rubric_rating_level_descriptor of this TpdmRubricDimension.  # noqa: E501
        :rtype: str
        """
        return self._rubric_rating_level_descriptor

    @rubric_rating_level_descriptor.setter
    def rubric_rating_level_descriptor(self, rubric_rating_level_descriptor):
        """Sets the rubric_rating_level_descriptor of this TpdmRubricDimension.

        The rating level achieved for the rubric dimension.  # noqa: E501

        :param rubric_rating_level_descriptor: The rubric_rating_level_descriptor of this TpdmRubricDimension.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                rubric_rating_level_descriptor is not None and len(rubric_rating_level_descriptor) > 306):
            raise ValueError("Invalid value for `rubric_rating_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._rubric_rating_level_descriptor = rubric_rating_level_descriptor

    @property
    def etag(self):
        """Gets the etag of this TpdmRubricDimension.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmRubricDimension.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmRubricDimension.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmRubricDimension.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmRubricDimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmRubricDimension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmRubricDimension):
            return True

        return self.to_dict() != other.to_dict()
