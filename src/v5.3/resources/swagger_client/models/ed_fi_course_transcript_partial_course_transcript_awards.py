# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCourseTranscriptPartialCourseTranscriptAwards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'award_date': 'date',
        'method_credit_earned_descriptor': 'str',
        'earned_credits': 'float',
        'letter_grade_earned': 'str',
        'numeric_grade_earned': 'str'
    }

    attribute_map = {
        'award_date': 'awardDate',
        'method_credit_earned_descriptor': 'methodCreditEarnedDescriptor',
        'earned_credits': 'earnedCredits',
        'letter_grade_earned': 'letterGradeEarned',
        'numeric_grade_earned': 'numericGradeEarned'
    }

    def __init__(self, award_date=None, method_credit_earned_descriptor=None, earned_credits=None, letter_grade_earned=None, numeric_grade_earned=None, _configuration=None):  # noqa: E501
        """EdFiCourseTranscriptPartialCourseTranscriptAwards - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._award_date = None
        self._method_credit_earned_descriptor = None
        self._earned_credits = None
        self._letter_grade_earned = None
        self._numeric_grade_earned = None
        self.discriminator = None

        self.award_date = award_date
        if method_credit_earned_descriptor is not None:
            self.method_credit_earned_descriptor = method_credit_earned_descriptor
        self.earned_credits = earned_credits
        if letter_grade_earned is not None:
            self.letter_grade_earned = letter_grade_earned
        if numeric_grade_earned is not None:
            self.numeric_grade_earned = numeric_grade_earned

    @property
    def award_date(self):
        """Gets the award_date of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501

        The date the partial credits and/or grades were awarded or earned.  # noqa: E501

        :return: The award_date of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :rtype: date
        """
        return self._award_date

    @award_date.setter
    def award_date(self, award_date):
        """Sets the award_date of this EdFiCourseTranscriptPartialCourseTranscriptAwards.

        The date the partial credits and/or grades were awarded or earned.  # noqa: E501

        :param award_date: The award_date of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and award_date is None:
            raise ValueError("Invalid value for `award_date`, must not be `None`")  # noqa: E501

        self._award_date = award_date

    @property
    def method_credit_earned_descriptor(self):
        """Gets the method_credit_earned_descriptor of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501

        The method the credits were earned.  # noqa: E501

        :return: The method_credit_earned_descriptor of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :rtype: str
        """
        return self._method_credit_earned_descriptor

    @method_credit_earned_descriptor.setter
    def method_credit_earned_descriptor(self, method_credit_earned_descriptor):
        """Sets the method_credit_earned_descriptor of this EdFiCourseTranscriptPartialCourseTranscriptAwards.

        The method the credits were earned.  # noqa: E501

        :param method_credit_earned_descriptor: The method_credit_earned_descriptor of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                method_credit_earned_descriptor is not None and len(method_credit_earned_descriptor) > 306):
            raise ValueError("Invalid value for `method_credit_earned_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._method_credit_earned_descriptor = method_credit_earned_descriptor

    @property
    def earned_credits(self):
        """Gets the earned_credits of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501

        The number of credits a student earned for completing a given course.  # noqa: E501

        :return: The earned_credits of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :rtype: float
        """
        return self._earned_credits

    @earned_credits.setter
    def earned_credits(self, earned_credits):
        """Sets the earned_credits of this EdFiCourseTranscriptPartialCourseTranscriptAwards.

        The number of credits a student earned for completing a given course.  # noqa: E501

        :param earned_credits: The earned_credits of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and earned_credits is None:
            raise ValueError("Invalid value for `earned_credits`, must not be `None`")  # noqa: E501

        self._earned_credits = earned_credits

    @property
    def letter_grade_earned(self):
        """Gets the letter_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501

        The indicator of student performance as submitted by the instructor.  # noqa: E501

        :return: The letter_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :rtype: str
        """
        return self._letter_grade_earned

    @letter_grade_earned.setter
    def letter_grade_earned(self, letter_grade_earned):
        """Sets the letter_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.

        The indicator of student performance as submitted by the instructor.  # noqa: E501

        :param letter_grade_earned: The letter_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                letter_grade_earned is not None and len(letter_grade_earned) > 20):
            raise ValueError("Invalid value for `letter_grade_earned`, length must be less than or equal to `20`")  # noqa: E501

        self._letter_grade_earned = letter_grade_earned

    @property
    def numeric_grade_earned(self):
        """Gets the numeric_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501

        The indicator of student performance as submitted by the instructor.  # noqa: E501

        :return: The numeric_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :rtype: str
        """
        return self._numeric_grade_earned

    @numeric_grade_earned.setter
    def numeric_grade_earned(self, numeric_grade_earned):
        """Sets the numeric_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.

        The indicator of student performance as submitted by the instructor.  # noqa: E501

        :param numeric_grade_earned: The numeric_grade_earned of this EdFiCourseTranscriptPartialCourseTranscriptAwards.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                numeric_grade_earned is not None and len(numeric_grade_earned) > 20):
            raise ValueError("Invalid value for `numeric_grade_earned`, length must be less than or equal to `20`")  # noqa: E501

        self._numeric_grade_earned = numeric_grade_earned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCourseTranscriptPartialCourseTranscriptAwards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCourseTranscriptPartialCourseTranscriptAwards):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCourseTranscriptPartialCourseTranscriptAwards):
            return True

        return self.to_dict() != other.to_dict()
