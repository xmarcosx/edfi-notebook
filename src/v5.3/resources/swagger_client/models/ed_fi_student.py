# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'student_unique_id': 'str',
        'person_reference': 'EdFiPersonReference',
        'birth_city': 'str',
        'birth_country_descriptor': 'str',
        'birth_date': 'date',
        'birth_international_province': 'str',
        'birth_sex_descriptor': 'str',
        'birth_state_abbreviation_descriptor': 'str',
        'citizenship_status_descriptor': 'str',
        'date_entered_us': 'date',
        'first_name': 'str',
        'generation_code_suffix': 'str',
        'identification_documents': 'list[EdFiStudentIdentificationDocument]',
        'last_surname': 'str',
        'maiden_name': 'str',
        'middle_name': 'str',
        'multiple_birth_status': 'bool',
        'other_names': 'list[EdFiStudentOtherName]',
        'personal_identification_documents': 'list[EdFiStudentPersonalIdentificationDocument]',
        'personal_title_prefix': 'str',
        'visas': 'list[EdFiStudentVisa]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'student_unique_id': 'studentUniqueId',
        'person_reference': 'personReference',
        'birth_city': 'birthCity',
        'birth_country_descriptor': 'birthCountryDescriptor',
        'birth_date': 'birthDate',
        'birth_international_province': 'birthInternationalProvince',
        'birth_sex_descriptor': 'birthSexDescriptor',
        'birth_state_abbreviation_descriptor': 'birthStateAbbreviationDescriptor',
        'citizenship_status_descriptor': 'citizenshipStatusDescriptor',
        'date_entered_us': 'dateEnteredUS',
        'first_name': 'firstName',
        'generation_code_suffix': 'generationCodeSuffix',
        'identification_documents': 'identificationDocuments',
        'last_surname': 'lastSurname',
        'maiden_name': 'maidenName',
        'middle_name': 'middleName',
        'multiple_birth_status': 'multipleBirthStatus',
        'other_names': 'otherNames',
        'personal_identification_documents': 'personalIdentificationDocuments',
        'personal_title_prefix': 'personalTitlePrefix',
        'visas': 'visas',
        'etag': '_etag'
    }

    def __init__(self, id=None, student_unique_id=None, person_reference=None, birth_city=None, birth_country_descriptor=None, birth_date=None, birth_international_province=None, birth_sex_descriptor=None, birth_state_abbreviation_descriptor=None, citizenship_status_descriptor=None, date_entered_us=None, first_name=None, generation_code_suffix=None, identification_documents=None, last_surname=None, maiden_name=None, middle_name=None, multiple_birth_status=None, other_names=None, personal_identification_documents=None, personal_title_prefix=None, visas=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._student_unique_id = None
        self._person_reference = None
        self._birth_city = None
        self._birth_country_descriptor = None
        self._birth_date = None
        self._birth_international_province = None
        self._birth_sex_descriptor = None
        self._birth_state_abbreviation_descriptor = None
        self._citizenship_status_descriptor = None
        self._date_entered_us = None
        self._first_name = None
        self._generation_code_suffix = None
        self._identification_documents = None
        self._last_surname = None
        self._maiden_name = None
        self._middle_name = None
        self._multiple_birth_status = None
        self._other_names = None
        self._personal_identification_documents = None
        self._personal_title_prefix = None
        self._visas = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.student_unique_id = student_unique_id
        if person_reference is not None:
            self.person_reference = person_reference
        if birth_city is not None:
            self.birth_city = birth_city
        if birth_country_descriptor is not None:
            self.birth_country_descriptor = birth_country_descriptor
        self.birth_date = birth_date
        if birth_international_province is not None:
            self.birth_international_province = birth_international_province
        if birth_sex_descriptor is not None:
            self.birth_sex_descriptor = birth_sex_descriptor
        if birth_state_abbreviation_descriptor is not None:
            self.birth_state_abbreviation_descriptor = birth_state_abbreviation_descriptor
        if citizenship_status_descriptor is not None:
            self.citizenship_status_descriptor = citizenship_status_descriptor
        if date_entered_us is not None:
            self.date_entered_us = date_entered_us
        self.first_name = first_name
        if generation_code_suffix is not None:
            self.generation_code_suffix = generation_code_suffix
        if identification_documents is not None:
            self.identification_documents = identification_documents
        self.last_surname = last_surname
        if maiden_name is not None:
            self.maiden_name = maiden_name
        if middle_name is not None:
            self.middle_name = middle_name
        if multiple_birth_status is not None:
            self.multiple_birth_status = multiple_birth_status
        if other_names is not None:
            self.other_names = other_names
        if personal_identification_documents is not None:
            self.personal_identification_documents = personal_identification_documents
        if personal_title_prefix is not None:
            self.personal_title_prefix = personal_title_prefix
        if visas is not None:
            self.visas = visas
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudent.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudent.

          # noqa: E501

        :param id: The id of this EdFiStudent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def student_unique_id(self):
        """Gets the student_unique_id of this EdFiStudent.  # noqa: E501

        A unique alphanumeric code assigned to a student.  # noqa: E501

        :return: The student_unique_id of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._student_unique_id

    @student_unique_id.setter
    def student_unique_id(self, student_unique_id):
        """Sets the student_unique_id of this EdFiStudent.

        A unique alphanumeric code assigned to a student.  # noqa: E501

        :param student_unique_id: The student_unique_id of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and student_unique_id is None:
            raise ValueError("Invalid value for `student_unique_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                student_unique_id is not None and len(student_unique_id) > 32):
            raise ValueError("Invalid value for `student_unique_id`, length must be less than or equal to `32`")  # noqa: E501

        self._student_unique_id = student_unique_id

    @property
    def person_reference(self):
        """Gets the person_reference of this EdFiStudent.  # noqa: E501


        :return: The person_reference of this EdFiStudent.  # noqa: E501
        :rtype: EdFiPersonReference
        """
        return self._person_reference

    @person_reference.setter
    def person_reference(self, person_reference):
        """Sets the person_reference of this EdFiStudent.


        :param person_reference: The person_reference of this EdFiStudent.  # noqa: E501
        :type: EdFiPersonReference
        """

        self._person_reference = person_reference

    @property
    def birth_city(self):
        """Gets the birth_city of this EdFiStudent.  # noqa: E501

        The city the student was born in.  # noqa: E501

        :return: The birth_city of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this EdFiStudent.

        The city the student was born in.  # noqa: E501

        :param birth_city: The birth_city of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_city is not None and len(birth_city) > 30):
            raise ValueError("Invalid value for `birth_city`, length must be less than or equal to `30`")  # noqa: E501

        self._birth_city = birth_city

    @property
    def birth_country_descriptor(self):
        """Gets the birth_country_descriptor of this EdFiStudent.  # noqa: E501

        The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.  # noqa: E501

        :return: The birth_country_descriptor of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._birth_country_descriptor

    @birth_country_descriptor.setter
    def birth_country_descriptor(self, birth_country_descriptor):
        """Sets the birth_country_descriptor of this EdFiStudent.

        The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.  # noqa: E501

        :param birth_country_descriptor: The birth_country_descriptor of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_country_descriptor is not None and len(birth_country_descriptor) > 306):
            raise ValueError("Invalid value for `birth_country_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._birth_country_descriptor = birth_country_descriptor

    @property
    def birth_date(self):
        """Gets the birth_date of this EdFiStudent.  # noqa: E501

        The month, day, and year on which an individual was born.  # noqa: E501

        :return: The birth_date of this EdFiStudent.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this EdFiStudent.

        The month, day, and year on which an individual was born.  # noqa: E501

        :param birth_date: The birth_date of this EdFiStudent.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._birth_date = birth_date

    @property
    def birth_international_province(self):
        """Gets the birth_international_province of this EdFiStudent.  # noqa: E501

        For students born outside of the U.S., the Province or jurisdiction in which an individual is born.  # noqa: E501

        :return: The birth_international_province of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._birth_international_province

    @birth_international_province.setter
    def birth_international_province(self, birth_international_province):
        """Sets the birth_international_province of this EdFiStudent.

        For students born outside of the U.S., the Province or jurisdiction in which an individual is born.  # noqa: E501

        :param birth_international_province: The birth_international_province of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_international_province is not None and len(birth_international_province) > 150):
            raise ValueError("Invalid value for `birth_international_province`, length must be less than or equal to `150`")  # noqa: E501

        self._birth_international_province = birth_international_province

    @property
    def birth_sex_descriptor(self):
        """Gets the birth_sex_descriptor of this EdFiStudent.  # noqa: E501

        A person's gender at birth.  # noqa: E501

        :return: The birth_sex_descriptor of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._birth_sex_descriptor

    @birth_sex_descriptor.setter
    def birth_sex_descriptor(self, birth_sex_descriptor):
        """Sets the birth_sex_descriptor of this EdFiStudent.

        A person's gender at birth.  # noqa: E501

        :param birth_sex_descriptor: The birth_sex_descriptor of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_sex_descriptor is not None and len(birth_sex_descriptor) > 306):
            raise ValueError("Invalid value for `birth_sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._birth_sex_descriptor = birth_sex_descriptor

    @property
    def birth_state_abbreviation_descriptor(self):
        """Gets the birth_state_abbreviation_descriptor of this EdFiStudent.  # noqa: E501

        The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.  # noqa: E501

        :return: The birth_state_abbreviation_descriptor of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._birth_state_abbreviation_descriptor

    @birth_state_abbreviation_descriptor.setter
    def birth_state_abbreviation_descriptor(self, birth_state_abbreviation_descriptor):
        """Sets the birth_state_abbreviation_descriptor of this EdFiStudent.

        The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.  # noqa: E501

        :param birth_state_abbreviation_descriptor: The birth_state_abbreviation_descriptor of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_state_abbreviation_descriptor is not None and len(birth_state_abbreviation_descriptor) > 306):
            raise ValueError("Invalid value for `birth_state_abbreviation_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._birth_state_abbreviation_descriptor = birth_state_abbreviation_descriptor

    @property
    def citizenship_status_descriptor(self):
        """Gets the citizenship_status_descriptor of this EdFiStudent.  # noqa: E501

        An indicator of whether or not the person is a U.S. citizen.  # noqa: E501

        :return: The citizenship_status_descriptor of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._citizenship_status_descriptor

    @citizenship_status_descriptor.setter
    def citizenship_status_descriptor(self, citizenship_status_descriptor):
        """Sets the citizenship_status_descriptor of this EdFiStudent.

        An indicator of whether or not the person is a U.S. citizen.  # noqa: E501

        :param citizenship_status_descriptor: The citizenship_status_descriptor of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                citizenship_status_descriptor is not None and len(citizenship_status_descriptor) > 306):
            raise ValueError("Invalid value for `citizenship_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._citizenship_status_descriptor = citizenship_status_descriptor

    @property
    def date_entered_us(self):
        """Gets the date_entered_us of this EdFiStudent.  # noqa: E501

        For students born outside of the U.S., the date the student entered the U.S.  # noqa: E501

        :return: The date_entered_us of this EdFiStudent.  # noqa: E501
        :rtype: date
        """
        return self._date_entered_us

    @date_entered_us.setter
    def date_entered_us(self, date_entered_us):
        """Sets the date_entered_us of this EdFiStudent.

        For students born outside of the U.S., the date the student entered the U.S.  # noqa: E501

        :param date_entered_us: The date_entered_us of this EdFiStudent.  # noqa: E501
        :type: date
        """

        self._date_entered_us = date_entered_us

    @property
    def first_name(self):
        """Gets the first_name of this EdFiStudent.  # noqa: E501

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :return: The first_name of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EdFiStudent.

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :param first_name: The first_name of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 75):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `75`")  # noqa: E501

        self._first_name = first_name

    @property
    def generation_code_suffix(self):
        """Gets the generation_code_suffix of this EdFiStudent.  # noqa: E501

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :return: The generation_code_suffix of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._generation_code_suffix

    @generation_code_suffix.setter
    def generation_code_suffix(self, generation_code_suffix):
        """Sets the generation_code_suffix of this EdFiStudent.

        An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).  # noqa: E501

        :param generation_code_suffix: The generation_code_suffix of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                generation_code_suffix is not None and len(generation_code_suffix) > 10):
            raise ValueError("Invalid value for `generation_code_suffix`, length must be less than or equal to `10`")  # noqa: E501

        self._generation_code_suffix = generation_code_suffix

    @property
    def identification_documents(self):
        """Gets the identification_documents of this EdFiStudent.  # noqa: E501

        An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.  # noqa: E501

        :return: The identification_documents of this EdFiStudent.  # noqa: E501
        :rtype: list[EdFiStudentIdentificationDocument]
        """
        return self._identification_documents

    @identification_documents.setter
    def identification_documents(self, identification_documents):
        """Sets the identification_documents of this EdFiStudent.

        An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.  # noqa: E501

        :param identification_documents: The identification_documents of this EdFiStudent.  # noqa: E501
        :type: list[EdFiStudentIdentificationDocument]
        """

        self._identification_documents = identification_documents

    @property
    def last_surname(self):
        """Gets the last_surname of this EdFiStudent.  # noqa: E501

        The name borne in common by members of a family.  # noqa: E501

        :return: The last_surname of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._last_surname

    @last_surname.setter
    def last_surname(self, last_surname):
        """Sets the last_surname of this EdFiStudent.

        The name borne in common by members of a family.  # noqa: E501

        :param last_surname: The last_surname of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_surname is None:
            raise ValueError("Invalid value for `last_surname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_surname is not None and len(last_surname) > 75):
            raise ValueError("Invalid value for `last_surname`, length must be less than or equal to `75`")  # noqa: E501

        self._last_surname = last_surname

    @property
    def maiden_name(self):
        """Gets the maiden_name of this EdFiStudent.  # noqa: E501

        The person's maiden name.  # noqa: E501

        :return: The maiden_name of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this EdFiStudent.

        The person's maiden name.  # noqa: E501

        :param maiden_name: The maiden_name of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                maiden_name is not None and len(maiden_name) > 75):
            raise ValueError("Invalid value for `maiden_name`, length must be less than or equal to `75`")  # noqa: E501

        self._maiden_name = maiden_name

    @property
    def middle_name(self):
        """Gets the middle_name of this EdFiStudent.  # noqa: E501

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :return: The middle_name of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this EdFiStudent.

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :param middle_name: The middle_name of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 75):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `75`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def multiple_birth_status(self):
        """Gets the multiple_birth_status of this EdFiStudent.  # noqa: E501

        Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)  # noqa: E501

        :return: The multiple_birth_status of this EdFiStudent.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_birth_status

    @multiple_birth_status.setter
    def multiple_birth_status(self, multiple_birth_status):
        """Sets the multiple_birth_status of this EdFiStudent.

        Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)  # noqa: E501

        :param multiple_birth_status: The multiple_birth_status of this EdFiStudent.  # noqa: E501
        :type: bool
        """

        self._multiple_birth_status = multiple_birth_status

    @property
    def other_names(self):
        """Gets the other_names of this EdFiStudent.  # noqa: E501

        An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.  # noqa: E501

        :return: The other_names of this EdFiStudent.  # noqa: E501
        :rtype: list[EdFiStudentOtherName]
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this EdFiStudent.

        An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.  # noqa: E501

        :param other_names: The other_names of this EdFiStudent.  # noqa: E501
        :type: list[EdFiStudentOtherName]
        """

        self._other_names = other_names

    @property
    def personal_identification_documents(self):
        """Gets the personal_identification_documents of this EdFiStudent.  # noqa: E501

        An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :return: The personal_identification_documents of this EdFiStudent.  # noqa: E501
        :rtype: list[EdFiStudentPersonalIdentificationDocument]
        """
        return self._personal_identification_documents

    @personal_identification_documents.setter
    def personal_identification_documents(self, personal_identification_documents):
        """Sets the personal_identification_documents of this EdFiStudent.

        An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.  # noqa: E501

        :param personal_identification_documents: The personal_identification_documents of this EdFiStudent.  # noqa: E501
        :type: list[EdFiStudentPersonalIdentificationDocument]
        """

        self._personal_identification_documents = personal_identification_documents

    @property
    def personal_title_prefix(self):
        """Gets the personal_title_prefix of this EdFiStudent.  # noqa: E501

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :return: The personal_title_prefix of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._personal_title_prefix

    @personal_title_prefix.setter
    def personal_title_prefix(self, personal_title_prefix):
        """Sets the personal_title_prefix of this EdFiStudent.

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :param personal_title_prefix: The personal_title_prefix of this EdFiStudent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                personal_title_prefix is not None and len(personal_title_prefix) > 30):
            raise ValueError("Invalid value for `personal_title_prefix`, length must be less than or equal to `30`")  # noqa: E501

        self._personal_title_prefix = personal_title_prefix

    @property
    def visas(self):
        """Gets the visas of this EdFiStudent.  # noqa: E501

        An unordered collection of studentVisas. An indicator of a non-US citizen's Visa type.  # noqa: E501

        :return: The visas of this EdFiStudent.  # noqa: E501
        :rtype: list[EdFiStudentVisa]
        """
        return self._visas

    @visas.setter
    def visas(self, visas):
        """Sets the visas of this EdFiStudent.

        An unordered collection of studentVisas. An indicator of a non-US citizen's Visa type.  # noqa: E501

        :param visas: The visas of this EdFiStudent.  # noqa: E501
        :type: list[EdFiStudentVisa]
        """

        self._visas = visas

    @property
    def etag(self):
        """Gets the etag of this EdFiStudent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudent):
            return True

        return self.to_dict() != other.to_dict()
