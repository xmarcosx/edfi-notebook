# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiEducationContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content_identifier': 'str',
        'learning_standard_reference': 'EdFiLearningStandardReference',
        'additional_authors_indicator': 'bool',
        'appropriate_grade_levels': 'list[EdFiEducationContentAppropriateGradeLevel]',
        'appropriate_sexes': 'list[EdFiEducationContentAppropriateSex]',
        'authors': 'list[EdFiEducationContentAuthor]',
        'content_class_descriptor': 'str',
        'cost': 'float',
        'cost_rate_descriptor': 'str',
        'derivative_source_education_contents': 'list[EdFiEducationContentDerivativeSourceEducationContent]',
        'derivative_source_learning_resource_metadata_ur_is': 'list[EdFiEducationContentDerivativeSourceLearningResourceMetadataURI]',
        'derivative_source_ur_is': 'list[EdFiEducationContentDerivativeSourceURI]',
        'description': 'str',
        'interactivity_style_descriptor': 'str',
        'languages': 'list[EdFiEducationContentLanguage]',
        'learning_resource_metadata_uri': 'str',
        'namespace': 'str',
        'publication_date': 'date',
        'publication_year': 'int',
        'publisher': 'str',
        'short_description': 'str',
        'time_required': 'str',
        'use_rights_url': 'str',
        'version': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'content_identifier': 'contentIdentifier',
        'learning_standard_reference': 'learningStandardReference',
        'additional_authors_indicator': 'additionalAuthorsIndicator',
        'appropriate_grade_levels': 'appropriateGradeLevels',
        'appropriate_sexes': 'appropriateSexes',
        'authors': 'authors',
        'content_class_descriptor': 'contentClassDescriptor',
        'cost': 'cost',
        'cost_rate_descriptor': 'costRateDescriptor',
        'derivative_source_education_contents': 'derivativeSourceEducationContents',
        'derivative_source_learning_resource_metadata_ur_is': 'derivativeSourceLearningResourceMetadataURIs',
        'derivative_source_ur_is': 'derivativeSourceURIs',
        'description': 'description',
        'interactivity_style_descriptor': 'interactivityStyleDescriptor',
        'languages': 'languages',
        'learning_resource_metadata_uri': 'learningResourceMetadataURI',
        'namespace': 'namespace',
        'publication_date': 'publicationDate',
        'publication_year': 'publicationYear',
        'publisher': 'publisher',
        'short_description': 'shortDescription',
        'time_required': 'timeRequired',
        'use_rights_url': 'useRightsURL',
        'version': 'version',
        'etag': '_etag'
    }

    def __init__(self, id=None, content_identifier=None, learning_standard_reference=None, additional_authors_indicator=None, appropriate_grade_levels=None, appropriate_sexes=None, authors=None, content_class_descriptor=None, cost=None, cost_rate_descriptor=None, derivative_source_education_contents=None, derivative_source_learning_resource_metadata_ur_is=None, derivative_source_ur_is=None, description=None, interactivity_style_descriptor=None, languages=None, learning_resource_metadata_uri=None, namespace=None, publication_date=None, publication_year=None, publisher=None, short_description=None, time_required=None, use_rights_url=None, version=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiEducationContent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._content_identifier = None
        self._learning_standard_reference = None
        self._additional_authors_indicator = None
        self._appropriate_grade_levels = None
        self._appropriate_sexes = None
        self._authors = None
        self._content_class_descriptor = None
        self._cost = None
        self._cost_rate_descriptor = None
        self._derivative_source_education_contents = None
        self._derivative_source_learning_resource_metadata_ur_is = None
        self._derivative_source_ur_is = None
        self._description = None
        self._interactivity_style_descriptor = None
        self._languages = None
        self._learning_resource_metadata_uri = None
        self._namespace = None
        self._publication_date = None
        self._publication_year = None
        self._publisher = None
        self._short_description = None
        self._time_required = None
        self._use_rights_url = None
        self._version = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.content_identifier = content_identifier
        if learning_standard_reference is not None:
            self.learning_standard_reference = learning_standard_reference
        if additional_authors_indicator is not None:
            self.additional_authors_indicator = additional_authors_indicator
        if appropriate_grade_levels is not None:
            self.appropriate_grade_levels = appropriate_grade_levels
        if appropriate_sexes is not None:
            self.appropriate_sexes = appropriate_sexes
        if authors is not None:
            self.authors = authors
        if content_class_descriptor is not None:
            self.content_class_descriptor = content_class_descriptor
        if cost is not None:
            self.cost = cost
        if cost_rate_descriptor is not None:
            self.cost_rate_descriptor = cost_rate_descriptor
        if derivative_source_education_contents is not None:
            self.derivative_source_education_contents = derivative_source_education_contents
        if derivative_source_learning_resource_metadata_ur_is is not None:
            self.derivative_source_learning_resource_metadata_ur_is = derivative_source_learning_resource_metadata_ur_is
        if derivative_source_ur_is is not None:
            self.derivative_source_ur_is = derivative_source_ur_is
        if description is not None:
            self.description = description
        if interactivity_style_descriptor is not None:
            self.interactivity_style_descriptor = interactivity_style_descriptor
        if languages is not None:
            self.languages = languages
        if learning_resource_metadata_uri is not None:
            self.learning_resource_metadata_uri = learning_resource_metadata_uri
        self.namespace = namespace
        if publication_date is not None:
            self.publication_date = publication_date
        if publication_year is not None:
            self.publication_year = publication_year
        if publisher is not None:
            self.publisher = publisher
        if short_description is not None:
            self.short_description = short_description
        if time_required is not None:
            self.time_required = time_required
        if use_rights_url is not None:
            self.use_rights_url = use_rights_url
        if version is not None:
            self.version = version
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiEducationContent.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiEducationContent.

          # noqa: E501

        :param id: The id of this EdFiEducationContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def content_identifier(self):
        """Gets the content_identifier of this EdFiEducationContent.  # noqa: E501

        A unique identifier for the EducationContent.  # noqa: E501

        :return: The content_identifier of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._content_identifier

    @content_identifier.setter
    def content_identifier(self, content_identifier):
        """Sets the content_identifier of this EdFiEducationContent.

        A unique identifier for the EducationContent.  # noqa: E501

        :param content_identifier: The content_identifier of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content_identifier is None:
            raise ValueError("Invalid value for `content_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                content_identifier is not None and len(content_identifier) > 225):
            raise ValueError("Invalid value for `content_identifier`, length must be less than or equal to `225`")  # noqa: E501

        self._content_identifier = content_identifier

    @property
    def learning_standard_reference(self):
        """Gets the learning_standard_reference of this EdFiEducationContent.  # noqa: E501


        :return: The learning_standard_reference of this EdFiEducationContent.  # noqa: E501
        :rtype: EdFiLearningStandardReference
        """
        return self._learning_standard_reference

    @learning_standard_reference.setter
    def learning_standard_reference(self, learning_standard_reference):
        """Sets the learning_standard_reference of this EdFiEducationContent.


        :param learning_standard_reference: The learning_standard_reference of this EdFiEducationContent.  # noqa: E501
        :type: EdFiLearningStandardReference
        """

        self._learning_standard_reference = learning_standard_reference

    @property
    def additional_authors_indicator(self):
        """Gets the additional_authors_indicator of this EdFiEducationContent.  # noqa: E501

        Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\".  # noqa: E501

        :return: The additional_authors_indicator of this EdFiEducationContent.  # noqa: E501
        :rtype: bool
        """
        return self._additional_authors_indicator

    @additional_authors_indicator.setter
    def additional_authors_indicator(self, additional_authors_indicator):
        """Sets the additional_authors_indicator of this EdFiEducationContent.

        Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\".  # noqa: E501

        :param additional_authors_indicator: The additional_authors_indicator of this EdFiEducationContent.  # noqa: E501
        :type: bool
        """

        self._additional_authors_indicator = additional_authors_indicator

    @property
    def appropriate_grade_levels(self):
        """Gets the appropriate_grade_levels of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable-if omitted, considered generally applicable.  # noqa: E501

        :return: The appropriate_grade_levels of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentAppropriateGradeLevel]
        """
        return self._appropriate_grade_levels

    @appropriate_grade_levels.setter
    def appropriate_grade_levels(self, appropriate_grade_levels):
        """Sets the appropriate_grade_levels of this EdFiEducationContent.

        An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable-if omitted, considered generally applicable.  # noqa: E501

        :param appropriate_grade_levels: The appropriate_grade_levels of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentAppropriateGradeLevel]
        """

        self._appropriate_grade_levels = appropriate_grade_levels

    @property
    def appropriate_sexes(self):
        """Gets the appropriate_sexes of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.  # noqa: E501

        :return: The appropriate_sexes of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentAppropriateSex]
        """
        return self._appropriate_sexes

    @appropriate_sexes.setter
    def appropriate_sexes(self, appropriate_sexes):
        """Sets the appropriate_sexes of this EdFiEducationContent.

        An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.  # noqa: E501

        :param appropriate_sexes: The appropriate_sexes of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentAppropriateSex]
        """

        self._appropriate_sexes = appropriate_sexes

    @property
    def authors(self):
        """Gets the authors of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.  # noqa: E501

        :return: The authors of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentAuthor]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this EdFiEducationContent.

        An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.  # noqa: E501

        :param authors: The authors of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentAuthor]
        """

        self._authors = authors

    @property
    def content_class_descriptor(self):
        """Gets the content_class_descriptor of this EdFiEducationContent.  # noqa: E501

        The predominate type or kind characterizing the learning resource.  # noqa: E501

        :return: The content_class_descriptor of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._content_class_descriptor

    @content_class_descriptor.setter
    def content_class_descriptor(self, content_class_descriptor):
        """Sets the content_class_descriptor of this EdFiEducationContent.

        The predominate type or kind characterizing the learning resource.  # noqa: E501

        :param content_class_descriptor: The content_class_descriptor of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                content_class_descriptor is not None and len(content_class_descriptor) > 306):
            raise ValueError("Invalid value for `content_class_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._content_class_descriptor = content_class_descriptor

    @property
    def cost(self):
        """Gets the cost of this EdFiEducationContent.  # noqa: E501

        An amount that has to be paid or spent to buy or obtain the EducationContent.  # noqa: E501

        :return: The cost of this EdFiEducationContent.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this EdFiEducationContent.

        An amount that has to be paid or spent to buy or obtain the EducationContent.  # noqa: E501

        :param cost: The cost of this EdFiEducationContent.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def cost_rate_descriptor(self):
        """Gets the cost_rate_descriptor of this EdFiEducationContent.  # noqa: E501

        The rate by which the cost applies.  # noqa: E501

        :return: The cost_rate_descriptor of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._cost_rate_descriptor

    @cost_rate_descriptor.setter
    def cost_rate_descriptor(self, cost_rate_descriptor):
        """Sets the cost_rate_descriptor of this EdFiEducationContent.

        The rate by which the cost applies.  # noqa: E501

        :param cost_rate_descriptor: The cost_rate_descriptor of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cost_rate_descriptor is not None and len(cost_rate_descriptor) > 306):
            raise ValueError("Invalid value for `cost_rate_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._cost_rate_descriptor = cost_rate_descriptor

    @property
    def derivative_source_education_contents(self):
        """Gets the derivative_source_education_contents of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.  # noqa: E501

        :return: The derivative_source_education_contents of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentDerivativeSourceEducationContent]
        """
        return self._derivative_source_education_contents

    @derivative_source_education_contents.setter
    def derivative_source_education_contents(self, derivative_source_education_contents):
        """Sets the derivative_source_education_contents of this EdFiEducationContent.

        An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.  # noqa: E501

        :param derivative_source_education_contents: The derivative_source_education_contents of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentDerivativeSourceEducationContent]
        """

        self._derivative_source_education_contents = derivative_source_education_contents

    @property
    def derivative_source_learning_resource_metadata_ur_is(self):
        """Gets the derivative_source_learning_resource_metadata_ur_is of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :return: The derivative_source_learning_resource_metadata_ur_is of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentDerivativeSourceLearningResourceMetadataURI]
        """
        return self._derivative_source_learning_resource_metadata_ur_is

    @derivative_source_learning_resource_metadata_ur_is.setter
    def derivative_source_learning_resource_metadata_ur_is(self, derivative_source_learning_resource_metadata_ur_is):
        """Sets the derivative_source_learning_resource_metadata_ur_is of this EdFiEducationContent.

        An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :param derivative_source_learning_resource_metadata_ur_is: The derivative_source_learning_resource_metadata_ur_is of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentDerivativeSourceLearningResourceMetadataURI]
        """

        self._derivative_source_learning_resource_metadata_ur_is = derivative_source_learning_resource_metadata_ur_is

    @property
    def derivative_source_ur_is(self):
        """Gets the derivative_source_ur_is of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :return: The derivative_source_ur_is of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentDerivativeSourceURI]
        """
        return self._derivative_source_ur_is

    @derivative_source_ur_is.setter
    def derivative_source_ur_is(self, derivative_source_ur_is):
        """Sets the derivative_source_ur_is of this EdFiEducationContent.

        An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :param derivative_source_ur_is: The derivative_source_ur_is of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentDerivativeSourceURI]
        """

        self._derivative_source_ur_is = derivative_source_ur_is

    @property
    def description(self):
        """Gets the description of this EdFiEducationContent.  # noqa: E501

        An extended written representation of the education content.  # noqa: E501

        :return: The description of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdFiEducationContent.

        An extended written representation of the education content.  # noqa: E501

        :param description: The description of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def interactivity_style_descriptor(self):
        """Gets the interactivity_style_descriptor of this EdFiEducationContent.  # noqa: E501

        The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.  # noqa: E501

        :return: The interactivity_style_descriptor of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._interactivity_style_descriptor

    @interactivity_style_descriptor.setter
    def interactivity_style_descriptor(self, interactivity_style_descriptor):
        """Sets the interactivity_style_descriptor of this EdFiEducationContent.

        The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.  # noqa: E501

        :param interactivity_style_descriptor: The interactivity_style_descriptor of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                interactivity_style_descriptor is not None and len(interactivity_style_descriptor) > 306):
            raise ValueError("Invalid value for `interactivity_style_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._interactivity_style_descriptor = interactivity_style_descriptor

    @property
    def languages(self):
        """Gets the languages of this EdFiEducationContent.  # noqa: E501

        An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.  # noqa: E501

        :return: The languages of this EdFiEducationContent.  # noqa: E501
        :rtype: list[EdFiEducationContentLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this EdFiEducationContent.

        An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.  # noqa: E501

        :param languages: The languages of this EdFiEducationContent.  # noqa: E501
        :type: list[EdFiEducationContentLanguage]
        """

        self._languages = languages

    @property
    def learning_resource_metadata_uri(self):
        """Gets the learning_resource_metadata_uri of this EdFiEducationContent.  # noqa: E501

        The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :return: The learning_resource_metadata_uri of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._learning_resource_metadata_uri

    @learning_resource_metadata_uri.setter
    def learning_resource_metadata_uri(self, learning_resource_metadata_uri):
        """Sets the learning_resource_metadata_uri of this EdFiEducationContent.

        The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :param learning_resource_metadata_uri: The learning_resource_metadata_uri of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                learning_resource_metadata_uri is not None and len(learning_resource_metadata_uri) > 255):
            raise ValueError("Invalid value for `learning_resource_metadata_uri`, length must be less than or equal to `255`")  # noqa: E501

        self._learning_resource_metadata_uri = learning_resource_metadata_uri

    @property
    def namespace(self):
        """Gets the namespace of this EdFiEducationContent.  # noqa: E501

        Namespace for the EducationContent.  # noqa: E501

        :return: The namespace of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiEducationContent.

        Namespace for the EducationContent.  # noqa: E501

        :param namespace: The namespace of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def publication_date(self):
        """Gets the publication_date of this EdFiEducationContent.  # noqa: E501

        The date on which this content was first published.  # noqa: E501

        :return: The publication_date of this EdFiEducationContent.  # noqa: E501
        :rtype: date
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this EdFiEducationContent.

        The date on which this content was first published.  # noqa: E501

        :param publication_date: The publication_date of this EdFiEducationContent.  # noqa: E501
        :type: date
        """

        self._publication_date = publication_date

    @property
    def publication_year(self):
        """Gets the publication_year of this EdFiEducationContent.  # noqa: E501

        The year at which this content was first published.  # noqa: E501

        :return: The publication_year of this EdFiEducationContent.  # noqa: E501
        :rtype: int
        """
        return self._publication_year

    @publication_year.setter
    def publication_year(self, publication_year):
        """Sets the publication_year of this EdFiEducationContent.

        The year at which this content was first published.  # noqa: E501

        :param publication_year: The publication_year of this EdFiEducationContent.  # noqa: E501
        :type: int
        """

        self._publication_year = publication_year

    @property
    def publisher(self):
        """Gets the publisher of this EdFiEducationContent.  # noqa: E501

        The organization credited with publishing the resource.  # noqa: E501

        :return: The publisher of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this EdFiEducationContent.

        The organization credited with publishing the resource.  # noqa: E501

        :param publisher: The publisher of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                publisher is not None and len(publisher) > 50):
            raise ValueError("Invalid value for `publisher`, length must be less than or equal to `50`")  # noqa: E501

        self._publisher = publisher

    @property
    def short_description(self):
        """Gets the short_description of this EdFiEducationContent.  # noqa: E501

        A short description or name of the entity.  # noqa: E501

        :return: The short_description of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this EdFiEducationContent.

        A short description or name of the entity.  # noqa: E501

        :param short_description: The short_description of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_description is not None and len(short_description) > 75):
            raise ValueError("Invalid value for `short_description`, length must be less than or equal to `75`")  # noqa: E501

        self._short_description = short_description

    @property
    def time_required(self):
        """Gets the time_required of this EdFiEducationContent.  # noqa: E501

        Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.  # noqa: E501

        :return: The time_required of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._time_required

    @time_required.setter
    def time_required(self, time_required):
        """Sets the time_required of this EdFiEducationContent.

        Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.  # noqa: E501

        :param time_required: The time_required of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                time_required is not None and len(time_required) > 30):
            raise ValueError("Invalid value for `time_required`, length must be less than or equal to `30`")  # noqa: E501

        self._time_required = time_required

    @property
    def use_rights_url(self):
        """Gets the use_rights_url of this EdFiEducationContent.  # noqa: E501

        The URL where the owner specifies permissions for using the resource.  # noqa: E501

        :return: The use_rights_url of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._use_rights_url

    @use_rights_url.setter
    def use_rights_url(self, use_rights_url):
        """Sets the use_rights_url of this EdFiEducationContent.

        The URL where the owner specifies permissions for using the resource.  # noqa: E501

        :param use_rights_url: The use_rights_url of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                use_rights_url is not None and len(use_rights_url) > 255):
            raise ValueError("Invalid value for `use_rights_url`, length must be less than or equal to `255`")  # noqa: E501

        self._use_rights_url = use_rights_url

    @property
    def version(self):
        """Gets the version of this EdFiEducationContent.  # noqa: E501

        The version identifier for the content.  # noqa: E501

        :return: The version of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EdFiEducationContent.

        The version identifier for the content.  # noqa: E501

        :param version: The version of this EdFiEducationContent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                version is not None and len(version) > 10):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `10`")  # noqa: E501

        self._version = version

    @property
    def etag(self):
        """Gets the etag of this EdFiEducationContent.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiEducationContent.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiEducationContent.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiEducationContent.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiEducationContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiEducationContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiEducationContent):
            return True

        return self.to_dict() != other.to_dict()
