# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmPerformanceEvaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'evaluation_period_descriptor': 'str',
        'performance_evaluation_title': 'str',
        'performance_evaluation_type_descriptor': 'str',
        'term_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'academic_subject_descriptor': 'str',
        'grade_levels': 'list[TpdmPerformanceEvaluationGradeLevel]',
        'performance_evaluation_description': 'str',
        'rating_levels': 'list[TpdmPerformanceEvaluationRatingLevel]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'evaluation_period_descriptor': 'evaluationPeriodDescriptor',
        'performance_evaluation_title': 'performanceEvaluationTitle',
        'performance_evaluation_type_descriptor': 'performanceEvaluationTypeDescriptor',
        'term_descriptor': 'termDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'academic_subject_descriptor': 'academicSubjectDescriptor',
        'grade_levels': 'gradeLevels',
        'performance_evaluation_description': 'performanceEvaluationDescription',
        'rating_levels': 'ratingLevels',
        'etag': '_etag'
    }

    def __init__(self, id=None, evaluation_period_descriptor=None, performance_evaluation_title=None, performance_evaluation_type_descriptor=None, term_descriptor=None, education_organization_reference=None, school_year_type_reference=None, academic_subject_descriptor=None, grade_levels=None, performance_evaluation_description=None, rating_levels=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmPerformanceEvaluation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._evaluation_period_descriptor = None
        self._performance_evaluation_title = None
        self._performance_evaluation_type_descriptor = None
        self._term_descriptor = None
        self._education_organization_reference = None
        self._school_year_type_reference = None
        self._academic_subject_descriptor = None
        self._grade_levels = None
        self._performance_evaluation_description = None
        self._rating_levels = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.evaluation_period_descriptor = evaluation_period_descriptor
        self.performance_evaluation_title = performance_evaluation_title
        self.performance_evaluation_type_descriptor = performance_evaluation_type_descriptor
        self.term_descriptor = term_descriptor
        self.education_organization_reference = education_organization_reference
        self.school_year_type_reference = school_year_type_reference
        if academic_subject_descriptor is not None:
            self.academic_subject_descriptor = academic_subject_descriptor
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if performance_evaluation_description is not None:
            self.performance_evaluation_description = performance_evaluation_description
        if rating_levels is not None:
            self.rating_levels = rating_levels
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmPerformanceEvaluation.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmPerformanceEvaluation.

          # noqa: E501

        :param id: The id of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def evaluation_period_descriptor(self):
        """Gets the evaluation_period_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501

        The period for the evaluation.  # noqa: E501

        :return: The evaluation_period_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_period_descriptor

    @evaluation_period_descriptor.setter
    def evaluation_period_descriptor(self, evaluation_period_descriptor):
        """Sets the evaluation_period_descriptor of this TpdmPerformanceEvaluation.

        The period for the evaluation.  # noqa: E501

        :param evaluation_period_descriptor: The evaluation_period_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and evaluation_period_descriptor is None:
            raise ValueError("Invalid value for `evaluation_period_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                evaluation_period_descriptor is not None and len(evaluation_period_descriptor) > 306):
            raise ValueError("Invalid value for `evaluation_period_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._evaluation_period_descriptor = evaluation_period_descriptor

    @property
    def performance_evaluation_title(self):
        """Gets the performance_evaluation_title of this TpdmPerformanceEvaluation.  # noqa: E501

        An assigned unique identifier for the performance evaluation.  # noqa: E501

        :return: The performance_evaluation_title of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._performance_evaluation_title

    @performance_evaluation_title.setter
    def performance_evaluation_title(self, performance_evaluation_title):
        """Sets the performance_evaluation_title of this TpdmPerformanceEvaluation.

        An assigned unique identifier for the performance evaluation.  # noqa: E501

        :param performance_evaluation_title: The performance_evaluation_title of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and performance_evaluation_title is None:
            raise ValueError("Invalid value for `performance_evaluation_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                performance_evaluation_title is not None and len(performance_evaluation_title) > 50):
            raise ValueError("Invalid value for `performance_evaluation_title`, length must be less than or equal to `50`")  # noqa: E501

        self._performance_evaluation_title = performance_evaluation_title

    @property
    def performance_evaluation_type_descriptor(self):
        """Gets the performance_evaluation_type_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501

        The type of performance evaluation conducted.  # noqa: E501

        :return: The performance_evaluation_type_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._performance_evaluation_type_descriptor

    @performance_evaluation_type_descriptor.setter
    def performance_evaluation_type_descriptor(self, performance_evaluation_type_descriptor):
        """Sets the performance_evaluation_type_descriptor of this TpdmPerformanceEvaluation.

        The type of performance evaluation conducted.  # noqa: E501

        :param performance_evaluation_type_descriptor: The performance_evaluation_type_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and performance_evaluation_type_descriptor is None:
            raise ValueError("Invalid value for `performance_evaluation_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                performance_evaluation_type_descriptor is not None and len(performance_evaluation_type_descriptor) > 306):
            raise ValueError("Invalid value for `performance_evaluation_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._performance_evaluation_type_descriptor = performance_evaluation_type_descriptor

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501

        The term for the session during the school year.  # noqa: E501

        :return: The term_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this TpdmPerformanceEvaluation.

        The term for the session during the school year.  # noqa: E501

        :param term_descriptor: The term_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and term_descriptor is None:
            raise ValueError("Invalid value for `term_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                term_descriptor is not None and len(term_descriptor) > 306):
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this TpdmPerformanceEvaluation.  # noqa: E501


        :return: The education_organization_reference of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this TpdmPerformanceEvaluation.


        :param education_organization_reference: The education_organization_reference of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this TpdmPerformanceEvaluation.  # noqa: E501


        :return: The school_year_type_reference of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this TpdmPerformanceEvaluation.


        :param school_year_type_reference: The school_year_type_reference of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def academic_subject_descriptor(self):
        """Gets the academic_subject_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501

        The description of the content or subject area of a performance evaluation.  # noqa: E501

        :return: The academic_subject_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._academic_subject_descriptor

    @academic_subject_descriptor.setter
    def academic_subject_descriptor(self, academic_subject_descriptor):
        """Sets the academic_subject_descriptor of this TpdmPerformanceEvaluation.

        The description of the content or subject area of a performance evaluation.  # noqa: E501

        :param academic_subject_descriptor: The academic_subject_descriptor of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                academic_subject_descriptor is not None and len(academic_subject_descriptor) > 306):
            raise ValueError("Invalid value for `academic_subject_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._academic_subject_descriptor = academic_subject_descriptor

    @property
    def grade_levels(self):
        """Gets the grade_levels of this TpdmPerformanceEvaluation.  # noqa: E501

        An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.  # noqa: E501

        :return: The grade_levels of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: list[TpdmPerformanceEvaluationGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this TpdmPerformanceEvaluation.

        An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.  # noqa: E501

        :param grade_levels: The grade_levels of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: list[TpdmPerformanceEvaluationGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def performance_evaluation_description(self):
        """Gets the performance_evaluation_description of this TpdmPerformanceEvaluation.  # noqa: E501

        The long description of the Performance Evaluation.  # noqa: E501

        :return: The performance_evaluation_description of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._performance_evaluation_description

    @performance_evaluation_description.setter
    def performance_evaluation_description(self, performance_evaluation_description):
        """Sets the performance_evaluation_description of this TpdmPerformanceEvaluation.

        The long description of the Performance Evaluation.  # noqa: E501

        :param performance_evaluation_description: The performance_evaluation_description of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                performance_evaluation_description is not None and len(performance_evaluation_description) > 255):
            raise ValueError("Invalid value for `performance_evaluation_description`, length must be less than or equal to `255`")  # noqa: E501

        self._performance_evaluation_description = performance_evaluation_description

    @property
    def rating_levels(self):
        """Gets the rating_levels of this TpdmPerformanceEvaluation.  # noqa: E501

        An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.  # noqa: E501

        :return: The rating_levels of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: list[TpdmPerformanceEvaluationRatingLevel]
        """
        return self._rating_levels

    @rating_levels.setter
    def rating_levels(self, rating_levels):
        """Sets the rating_levels of this TpdmPerformanceEvaluation.

        An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.  # noqa: E501

        :param rating_levels: The rating_levels of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: list[TpdmPerformanceEvaluationRatingLevel]
        """

        self._rating_levels = rating_levels

    @property
    def etag(self):
        """Gets the etag of this TpdmPerformanceEvaluation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmPerformanceEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmPerformanceEvaluation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmPerformanceEvaluation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmPerformanceEvaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmPerformanceEvaluation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmPerformanceEvaluation):
            return True

        return self.to_dict() != other.to_dict()
