# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiBellSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'bell_schedule_name': 'str',
        'class_periods': 'list[EdFiBellScheduleClassPeriod]',
        'school_reference': 'EdFiSchoolReference',
        'alternate_day_name': 'str',
        'dates': 'list[EdFiBellScheduleDate]',
        'end_time': 'str',
        'grade_levels': 'list[EdFiBellScheduleGradeLevel]',
        'start_time': 'str',
        'total_instructional_time': 'int',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'bell_schedule_name': 'bellScheduleName',
        'class_periods': 'classPeriods',
        'school_reference': 'schoolReference',
        'alternate_day_name': 'alternateDayName',
        'dates': 'dates',
        'end_time': 'endTime',
        'grade_levels': 'gradeLevels',
        'start_time': 'startTime',
        'total_instructional_time': 'totalInstructionalTime',
        'etag': '_etag'
    }

    def __init__(self, id=None, bell_schedule_name=None, class_periods=None, school_reference=None, alternate_day_name=None, dates=None, end_time=None, grade_levels=None, start_time=None, total_instructional_time=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiBellSchedule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._bell_schedule_name = None
        self._class_periods = None
        self._school_reference = None
        self._alternate_day_name = None
        self._dates = None
        self._end_time = None
        self._grade_levels = None
        self._start_time = None
        self._total_instructional_time = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.bell_schedule_name = bell_schedule_name
        self.class_periods = class_periods
        self.school_reference = school_reference
        if alternate_day_name is not None:
            self.alternate_day_name = alternate_day_name
        if dates is not None:
            self.dates = dates
        if end_time is not None:
            self.end_time = end_time
        if grade_levels is not None:
            self.grade_levels = grade_levels
        if start_time is not None:
            self.start_time = start_time
        if total_instructional_time is not None:
            self.total_instructional_time = total_instructional_time
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiBellSchedule.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiBellSchedule.

          # noqa: E501

        :param id: The id of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def bell_schedule_name(self):
        """Gets the bell_schedule_name of this EdFiBellSchedule.  # noqa: E501

        Name or title of the BellSchedule.  # noqa: E501

        :return: The bell_schedule_name of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._bell_schedule_name

    @bell_schedule_name.setter
    def bell_schedule_name(self, bell_schedule_name):
        """Sets the bell_schedule_name of this EdFiBellSchedule.

        Name or title of the BellSchedule.  # noqa: E501

        :param bell_schedule_name: The bell_schedule_name of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bell_schedule_name is None:
            raise ValueError("Invalid value for `bell_schedule_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bell_schedule_name is not None and len(bell_schedule_name) > 60):
            raise ValueError("Invalid value for `bell_schedule_name`, length must be less than or equal to `60`")  # noqa: E501

        self._bell_schedule_name = bell_schedule_name

    @property
    def class_periods(self):
        """Gets the class_periods of this EdFiBellSchedule.  # noqa: E501

        An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule.  # noqa: E501

        :return: The class_periods of this EdFiBellSchedule.  # noqa: E501
        :rtype: list[EdFiBellScheduleClassPeriod]
        """
        return self._class_periods

    @class_periods.setter
    def class_periods(self, class_periods):
        """Sets the class_periods of this EdFiBellSchedule.

        An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule.  # noqa: E501

        :param class_periods: The class_periods of this EdFiBellSchedule.  # noqa: E501
        :type: list[EdFiBellScheduleClassPeriod]
        """
        if self._configuration.client_side_validation and class_periods is None:
            raise ValueError("Invalid value for `class_periods`, must not be `None`")  # noqa: E501

        self._class_periods = class_periods

    @property
    def school_reference(self):
        """Gets the school_reference of this EdFiBellSchedule.  # noqa: E501


        :return: The school_reference of this EdFiBellSchedule.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this EdFiBellSchedule.


        :param school_reference: The school_reference of this EdFiBellSchedule.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and school_reference is None:
            raise ValueError("Invalid value for `school_reference`, must not be `None`")  # noqa: E501

        self._school_reference = school_reference

    @property
    def alternate_day_name(self):
        """Gets the alternate_day_name of this EdFiBellSchedule.  # noqa: E501

        An alternate name for the day (e.g., Red, Blue).  # noqa: E501

        :return: The alternate_day_name of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._alternate_day_name

    @alternate_day_name.setter
    def alternate_day_name(self, alternate_day_name):
        """Sets the alternate_day_name of this EdFiBellSchedule.

        An alternate name for the day (e.g., Red, Blue).  # noqa: E501

        :param alternate_day_name: The alternate_day_name of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                alternate_day_name is not None and len(alternate_day_name) > 20):
            raise ValueError("Invalid value for `alternate_day_name`, length must be less than or equal to `20`")  # noqa: E501

        self._alternate_day_name = alternate_day_name

    @property
    def dates(self):
        """Gets the dates of this EdFiBellSchedule.  # noqa: E501

        An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies.  # noqa: E501

        :return: The dates of this EdFiBellSchedule.  # noqa: E501
        :rtype: list[EdFiBellScheduleDate]
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this EdFiBellSchedule.

        An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies.  # noqa: E501

        :param dates: The dates of this EdFiBellSchedule.  # noqa: E501
        :type: list[EdFiBellScheduleDate]
        """

        self._dates = dates

    @property
    def end_time(self):
        """Gets the end_time of this EdFiBellSchedule.  # noqa: E501

        An indication of the time of day the bell schedule ends.  # noqa: E501

        :return: The end_time of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EdFiBellSchedule.

        An indication of the time of day the bell schedule ends.  # noqa: E501

        :param end_time: The end_time of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def grade_levels(self):
        """Gets the grade_levels of this EdFiBellSchedule.  # noqa: E501

        An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to.  # noqa: E501

        :return: The grade_levels of this EdFiBellSchedule.  # noqa: E501
        :rtype: list[EdFiBellScheduleGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this EdFiBellSchedule.

        An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to.  # noqa: E501

        :param grade_levels: The grade_levels of this EdFiBellSchedule.  # noqa: E501
        :type: list[EdFiBellScheduleGradeLevel]
        """

        self._grade_levels = grade_levels

    @property
    def start_time(self):
        """Gets the start_time of this EdFiBellSchedule.  # noqa: E501

        An indication of the time of day the bell schedule begins.  # noqa: E501

        :return: The start_time of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EdFiBellSchedule.

        An indication of the time of day the bell schedule begins.  # noqa: E501

        :param start_time: The start_time of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def total_instructional_time(self):
        """Gets the total_instructional_time of this EdFiBellSchedule.  # noqa: E501

        The total instructional time in minutes per day for the bell schedule.  # noqa: E501

        :return: The total_instructional_time of this EdFiBellSchedule.  # noqa: E501
        :rtype: int
        """
        return self._total_instructional_time

    @total_instructional_time.setter
    def total_instructional_time(self, total_instructional_time):
        """Sets the total_instructional_time of this EdFiBellSchedule.

        The total instructional time in minutes per day for the bell schedule.  # noqa: E501

        :param total_instructional_time: The total_instructional_time of this EdFiBellSchedule.  # noqa: E501
        :type: int
        """

        self._total_instructional_time = total_instructional_time

    @property
    def etag(self):
        """Gets the etag of this EdFiBellSchedule.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiBellSchedule.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiBellSchedule.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiBellSchedule.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiBellSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiBellSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiBellSchedule):
            return True

        return self.to_dict() != other.to_dict()
