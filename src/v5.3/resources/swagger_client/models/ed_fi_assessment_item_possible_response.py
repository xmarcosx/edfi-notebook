# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiAssessmentItemPossibleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_value': 'str',
        'correct_response': 'bool',
        'response_description': 'str'
    }

    attribute_map = {
        'response_value': 'responseValue',
        'correct_response': 'correctResponse',
        'response_description': 'responseDescription'
    }

    def __init__(self, response_value=None, correct_response=None, response_description=None, _configuration=None):  # noqa: E501
        """EdFiAssessmentItemPossibleResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._response_value = None
        self._correct_response = None
        self._response_description = None
        self.discriminator = None

        self.response_value = response_value
        if correct_response is not None:
            self.correct_response = correct_response
        if response_description is not None:
            self.response_description = response_description

    @property
    def response_value(self):
        """Gets the response_value of this EdFiAssessmentItemPossibleResponse.  # noqa: E501

        The response value, often an option number or code value (e.g., 1, 2, A, B, true, false).  # noqa: E501

        :return: The response_value of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_value

    @response_value.setter
    def response_value(self, response_value):
        """Sets the response_value of this EdFiAssessmentItemPossibleResponse.

        The response value, often an option number or code value (e.g., 1, 2, A, B, true, false).  # noqa: E501

        :param response_value: The response_value of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and response_value is None:
            raise ValueError("Invalid value for `response_value`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                response_value is not None and len(response_value) > 60):
            raise ValueError("Invalid value for `response_value`, length must be less than or equal to `60`")  # noqa: E501

        self._response_value = response_value

    @property
    def correct_response(self):
        """Gets the correct_response of this EdFiAssessmentItemPossibleResponse.  # noqa: E501

        Indicates the response is correct.  # noqa: E501

        :return: The correct_response of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._correct_response

    @correct_response.setter
    def correct_response(self, correct_response):
        """Sets the correct_response of this EdFiAssessmentItemPossibleResponse.

        Indicates the response is correct.  # noqa: E501

        :param correct_response: The correct_response of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :type: bool
        """

        self._correct_response = correct_response

    @property
    def response_description(self):
        """Gets the response_description of this EdFiAssessmentItemPossibleResponse.  # noqa: E501

        Additional text provided to define the response value.  # noqa: E501

        :return: The response_description of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_description

    @response_description.setter
    def response_description(self, response_description):
        """Sets the response_description of this EdFiAssessmentItemPossibleResponse.

        Additional text provided to define the response value.  # noqa: E501

        :param response_description: The response_description of this EdFiAssessmentItemPossibleResponse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                response_description is not None and len(response_description) > 1024):
            raise ValueError("Invalid value for `response_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._response_description = response_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiAssessmentItemPossibleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiAssessmentItemPossibleResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiAssessmentItemPossibleResponse):
            return True

        return self.to_dict() != other.to_dict()
