# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StudentSchoolAssociationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_student_school_association_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_student_school_association_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_student_school_association_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_student_school_association_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_student_school_association_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_student_school_association_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_student_school_association_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_student_school_association_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletes_student_school_associations(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_student_school_associations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_student_school_associations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deletes_student_school_associations_with_http_info(**kwargs)  # noqa: E501
            return data

    def deletes_student_school_associations_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_student_school_associations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_student_school_associations" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_student_school_associations`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_student_school_associations`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations/deletes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeletedResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_student_school_associations(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_school_associations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param date entry_date: The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        :param int school_id: The identifier assigned to a school.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param str calendar_code: The identifier for the Calendar.
        :param int school_year: The school year associated with the student's enrollment.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str graduation_plan_type_descriptor: The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        :param int graduation_school_year: The school year the student is expected to graduate.
        :param int class_of_school_year: Projected High School graduation year.
        :param str entry_grade_level_reason_descriptor: The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        :param str entry_type_descriptor: The process by which a student enters a school during a given academic session.
        :param str exit_withdraw_type_descriptor: The circumstances under which the student exited from membership in an educational institution.
        :param str entry_grade_level_descriptor: The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        :param str residency_status_descriptor: An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        :param bool employed_while_enrolled: An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        :param date exit_withdraw_date: The recorded exit or withdraw date for the student.
        :param float full_time_equivalency: The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
        :param str id: 
        :param bool primary_school: Indicates if a given enrollment record should be considered the primary record for a student.
        :param bool repeat_grade_indicator: An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        :param bool school_choice_transfer: An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        :param bool term_completion_indicator: Idicates whether or not a student completed the most recent school term.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiStudentSchoolAssociation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_student_school_associations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_student_school_associations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_student_school_associations_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_school_associations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param date entry_date: The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        :param int school_id: The identifier assigned to a school.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param str calendar_code: The identifier for the Calendar.
        :param int school_year: The school year associated with the student's enrollment.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str graduation_plan_type_descriptor: The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        :param int graduation_school_year: The school year the student is expected to graduate.
        :param int class_of_school_year: Projected High School graduation year.
        :param str entry_grade_level_reason_descriptor: The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        :param str entry_type_descriptor: The process by which a student enters a school during a given academic session.
        :param str exit_withdraw_type_descriptor: The circumstances under which the student exited from membership in an educational institution.
        :param str entry_grade_level_descriptor: The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        :param str residency_status_descriptor: An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        :param bool employed_while_enrolled: An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        :param date exit_withdraw_date: The recorded exit or withdraw date for the student.
        :param float full_time_equivalency: The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
        :param str id: 
        :param bool primary_school: Indicates if a given enrollment record should be considered the primary record for a student.
        :param bool repeat_grade_indicator: An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        :param bool school_choice_transfer: An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        :param bool term_completion_indicator: Idicates whether or not a student completed the most recent school term.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiStudentSchoolAssociation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'total_count', 'entry_date', 'school_id', 'student_unique_id', 'calendar_code', 'school_year', 'education_organization_id', 'graduation_plan_type_descriptor', 'graduation_school_year', 'class_of_school_year', 'entry_grade_level_reason_descriptor', 'entry_type_descriptor', 'exit_withdraw_type_descriptor', 'entry_grade_level_descriptor', 'residency_status_descriptor', 'employed_while_enrolled', 'exit_withdraw_date', 'full_time_equivalency', 'id', 'primary_school', 'repeat_grade_indicator', 'school_choice_transfer', 'term_completion_indicator', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_student_school_associations" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_student_school_associations`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_student_school_associations`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('student_unique_id' in params and
                                                       len(params['student_unique_id']) > 32):
            raise ValueError("Invalid value for parameter `student_unique_id` when calling `get_student_school_associations`, length must be less than or equal to `32`")  # noqa: E501
        if self.api_client.client_side_validation and ('calendar_code' in params and
                                                       len(params['calendar_code']) > 60):
            raise ValueError("Invalid value for parameter `calendar_code` when calling `get_student_school_associations`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('graduation_plan_type_descriptor' in params and
                                                       len(params['graduation_plan_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `graduation_plan_type_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('entry_grade_level_reason_descriptor' in params and
                                                       len(params['entry_grade_level_reason_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `entry_grade_level_reason_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('entry_type_descriptor' in params and
                                                       len(params['entry_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `entry_type_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('exit_withdraw_type_descriptor' in params and
                                                       len(params['exit_withdraw_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `exit_withdraw_type_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('entry_grade_level_descriptor' in params and
                                                       len(params['entry_grade_level_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `entry_grade_level_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('residency_status_descriptor' in params and
                                                       len(params['residency_status_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `residency_status_descriptor` when calling `get_student_school_associations`, length must be less than or equal to `306`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501
        if 'total_count' in params:
            query_params.append(('totalCount', params['total_count']))  # noqa: E501
        if 'entry_date' in params:
            query_params.append(('entryDate', params['entry_date']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'student_unique_id' in params:
            query_params.append(('studentUniqueId', params['student_unique_id']))  # noqa: E501
        if 'calendar_code' in params:
            query_params.append(('calendarCode', params['calendar_code']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'education_organization_id' in params:
            query_params.append(('educationOrganizationId', params['education_organization_id']))  # noqa: E501
        if 'graduation_plan_type_descriptor' in params:
            query_params.append(('graduationPlanTypeDescriptor', params['graduation_plan_type_descriptor']))  # noqa: E501
        if 'graduation_school_year' in params:
            query_params.append(('graduationSchoolYear', params['graduation_school_year']))  # noqa: E501
        if 'class_of_school_year' in params:
            query_params.append(('classOfSchoolYear', params['class_of_school_year']))  # noqa: E501
        if 'entry_grade_level_reason_descriptor' in params:
            query_params.append(('entryGradeLevelReasonDescriptor', params['entry_grade_level_reason_descriptor']))  # noqa: E501
        if 'entry_type_descriptor' in params:
            query_params.append(('entryTypeDescriptor', params['entry_type_descriptor']))  # noqa: E501
        if 'exit_withdraw_type_descriptor' in params:
            query_params.append(('exitWithdrawTypeDescriptor', params['exit_withdraw_type_descriptor']))  # noqa: E501
        if 'entry_grade_level_descriptor' in params:
            query_params.append(('entryGradeLevelDescriptor', params['entry_grade_level_descriptor']))  # noqa: E501
        if 'residency_status_descriptor' in params:
            query_params.append(('residencyStatusDescriptor', params['residency_status_descriptor']))  # noqa: E501
        if 'employed_while_enrolled' in params:
            query_params.append(('employedWhileEnrolled', params['employed_while_enrolled']))  # noqa: E501
        if 'exit_withdraw_date' in params:
            query_params.append(('exitWithdrawDate', params['exit_withdraw_date']))  # noqa: E501
        if 'full_time_equivalency' in params:
            query_params.append(('fullTimeEquivalency', params['full_time_equivalency']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'primary_school' in params:
            query_params.append(('primarySchool', params['primary_school']))  # noqa: E501
        if 'repeat_grade_indicator' in params:
            query_params.append(('repeatGradeIndicator', params['repeat_grade_indicator']))  # noqa: E501
        if 'school_choice_transfer' in params:
            query_params.append(('schoolChoiceTransfer', params['school_choice_transfer']))  # noqa: E501
        if 'term_completion_indicator' in params:
            query_params.append(('termCompletionIndicator', params['term_completion_indicator']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdFiStudentSchoolAssociation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_student_school_associations_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_school_associations_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiStudentSchoolAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_student_school_associations_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_student_school_associations_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_student_school_associations_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_school_associations_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiStudentSchoolAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_student_school_associations_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_student_school_associations_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdFiStudentSchoolAssociation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_student_school_association(self, student_school_association, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_student_school_association(student_school_association, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiStudentSchoolAssociation student_school_association: The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_student_school_association_with_http_info(student_school_association, **kwargs)  # noqa: E501
        else:
            (data) = self.post_student_school_association_with_http_info(student_school_association, **kwargs)  # noqa: E501
            return data

    def post_student_school_association_with_http_info(self, student_school_association, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_student_school_association_with_http_info(student_school_association, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiStudentSchoolAssociation student_school_association: The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_school_association']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_student_school_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_school_association' is set
        if self.api_client.client_side_validation and ('student_school_association' not in params or
                                                       params['student_school_association'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_school_association` when calling `post_student_school_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'student_school_association' in params:
            body_params = params['student_school_association']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_student_school_association(self, id, student_school_association, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_student_school_association(id, student_school_association, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiStudentSchoolAssociation student_school_association: The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_student_school_association_with_http_info(id, student_school_association, **kwargs)  # noqa: E501
        else:
            (data) = self.put_student_school_association_with_http_info(id, student_school_association, **kwargs)  # noqa: E501
            return data

    def put_student_school_association_with_http_info(self, id, student_school_association, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_student_school_association_with_http_info(id, student_school_association, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiStudentSchoolAssociation student_school_association: The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'student_school_association', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_student_school_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `put_student_school_association`")  # noqa: E501
        # verify the required parameter 'student_school_association' is set
        if self.api_client.client_side_validation and ('student_school_association' not in params or
                                                       params['student_school_association'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_school_association` when calling `put_student_school_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'student_school_association' in params:
            body_params = params['student_school_association']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentSchoolAssociations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
