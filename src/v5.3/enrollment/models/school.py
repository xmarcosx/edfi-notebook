# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class School(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'education_organization_categories': 'list[SchoolEducationOrganizationCategory]',
        'grade_levels': 'list[SchoolSchoolGradeLevel]',
        'school_id': 'int',
        'addresses': 'list[SchoolEducationOrganizationAddress]',
        'identification_codes': 'list[SchoolEducationOrganizationIdentificationCode]',
        'institution_telephones': 'list[SchoolEducationOrganizationInstitutionTelephone]',
        'local_education_agency': 'SchoolLocalEducationAgency',
        'name_of_institution': 'str',
        'school_categories': 'list[SchoolSchoolCategory]',
        'school_type_descriptor': 'str',
        'short_name_of_institution': 'str',
        'web_site': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'education_organization_categories': 'educationOrganizationCategories',
        'grade_levels': 'gradeLevels',
        'school_id': 'schoolId',
        'addresses': 'addresses',
        'identification_codes': 'identificationCodes',
        'institution_telephones': 'institutionTelephones',
        'local_education_agency': 'localEducationAgency',
        'name_of_institution': 'nameOfInstitution',
        'school_categories': 'schoolCategories',
        'school_type_descriptor': 'schoolTypeDescriptor',
        'short_name_of_institution': 'shortNameOfInstitution',
        'web_site': 'webSite',
        'etag': '_etag'
    }

    def __init__(self, id=None, education_organization_categories=None, grade_levels=None, school_id=None, addresses=None, identification_codes=None, institution_telephones=None, local_education_agency=None, name_of_institution=None, school_categories=None, school_type_descriptor=None, short_name_of_institution=None, web_site=None, etag=None, _configuration=None):  # noqa: E501
        """School - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._education_organization_categories = None
        self._grade_levels = None
        self._school_id = None
        self._addresses = None
        self._identification_codes = None
        self._institution_telephones = None
        self._local_education_agency = None
        self._name_of_institution = None
        self._school_categories = None
        self._school_type_descriptor = None
        self._short_name_of_institution = None
        self._web_site = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.education_organization_categories = education_organization_categories
        self.grade_levels = grade_levels
        self.school_id = school_id
        if addresses is not None:
            self.addresses = addresses
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if institution_telephones is not None:
            self.institution_telephones = institution_telephones
        if local_education_agency is not None:
            self.local_education_agency = local_education_agency
        self.name_of_institution = name_of_institution
        if school_categories is not None:
            self.school_categories = school_categories
        if school_type_descriptor is not None:
            self.school_type_descriptor = school_type_descriptor
        if short_name_of_institution is not None:
            self.short_name_of_institution = short_name_of_institution
        if web_site is not None:
            self.web_site = web_site
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this School.  # noqa: E501

          # noqa: E501

        :return: The id of this School.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this School.

          # noqa: E501

        :param id: The id of this School.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def education_organization_categories(self):
        """Gets the education_organization_categories of this School.  # noqa: E501

        An unordered collection of educationOrganizationCategories.   # noqa: E501

        :return: The education_organization_categories of this School.  # noqa: E501
        :rtype: list[SchoolEducationOrganizationCategory]
        """
        return self._education_organization_categories

    @education_organization_categories.setter
    def education_organization_categories(self, education_organization_categories):
        """Sets the education_organization_categories of this School.

        An unordered collection of educationOrganizationCategories.   # noqa: E501

        :param education_organization_categories: The education_organization_categories of this School.  # noqa: E501
        :type: list[SchoolEducationOrganizationCategory]
        """
        if self._configuration.client_side_validation and education_organization_categories is None:
            raise ValueError("Invalid value for `education_organization_categories`, must not be `None`")  # noqa: E501

        self._education_organization_categories = education_organization_categories

    @property
    def grade_levels(self):
        """Gets the grade_levels of this School.  # noqa: E501

        An unordered collection of schoolGradeLevels.   # noqa: E501

        :return: The grade_levels of this School.  # noqa: E501
        :rtype: list[SchoolSchoolGradeLevel]
        """
        return self._grade_levels

    @grade_levels.setter
    def grade_levels(self, grade_levels):
        """Sets the grade_levels of this School.

        An unordered collection of schoolGradeLevels.   # noqa: E501

        :param grade_levels: The grade_levels of this School.  # noqa: E501
        :type: list[SchoolSchoolGradeLevel]
        """
        if self._configuration.client_side_validation and grade_levels is None:
            raise ValueError("Invalid value for `grade_levels`, must not be `None`")  # noqa: E501

        self._grade_levels = grade_levels

    @property
    def school_id(self):
        """Gets the school_id of this School.  # noqa: E501

        The identifier assigned to a school.  # noqa: E501

        :return: The school_id of this School.  # noqa: E501
        :rtype: int
        """
        return self._school_id

    @school_id.setter
    def school_id(self, school_id):
        """Sets the school_id of this School.

        The identifier assigned to a school.  # noqa: E501

        :param school_id: The school_id of this School.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and school_id is None:
            raise ValueError("Invalid value for `school_id`, must not be `None`")  # noqa: E501

        self._school_id = school_id

    @property
    def addresses(self):
        """Gets the addresses of this School.  # noqa: E501

        An unordered collection of educationOrganizationAddresses.   # noqa: E501

        :return: The addresses of this School.  # noqa: E501
        :rtype: list[SchoolEducationOrganizationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this School.

        An unordered collection of educationOrganizationAddresses.   # noqa: E501

        :param addresses: The addresses of this School.  # noqa: E501
        :type: list[SchoolEducationOrganizationAddress]
        """

        self._addresses = addresses

    @property
    def identification_codes(self):
        """Gets the identification_codes of this School.  # noqa: E501

        An unordered collection of educationOrganizationIdentificationCodes.   # noqa: E501

        :return: The identification_codes of this School.  # noqa: E501
        :rtype: list[SchoolEducationOrganizationIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this School.

        An unordered collection of educationOrganizationIdentificationCodes.   # noqa: E501

        :param identification_codes: The identification_codes of this School.  # noqa: E501
        :type: list[SchoolEducationOrganizationIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def institution_telephones(self):
        """Gets the institution_telephones of this School.  # noqa: E501

        An unordered collection of educationOrganizationInstitutionTelephones.   # noqa: E501

        :return: The institution_telephones of this School.  # noqa: E501
        :rtype: list[SchoolEducationOrganizationInstitutionTelephone]
        """
        return self._institution_telephones

    @institution_telephones.setter
    def institution_telephones(self, institution_telephones):
        """Sets the institution_telephones of this School.

        An unordered collection of educationOrganizationInstitutionTelephones.   # noqa: E501

        :param institution_telephones: The institution_telephones of this School.  # noqa: E501
        :type: list[SchoolEducationOrganizationInstitutionTelephone]
        """

        self._institution_telephones = institution_telephones

    @property
    def local_education_agency(self):
        """Gets the local_education_agency of this School.  # noqa: E501


        :return: The local_education_agency of this School.  # noqa: E501
        :rtype: SchoolLocalEducationAgency
        """
        return self._local_education_agency

    @local_education_agency.setter
    def local_education_agency(self, local_education_agency):
        """Sets the local_education_agency of this School.


        :param local_education_agency: The local_education_agency of this School.  # noqa: E501
        :type: SchoolLocalEducationAgency
        """

        self._local_education_agency = local_education_agency

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this School.  # noqa: E501

        The full, legally accepted name of the institution.  # noqa: E501

        :return: The name_of_institution of this School.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this School.

        The full, legally accepted name of the institution.  # noqa: E501

        :param name_of_institution: The name_of_institution of this School.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name_of_institution is not None and len(name_of_institution) > 75):
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def school_categories(self):
        """Gets the school_categories of this School.  # noqa: E501

        An unordered collection of schoolCategories.   # noqa: E501

        :return: The school_categories of this School.  # noqa: E501
        :rtype: list[SchoolSchoolCategory]
        """
        return self._school_categories

    @school_categories.setter
    def school_categories(self, school_categories):
        """Sets the school_categories of this School.

        An unordered collection of schoolCategories.   # noqa: E501

        :param school_categories: The school_categories of this School.  # noqa: E501
        :type: list[SchoolSchoolCategory]
        """

        self._school_categories = school_categories

    @property
    def school_type_descriptor(self):
        """Gets the school_type_descriptor of this School.  # noqa: E501

        The type of education institution as classified by its primary focus.  # noqa: E501

        :return: The school_type_descriptor of this School.  # noqa: E501
        :rtype: str
        """
        return self._school_type_descriptor

    @school_type_descriptor.setter
    def school_type_descriptor(self, school_type_descriptor):
        """Sets the school_type_descriptor of this School.

        The type of education institution as classified by its primary focus.  # noqa: E501

        :param school_type_descriptor: The school_type_descriptor of this School.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                school_type_descriptor is not None and len(school_type_descriptor) > 306):
            raise ValueError("Invalid value for `school_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._school_type_descriptor = school_type_descriptor

    @property
    def short_name_of_institution(self):
        """Gets the short_name_of_institution of this School.  # noqa: E501

        A short name for the institution.  # noqa: E501

        :return: The short_name_of_institution of this School.  # noqa: E501
        :rtype: str
        """
        return self._short_name_of_institution

    @short_name_of_institution.setter
    def short_name_of_institution(self, short_name_of_institution):
        """Sets the short_name_of_institution of this School.

        A short name for the institution.  # noqa: E501

        :param short_name_of_institution: The short_name_of_institution of this School.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_name_of_institution is not None and len(short_name_of_institution) > 75):
            raise ValueError("Invalid value for `short_name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._short_name_of_institution = short_name_of_institution

    @property
    def web_site(self):
        """Gets the web_site of this School.  # noqa: E501

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :return: The web_site of this School.  # noqa: E501
        :rtype: str
        """
        return self._web_site

    @web_site.setter
    def web_site(self, web_site):
        """Sets the web_site of this School.

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :param web_site: The web_site of this School.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                web_site is not None and len(web_site) > 255):
            raise ValueError("Invalid value for `web_site`, length must be less than or equal to `255`")  # noqa: E501

        self._web_site = web_site

    @property
    def etag(self):
        """Gets the etag of this School.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this School.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this School.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this School.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(School, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, School):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, School):
            return True

        return self.to_dict() != other.to_dict()
