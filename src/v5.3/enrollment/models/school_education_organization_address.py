# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SchoolEducationOrganizationAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_type_descriptor': 'str',
        'street_number_name': 'str',
        'city': 'str',
        'state_abbreviation_descriptor': 'str',
        'postal_code': 'str',
        'name_of_county': 'str'
    }

    attribute_map = {
        'address_type_descriptor': 'addressTypeDescriptor',
        'street_number_name': 'streetNumberName',
        'city': 'city',
        'state_abbreviation_descriptor': 'stateAbbreviationDescriptor',
        'postal_code': 'postalCode',
        'name_of_county': 'nameOfCounty'
    }

    def __init__(self, address_type_descriptor=None, street_number_name=None, city=None, state_abbreviation_descriptor=None, postal_code=None, name_of_county=None, _configuration=None):  # noqa: E501
        """SchoolEducationOrganizationAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_type_descriptor = None
        self._street_number_name = None
        self._city = None
        self._state_abbreviation_descriptor = None
        self._postal_code = None
        self._name_of_county = None
        self.discriminator = None

        self.address_type_descriptor = address_type_descriptor
        self.street_number_name = street_number_name
        self.city = city
        self.state_abbreviation_descriptor = state_abbreviation_descriptor
        self.postal_code = postal_code
        if name_of_county is not None:
            self.name_of_county = name_of_county

    @property
    def address_type_descriptor(self):
        """Gets the address_type_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501

        The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)  # noqa: E501

        :return: The address_type_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_type_descriptor

    @address_type_descriptor.setter
    def address_type_descriptor(self, address_type_descriptor):
        """Sets the address_type_descriptor of this SchoolEducationOrganizationAddress.

        The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)  # noqa: E501

        :param address_type_descriptor: The address_type_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_type_descriptor is None:
            raise ValueError("Invalid value for `address_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_type_descriptor is not None and len(address_type_descriptor) > 306):
            raise ValueError("Invalid value for `address_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._address_type_descriptor = address_type_descriptor

    @property
    def street_number_name(self):
        """Gets the street_number_name of this SchoolEducationOrganizationAddress.  # noqa: E501

        The street number and street name or post office box number of an address.  # noqa: E501

        :return: The street_number_name of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_number_name

    @street_number_name.setter
    def street_number_name(self, street_number_name):
        """Sets the street_number_name of this SchoolEducationOrganizationAddress.

        The street number and street name or post office box number of an address.  # noqa: E501

        :param street_number_name: The street_number_name of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and street_number_name is None:
            raise ValueError("Invalid value for `street_number_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                street_number_name is not None and len(street_number_name) > 150):
            raise ValueError("Invalid value for `street_number_name`, length must be less than or equal to `150`")  # noqa: E501

        self._street_number_name = street_number_name

    @property
    def city(self):
        """Gets the city of this SchoolEducationOrganizationAddress.  # noqa: E501

        The name of the city in which an address is located.  # noqa: E501

        :return: The city of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SchoolEducationOrganizationAddress.

        The name of the city in which an address is located.  # noqa: E501

        :param city: The city of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                city is not None and len(city) > 30):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `30`")  # noqa: E501

        self._city = city

    @property
    def state_abbreviation_descriptor(self):
        """Gets the state_abbreviation_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501

        The abbreviation for the state (within the United States) or outlying area in which an address is located.  # noqa: E501

        :return: The state_abbreviation_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_abbreviation_descriptor

    @state_abbreviation_descriptor.setter
    def state_abbreviation_descriptor(self, state_abbreviation_descriptor):
        """Sets the state_abbreviation_descriptor of this SchoolEducationOrganizationAddress.

        The abbreviation for the state (within the United States) or outlying area in which an address is located.  # noqa: E501

        :param state_abbreviation_descriptor: The state_abbreviation_descriptor of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state_abbreviation_descriptor is None:
            raise ValueError("Invalid value for `state_abbreviation_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state_abbreviation_descriptor is not None and len(state_abbreviation_descriptor) > 306):
            raise ValueError("Invalid value for `state_abbreviation_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._state_abbreviation_descriptor = state_abbreviation_descriptor

    @property
    def postal_code(self):
        """Gets the postal_code of this SchoolEducationOrganizationAddress.  # noqa: E501

        The five or nine digit zip code or overseas postal code portion of an address.  # noqa: E501

        :return: The postal_code of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SchoolEducationOrganizationAddress.

        The five or nine digit zip code or overseas postal code portion of an address.  # noqa: E501

        :param postal_code: The postal_code of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                postal_code is not None and len(postal_code) > 17):
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `17`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def name_of_county(self):
        """Gets the name_of_county of this SchoolEducationOrganizationAddress.  # noqa: E501

        The name of the county, parish, borough, or comparable unit (within a state) in                      'which an address is located.  # noqa: E501

        :return: The name_of_county of this SchoolEducationOrganizationAddress.  # noqa: E501
        :rtype: str
        """
        return self._name_of_county

    @name_of_county.setter
    def name_of_county(self, name_of_county):
        """Sets the name_of_county of this SchoolEducationOrganizationAddress.

        The name of the county, parish, borough, or comparable unit (within a state) in                      'which an address is located.  # noqa: E501

        :param name_of_county: The name_of_county of this SchoolEducationOrganizationAddress.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name_of_county is not None and len(name_of_county) > 30):
            raise ValueError("Invalid value for `name_of_county`, length must be less than or equal to `30`")  # noqa: E501

        self._name_of_county = name_of_county

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchoolEducationOrganizationAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchoolEducationOrganizationAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchoolEducationOrganizationAddress):
            return True

        return self.to_dict() != other.to_dict()
