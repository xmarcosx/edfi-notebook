# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Student(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'birth_date': 'date',
        'first_name': 'str',
        'last_surname': 'str',
        'middle_name': 'str',
        'personal_title_prefix': 'str',
        'student_demographics': 'list[StudentStudentEducationOrganizationAssociation]',
        'student_school_enrollments': 'list[StudentStudentSchoolAssociation]',
        'student_unique_id': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'birth_date': 'birthDate',
        'first_name': 'firstName',
        'last_surname': 'lastSurname',
        'middle_name': 'middleName',
        'personal_title_prefix': 'personalTitlePrefix',
        'student_demographics': 'studentDemographics',
        'student_school_enrollments': 'studentSchoolEnrollments',
        'student_unique_id': 'studentUniqueId',
        'etag': '_etag'
    }

    def __init__(self, id=None, birth_date=None, first_name=None, last_surname=None, middle_name=None, personal_title_prefix=None, student_demographics=None, student_school_enrollments=None, student_unique_id=None, etag=None, _configuration=None):  # noqa: E501
        """Student - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._birth_date = None
        self._first_name = None
        self._last_surname = None
        self._middle_name = None
        self._personal_title_prefix = None
        self._student_demographics = None
        self._student_school_enrollments = None
        self._student_unique_id = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.birth_date = birth_date
        self.first_name = first_name
        self.last_surname = last_surname
        if middle_name is not None:
            self.middle_name = middle_name
        if personal_title_prefix is not None:
            self.personal_title_prefix = personal_title_prefix
        if student_demographics is not None:
            self.student_demographics = student_demographics
        if student_school_enrollments is not None:
            self.student_school_enrollments = student_school_enrollments
        self.student_unique_id = student_unique_id
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this Student.  # noqa: E501

          # noqa: E501

        :return: The id of this Student.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Student.

          # noqa: E501

        :param id: The id of this Student.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def birth_date(self):
        """Gets the birth_date of this Student.  # noqa: E501

        The month, day, and year on which an individual was born.  # noqa: E501

        :return: The birth_date of this Student.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Student.

        The month, day, and year on which an individual was born.  # noqa: E501

        :param birth_date: The birth_date of this Student.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._birth_date = birth_date

    @property
    def first_name(self):
        """Gets the first_name of this Student.  # noqa: E501

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :return: The first_name of this Student.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Student.

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :param first_name: The first_name of this Student.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 75):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `75`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_surname(self):
        """Gets the last_surname of this Student.  # noqa: E501

        The name borne in common by members of a family.  # noqa: E501

        :return: The last_surname of this Student.  # noqa: E501
        :rtype: str
        """
        return self._last_surname

    @last_surname.setter
    def last_surname(self, last_surname):
        """Sets the last_surname of this Student.

        The name borne in common by members of a family.  # noqa: E501

        :param last_surname: The last_surname of this Student.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_surname is None:
            raise ValueError("Invalid value for `last_surname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_surname is not None and len(last_surname) > 75):
            raise ValueError("Invalid value for `last_surname`, length must be less than or equal to `75`")  # noqa: E501

        self._last_surname = last_surname

    @property
    def middle_name(self):
        """Gets the middle_name of this Student.  # noqa: E501

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :return: The middle_name of this Student.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Student.

        A secondary name given to an individual at birth, baptism, or during another naming ceremony.  # noqa: E501

        :param middle_name: The middle_name of this Student.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 75):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `75`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def personal_title_prefix(self):
        """Gets the personal_title_prefix of this Student.  # noqa: E501

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :return: The personal_title_prefix of this Student.  # noqa: E501
        :rtype: str
        """
        return self._personal_title_prefix

    @personal_title_prefix.setter
    def personal_title_prefix(self, personal_title_prefix):
        """Sets the personal_title_prefix of this Student.

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :param personal_title_prefix: The personal_title_prefix of this Student.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                personal_title_prefix is not None and len(personal_title_prefix) > 30):
            raise ValueError("Invalid value for `personal_title_prefix`, length must be less than or equal to `30`")  # noqa: E501

        self._personal_title_prefix = personal_title_prefix

    @property
    def student_demographics(self):
        """Gets the student_demographics of this Student.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociations.   # noqa: E501

        :return: The student_demographics of this Student.  # noqa: E501
        :rtype: list[StudentStudentEducationOrganizationAssociation]
        """
        return self._student_demographics

    @student_demographics.setter
    def student_demographics(self, student_demographics):
        """Sets the student_demographics of this Student.

        An unordered collection of studentEducationOrganizationAssociations.   # noqa: E501

        :param student_demographics: The student_demographics of this Student.  # noqa: E501
        :type: list[StudentStudentEducationOrganizationAssociation]
        """

        self._student_demographics = student_demographics

    @property
    def student_school_enrollments(self):
        """Gets the student_school_enrollments of this Student.  # noqa: E501

        An unordered collection of studentSchoolAssociations.   # noqa: E501

        :return: The student_school_enrollments of this Student.  # noqa: E501
        :rtype: list[StudentStudentSchoolAssociation]
        """
        return self._student_school_enrollments

    @student_school_enrollments.setter
    def student_school_enrollments(self, student_school_enrollments):
        """Sets the student_school_enrollments of this Student.

        An unordered collection of studentSchoolAssociations.   # noqa: E501

        :param student_school_enrollments: The student_school_enrollments of this Student.  # noqa: E501
        :type: list[StudentStudentSchoolAssociation]
        """

        self._student_school_enrollments = student_school_enrollments

    @property
    def student_unique_id(self):
        """Gets the student_unique_id of this Student.  # noqa: E501

        A unique alphanumeric code assigned to a student.  # noqa: E501

        :return: The student_unique_id of this Student.  # noqa: E501
        :rtype: str
        """
        return self._student_unique_id

    @student_unique_id.setter
    def student_unique_id(self, student_unique_id):
        """Sets the student_unique_id of this Student.

        A unique alphanumeric code assigned to a student.  # noqa: E501

        :param student_unique_id: The student_unique_id of this Student.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and student_unique_id is None:
            raise ValueError("Invalid value for `student_unique_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                student_unique_id is not None and len(student_unique_id) > 32):
            raise ValueError("Invalid value for `student_unique_id`, length must be less than or equal to `32`")  # noqa: E501

        self._student_unique_id = student_unique_id

    @property
    def etag(self):
        """Gets the etag of this Student.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this Student.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Student.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this Student.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Student, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Student):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Student):
            return True

        return self.to_dict() != other.to_dict()
