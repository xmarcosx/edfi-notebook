# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LocalEducationAgency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'local_education_agency_id': 'int',
        'addresses': 'list[LocalEducationAgencyEducationOrganizationAddress]',
        'charter_status_descriptor': 'str',
        'identification_codes': 'list[LocalEducationAgencyEducationOrganizationIdentificationCode]',
        'institution_telephones': 'list[LocalEducationAgencyEducationOrganizationInstitutionTelephone]',
        'local_education_agency_category_descriptor': 'str',
        'name_of_institution': 'str',
        'short_name_of_institution': 'str',
        'state_education_agency_id': 'int',
        'web_site': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'local_education_agency_id': 'localEducationAgencyId',
        'addresses': 'addresses',
        'charter_status_descriptor': 'charterStatusDescriptor',
        'identification_codes': 'identificationCodes',
        'institution_telephones': 'institutionTelephones',
        'local_education_agency_category_descriptor': 'localEducationAgencyCategoryDescriptor',
        'name_of_institution': 'nameOfInstitution',
        'short_name_of_institution': 'shortNameOfInstitution',
        'state_education_agency_id': 'stateEducationAgencyId',
        'web_site': 'webSite',
        'etag': '_etag'
    }

    def __init__(self, id=None, local_education_agency_id=None, addresses=None, charter_status_descriptor=None, identification_codes=None, institution_telephones=None, local_education_agency_category_descriptor=None, name_of_institution=None, short_name_of_institution=None, state_education_agency_id=None, web_site=None, etag=None, _configuration=None):  # noqa: E501
        """LocalEducationAgency - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._local_education_agency_id = None
        self._addresses = None
        self._charter_status_descriptor = None
        self._identification_codes = None
        self._institution_telephones = None
        self._local_education_agency_category_descriptor = None
        self._name_of_institution = None
        self._short_name_of_institution = None
        self._state_education_agency_id = None
        self._web_site = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.local_education_agency_id = local_education_agency_id
        if addresses is not None:
            self.addresses = addresses
        if charter_status_descriptor is not None:
            self.charter_status_descriptor = charter_status_descriptor
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if institution_telephones is not None:
            self.institution_telephones = institution_telephones
        self.local_education_agency_category_descriptor = local_education_agency_category_descriptor
        self.name_of_institution = name_of_institution
        if short_name_of_institution is not None:
            self.short_name_of_institution = short_name_of_institution
        if state_education_agency_id is not None:
            self.state_education_agency_id = state_education_agency_id
        if web_site is not None:
            self.web_site = web_site
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this LocalEducationAgency.  # noqa: E501

          # noqa: E501

        :return: The id of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalEducationAgency.

          # noqa: E501

        :param id: The id of this LocalEducationAgency.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def local_education_agency_id(self):
        """Gets the local_education_agency_id of this LocalEducationAgency.  # noqa: E501

        The identifier assigned to a local education agency.  # noqa: E501

        :return: The local_education_agency_id of this LocalEducationAgency.  # noqa: E501
        :rtype: int
        """
        return self._local_education_agency_id

    @local_education_agency_id.setter
    def local_education_agency_id(self, local_education_agency_id):
        """Sets the local_education_agency_id of this LocalEducationAgency.

        The identifier assigned to a local education agency.  # noqa: E501

        :param local_education_agency_id: The local_education_agency_id of this LocalEducationAgency.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and local_education_agency_id is None:
            raise ValueError("Invalid value for `local_education_agency_id`, must not be `None`")  # noqa: E501

        self._local_education_agency_id = local_education_agency_id

    @property
    def addresses(self):
        """Gets the addresses of this LocalEducationAgency.  # noqa: E501

        An unordered collection of educationOrganizationAddresses.   # noqa: E501

        :return: The addresses of this LocalEducationAgency.  # noqa: E501
        :rtype: list[LocalEducationAgencyEducationOrganizationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this LocalEducationAgency.

        An unordered collection of educationOrganizationAddresses.   # noqa: E501

        :param addresses: The addresses of this LocalEducationAgency.  # noqa: E501
        :type: list[LocalEducationAgencyEducationOrganizationAddress]
        """

        self._addresses = addresses

    @property
    def charter_status_descriptor(self):
        """Gets the charter_status_descriptor of this LocalEducationAgency.  # noqa: E501

        A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.  # noqa: E501

        :return: The charter_status_descriptor of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._charter_status_descriptor

    @charter_status_descriptor.setter
    def charter_status_descriptor(self, charter_status_descriptor):
        """Sets the charter_status_descriptor of this LocalEducationAgency.

        A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.  # noqa: E501

        :param charter_status_descriptor: The charter_status_descriptor of this LocalEducationAgency.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                charter_status_descriptor is not None and len(charter_status_descriptor) > 306):
            raise ValueError("Invalid value for `charter_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._charter_status_descriptor = charter_status_descriptor

    @property
    def identification_codes(self):
        """Gets the identification_codes of this LocalEducationAgency.  # noqa: E501

        An unordered collection of educationOrganizationIdentificationCodes.   # noqa: E501

        :return: The identification_codes of this LocalEducationAgency.  # noqa: E501
        :rtype: list[LocalEducationAgencyEducationOrganizationIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this LocalEducationAgency.

        An unordered collection of educationOrganizationIdentificationCodes.   # noqa: E501

        :param identification_codes: The identification_codes of this LocalEducationAgency.  # noqa: E501
        :type: list[LocalEducationAgencyEducationOrganizationIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def institution_telephones(self):
        """Gets the institution_telephones of this LocalEducationAgency.  # noqa: E501

        An unordered collection of educationOrganizationInstitutionTelephones.   # noqa: E501

        :return: The institution_telephones of this LocalEducationAgency.  # noqa: E501
        :rtype: list[LocalEducationAgencyEducationOrganizationInstitutionTelephone]
        """
        return self._institution_telephones

    @institution_telephones.setter
    def institution_telephones(self, institution_telephones):
        """Sets the institution_telephones of this LocalEducationAgency.

        An unordered collection of educationOrganizationInstitutionTelephones.   # noqa: E501

        :param institution_telephones: The institution_telephones of this LocalEducationAgency.  # noqa: E501
        :type: list[LocalEducationAgencyEducationOrganizationInstitutionTelephone]
        """

        self._institution_telephones = institution_telephones

    @property
    def local_education_agency_category_descriptor(self):
        """Gets the local_education_agency_category_descriptor of this LocalEducationAgency.  # noqa: E501

        The category of local education agency/district. For example: Independent or Charter.  # noqa: E501

        :return: The local_education_agency_category_descriptor of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._local_education_agency_category_descriptor

    @local_education_agency_category_descriptor.setter
    def local_education_agency_category_descriptor(self, local_education_agency_category_descriptor):
        """Sets the local_education_agency_category_descriptor of this LocalEducationAgency.

        The category of local education agency/district. For example: Independent or Charter.  # noqa: E501

        :param local_education_agency_category_descriptor: The local_education_agency_category_descriptor of this LocalEducationAgency.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and local_education_agency_category_descriptor is None:
            raise ValueError("Invalid value for `local_education_agency_category_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                local_education_agency_category_descriptor is not None and len(local_education_agency_category_descriptor) > 306):
            raise ValueError("Invalid value for `local_education_agency_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._local_education_agency_category_descriptor = local_education_agency_category_descriptor

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this LocalEducationAgency.  # noqa: E501

        The full, legally accepted name of the institution.  # noqa: E501

        :return: The name_of_institution of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this LocalEducationAgency.

        The full, legally accepted name of the institution.  # noqa: E501

        :param name_of_institution: The name_of_institution of this LocalEducationAgency.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name_of_institution is not None and len(name_of_institution) > 75):
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def short_name_of_institution(self):
        """Gets the short_name_of_institution of this LocalEducationAgency.  # noqa: E501

        A short name for the institution.  # noqa: E501

        :return: The short_name_of_institution of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._short_name_of_institution

    @short_name_of_institution.setter
    def short_name_of_institution(self, short_name_of_institution):
        """Sets the short_name_of_institution of this LocalEducationAgency.

        A short name for the institution.  # noqa: E501

        :param short_name_of_institution: The short_name_of_institution of this LocalEducationAgency.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_name_of_institution is not None and len(short_name_of_institution) > 75):
            raise ValueError("Invalid value for `short_name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._short_name_of_institution = short_name_of_institution

    @property
    def state_education_agency_id(self):
        """Gets the state_education_agency_id of this LocalEducationAgency.  # noqa: E501

        The identifier assigned to a state education agency.  # noqa: E501

        :return: The state_education_agency_id of this LocalEducationAgency.  # noqa: E501
        :rtype: int
        """
        return self._state_education_agency_id

    @state_education_agency_id.setter
    def state_education_agency_id(self, state_education_agency_id):
        """Sets the state_education_agency_id of this LocalEducationAgency.

        The identifier assigned to a state education agency.  # noqa: E501

        :param state_education_agency_id: The state_education_agency_id of this LocalEducationAgency.  # noqa: E501
        :type: int
        """

        self._state_education_agency_id = state_education_agency_id

    @property
    def web_site(self):
        """Gets the web_site of this LocalEducationAgency.  # noqa: E501

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :return: The web_site of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._web_site

    @web_site.setter
    def web_site(self, web_site):
        """Sets the web_site of this LocalEducationAgency.

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :param web_site: The web_site of this LocalEducationAgency.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                web_site is not None and len(web_site) > 255):
            raise ValueError("Invalid value for `web_site`, length must be less than or equal to `255`")  # noqa: E501

        self._web_site = web_site

    @property
    def etag(self):
        """Gets the etag of this LocalEducationAgency.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this LocalEducationAgency.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LocalEducationAgency.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this LocalEducationAgency.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalEducationAgency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalEducationAgency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalEducationAgency):
            return True

        return self.to_dict() != other.to_dict()
