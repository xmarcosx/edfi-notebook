# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StudentStudentEducationOrganizationAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_id': 'str',
        'sex_descriptor': 'str',
        'hispanic_latino_ethnicity': 'bool',
        'education_organization_type': 'str',
        'education_organization_id': 'int',
        'languages': 'list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage]',
        'races': 'list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace]'
    }

    attribute_map = {
        'login_id': 'loginId',
        'sex_descriptor': 'sexDescriptor',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'education_organization_type': 'educationOrganizationType',
        'education_organization_id': 'educationOrganizationId',
        'languages': 'languages',
        'races': 'races'
    }

    def __init__(self, login_id=None, sex_descriptor=None, hispanic_latino_ethnicity=None, education_organization_type=None, education_organization_id=None, languages=None, races=None, _configuration=None):  # noqa: E501
        """StudentStudentEducationOrganizationAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._login_id = None
        self._sex_descriptor = None
        self._hispanic_latino_ethnicity = None
        self._education_organization_type = None
        self._education_organization_id = None
        self._languages = None
        self._races = None
        self.discriminator = None

        if login_id is not None:
            self.login_id = login_id
        self.sex_descriptor = sex_descriptor
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        if education_organization_type is not None:
            self.education_organization_type = education_organization_type
        self.education_organization_id = education_organization_id
        if languages is not None:
            self.languages = languages
        if races is not None:
            self.races = races

    @property
    def login_id(self):
        """Gets the login_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        The login ID for the user; used for security access control interface.  # noqa: E501

        :return: The login_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this StudentStudentEducationOrganizationAssociation.

        The login ID for the user; used for security access control interface.  # noqa: E501

        :param login_id: The login_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                login_id is not None and len(login_id) > 60):
            raise ValueError("Invalid value for `login_id`, length must be less than or equal to `60`")  # noqa: E501

        self._login_id = login_id

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        The student's gender as last reported to the education organization.  # noqa: E501

        :return: The sex_descriptor of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this StudentStudentEducationOrganizationAssociation.

        The student's gender as last reported to the education organization.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sex_descriptor is None:
            raise ValueError("Invalid value for `sex_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :return: The hispanic_latino_ethnicity of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this StudentStudentEducationOrganizationAssociation.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def education_organization_type(self):
        """Gets the education_organization_type of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

          # noqa: E501

        :return: The education_organization_type of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: str
        """
        return self._education_organization_type

    @education_organization_type.setter
    def education_organization_type(self, education_organization_type):
        """Sets the education_organization_type of this StudentStudentEducationOrganizationAssociation.

          # noqa: E501

        :param education_organization_type: The education_organization_type of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                education_organization_type is not None and len(education_organization_type) > 128):
            raise ValueError("Invalid value for `education_organization_type`, length must be less than or equal to `128`")  # noqa: E501

        self._education_organization_type = education_organization_type

    @property
    def education_organization_id(self):
        """Gets the education_organization_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        The identifier assigned to an education organization.  # noqa: E501

        :return: The education_organization_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: int
        """
        return self._education_organization_id

    @education_organization_id.setter
    def education_organization_id(self, education_organization_id):
        """Sets the education_organization_id of this StudentStudentEducationOrganizationAssociation.

        The identifier assigned to an education organization.  # noqa: E501

        :param education_organization_id: The education_organization_id of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and education_organization_id is None:
            raise ValueError("Invalid value for `education_organization_id`, must not be `None`")  # noqa: E501

        self._education_organization_id = education_organization_id

    @property
    def languages(self):
        """Gets the languages of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationLanguages.   # noqa: E501

        :return: The languages of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this StudentStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationLanguages.   # noqa: E501

        :param languages: The languages of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage]
        """

        self._languages = languages

    @property
    def races(self):
        """Gets the races of this StudentStudentEducationOrganizationAssociation.  # noqa: E501

        An unordered collection of studentEducationOrganizationAssociationRaces.   # noqa: E501

        :return: The races of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :rtype: list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this StudentStudentEducationOrganizationAssociation.

        An unordered collection of studentEducationOrganizationAssociationRaces.   # noqa: E501

        :param races: The races of this StudentStudentEducationOrganizationAssociation.  # noqa: E501
        :type: list[StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace]
        """

        self._races = races

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudentStudentEducationOrganizationAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudentStudentEducationOrganizationAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudentStudentEducationOrganizationAssociation):
            return True

        return self.to_dict() != other.to_dict()
