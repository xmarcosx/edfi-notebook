# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Staff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'education_organization_assignments': 'list[StaffStaffEducationOrganizationAssignmentAssociation]',
        'electronic_mails': 'list[StaffStaffElectronicMail]',
        'first_name': 'str',
        'hispanic_latino_ethnicity': 'bool',
        'identification_codes': 'list[StaffStaffIdentificationCode]',
        'languages': 'list[StaffStaffLanguage]',
        'last_surname': 'str',
        'login_id': 'str',
        'personal_title_prefix': 'str',
        'races': 'list[StaffStaffRace]',
        'sex_descriptor': 'str',
        'staff_unique_id': 'str',
        'telephones': 'list[StaffStaffTelephone]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'education_organization_assignments': 'educationOrganizationAssignments',
        'electronic_mails': 'electronicMails',
        'first_name': 'firstName',
        'hispanic_latino_ethnicity': 'hispanicLatinoEthnicity',
        'identification_codes': 'identificationCodes',
        'languages': 'languages',
        'last_surname': 'lastSurname',
        'login_id': 'loginId',
        'personal_title_prefix': 'personalTitlePrefix',
        'races': 'races',
        'sex_descriptor': 'sexDescriptor',
        'staff_unique_id': 'staffUniqueId',
        'telephones': 'telephones',
        'etag': '_etag'
    }

    def __init__(self, id=None, education_organization_assignments=None, electronic_mails=None, first_name=None, hispanic_latino_ethnicity=None, identification_codes=None, languages=None, last_surname=None, login_id=None, personal_title_prefix=None, races=None, sex_descriptor=None, staff_unique_id=None, telephones=None, etag=None, _configuration=None):  # noqa: E501
        """Staff - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._education_organization_assignments = None
        self._electronic_mails = None
        self._first_name = None
        self._hispanic_latino_ethnicity = None
        self._identification_codes = None
        self._languages = None
        self._last_surname = None
        self._login_id = None
        self._personal_title_prefix = None
        self._races = None
        self._sex_descriptor = None
        self._staff_unique_id = None
        self._telephones = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if education_organization_assignments is not None:
            self.education_organization_assignments = education_organization_assignments
        if electronic_mails is not None:
            self.electronic_mails = electronic_mails
        self.first_name = first_name
        if hispanic_latino_ethnicity is not None:
            self.hispanic_latino_ethnicity = hispanic_latino_ethnicity
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if languages is not None:
            self.languages = languages
        self.last_surname = last_surname
        if login_id is not None:
            self.login_id = login_id
        if personal_title_prefix is not None:
            self.personal_title_prefix = personal_title_prefix
        if races is not None:
            self.races = races
        if sex_descriptor is not None:
            self.sex_descriptor = sex_descriptor
        self.staff_unique_id = staff_unique_id
        if telephones is not None:
            self.telephones = telephones
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this Staff.  # noqa: E501

          # noqa: E501

        :return: The id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Staff.

          # noqa: E501

        :param id: The id of this Staff.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def education_organization_assignments(self):
        """Gets the education_organization_assignments of this Staff.  # noqa: E501

        An unordered collection of staffEducationOrganizationAssignmentAssociations.   # noqa: E501

        :return: The education_organization_assignments of this Staff.  # noqa: E501
        :rtype: list[StaffStaffEducationOrganizationAssignmentAssociation]
        """
        return self._education_organization_assignments

    @education_organization_assignments.setter
    def education_organization_assignments(self, education_organization_assignments):
        """Sets the education_organization_assignments of this Staff.

        An unordered collection of staffEducationOrganizationAssignmentAssociations.   # noqa: E501

        :param education_organization_assignments: The education_organization_assignments of this Staff.  # noqa: E501
        :type: list[StaffStaffEducationOrganizationAssignmentAssociation]
        """

        self._education_organization_assignments = education_organization_assignments

    @property
    def electronic_mails(self):
        """Gets the electronic_mails of this Staff.  # noqa: E501

        An unordered collection of staffElectronicMails.   # noqa: E501

        :return: The electronic_mails of this Staff.  # noqa: E501
        :rtype: list[StaffStaffElectronicMail]
        """
        return self._electronic_mails

    @electronic_mails.setter
    def electronic_mails(self, electronic_mails):
        """Sets the electronic_mails of this Staff.

        An unordered collection of staffElectronicMails.   # noqa: E501

        :param electronic_mails: The electronic_mails of this Staff.  # noqa: E501
        :type: list[StaffStaffElectronicMail]
        """

        self._electronic_mails = electronic_mails

    @property
    def first_name(self):
        """Gets the first_name of this Staff.  # noqa: E501

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :return: The first_name of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Staff.

        A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.  # noqa: E501

        :param first_name: The first_name of this Staff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 75):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `75`")  # noqa: E501

        self._first_name = first_name

    @property
    def hispanic_latino_ethnicity(self):
        """Gets the hispanic_latino_ethnicity of this Staff.  # noqa: E501

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :return: The hispanic_latino_ethnicity of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._hispanic_latino_ethnicity

    @hispanic_latino_ethnicity.setter
    def hispanic_latino_ethnicity(self, hispanic_latino_ethnicity):
        """Sets the hispanic_latino_ethnicity of this Staff.

        An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"  # noqa: E501

        :param hispanic_latino_ethnicity: The hispanic_latino_ethnicity of this Staff.  # noqa: E501
        :type: bool
        """

        self._hispanic_latino_ethnicity = hispanic_latino_ethnicity

    @property
    def identification_codes(self):
        """Gets the identification_codes of this Staff.  # noqa: E501

        An unordered collection of staffIdentificationCodes.   # noqa: E501

        :return: The identification_codes of this Staff.  # noqa: E501
        :rtype: list[StaffStaffIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this Staff.

        An unordered collection of staffIdentificationCodes.   # noqa: E501

        :param identification_codes: The identification_codes of this Staff.  # noqa: E501
        :type: list[StaffStaffIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def languages(self):
        """Gets the languages of this Staff.  # noqa: E501

        An unordered collection of staffLanguages.   # noqa: E501

        :return: The languages of this Staff.  # noqa: E501
        :rtype: list[StaffStaffLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Staff.

        An unordered collection of staffLanguages.   # noqa: E501

        :param languages: The languages of this Staff.  # noqa: E501
        :type: list[StaffStaffLanguage]
        """

        self._languages = languages

    @property
    def last_surname(self):
        """Gets the last_surname of this Staff.  # noqa: E501

        The name borne in common by members of a family.  # noqa: E501

        :return: The last_surname of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._last_surname

    @last_surname.setter
    def last_surname(self, last_surname):
        """Sets the last_surname of this Staff.

        The name borne in common by members of a family.  # noqa: E501

        :param last_surname: The last_surname of this Staff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_surname is None:
            raise ValueError("Invalid value for `last_surname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_surname is not None and len(last_surname) > 75):
            raise ValueError("Invalid value for `last_surname`, length must be less than or equal to `75`")  # noqa: E501

        self._last_surname = last_surname

    @property
    def login_id(self):
        """Gets the login_id of this Staff.  # noqa: E501

        The login ID for the user; used for security access control interface.  # noqa: E501

        :return: The login_id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Staff.

        The login ID for the user; used for security access control interface.  # noqa: E501

        :param login_id: The login_id of this Staff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                login_id is not None and len(login_id) > 60):
            raise ValueError("Invalid value for `login_id`, length must be less than or equal to `60`")  # noqa: E501

        self._login_id = login_id

    @property
    def personal_title_prefix(self):
        """Gets the personal_title_prefix of this Staff.  # noqa: E501

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :return: The personal_title_prefix of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._personal_title_prefix

    @personal_title_prefix.setter
    def personal_title_prefix(self, personal_title_prefix):
        """Sets the personal_title_prefix of this Staff.

        A prefix used to denote the title, degree, position, or seniority of the person.  # noqa: E501

        :param personal_title_prefix: The personal_title_prefix of this Staff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                personal_title_prefix is not None and len(personal_title_prefix) > 30):
            raise ValueError("Invalid value for `personal_title_prefix`, length must be less than or equal to `30`")  # noqa: E501

        self._personal_title_prefix = personal_title_prefix

    @property
    def races(self):
        """Gets the races of this Staff.  # noqa: E501

        An unordered collection of staffRaces.   # noqa: E501

        :return: The races of this Staff.  # noqa: E501
        :rtype: list[StaffStaffRace]
        """
        return self._races

    @races.setter
    def races(self, races):
        """Sets the races of this Staff.

        An unordered collection of staffRaces.   # noqa: E501

        :param races: The races of this Staff.  # noqa: E501
        :type: list[StaffStaffRace]
        """

        self._races = races

    @property
    def sex_descriptor(self):
        """Gets the sex_descriptor of this Staff.  # noqa: E501

        A person's gender.  # noqa: E501

        :return: The sex_descriptor of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._sex_descriptor

    @sex_descriptor.setter
    def sex_descriptor(self, sex_descriptor):
        """Sets the sex_descriptor of this Staff.

        A person's gender.  # noqa: E501

        :param sex_descriptor: The sex_descriptor of this Staff.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                sex_descriptor is not None and len(sex_descriptor) > 306):
            raise ValueError("Invalid value for `sex_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._sex_descriptor = sex_descriptor

    @property
    def staff_unique_id(self):
        """Gets the staff_unique_id of this Staff.  # noqa: E501

        A unique alphanumeric code assigned to a staff.  # noqa: E501

        :return: The staff_unique_id of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._staff_unique_id

    @staff_unique_id.setter
    def staff_unique_id(self, staff_unique_id):
        """Sets the staff_unique_id of this Staff.

        A unique alphanumeric code assigned to a staff.  # noqa: E501

        :param staff_unique_id: The staff_unique_id of this Staff.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and staff_unique_id is None:
            raise ValueError("Invalid value for `staff_unique_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                staff_unique_id is not None and len(staff_unique_id) > 32):
            raise ValueError("Invalid value for `staff_unique_id`, length must be less than or equal to `32`")  # noqa: E501

        self._staff_unique_id = staff_unique_id

    @property
    def telephones(self):
        """Gets the telephones of this Staff.  # noqa: E501

        An unordered collection of staffTelephones.   # noqa: E501

        :return: The telephones of this Staff.  # noqa: E501
        :rtype: list[StaffStaffTelephone]
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this Staff.

        An unordered collection of staffTelephones.   # noqa: E501

        :param telephones: The telephones of this Staff.  # noqa: E501
        :type: list[StaffStaffTelephone]
        """

        self._telephones = telephones

    @property
    def etag(self):
        """Gets the etag of this Staff.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Staff.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this Staff.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Staff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Staff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Staff):
            return True

        return self.to_dict() != other.to_dict()
