# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SectionSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'school_id': 'int',
        'school_year': 'int',
        'term_descriptor': 'str',
        'session_name': 'str',
        'begin_date': 'date',
        'end_date': 'date',
        'total_instructional_days': 'int'
    }

    attribute_map = {
        'id': 'id',
        'school_id': 'schoolId',
        'school_year': 'schoolYear',
        'term_descriptor': 'termDescriptor',
        'session_name': 'sessionName',
        'begin_date': 'beginDate',
        'end_date': 'endDate',
        'total_instructional_days': 'totalInstructionalDays'
    }

    def __init__(self, id=None, school_id=None, school_year=None, term_descriptor=None, session_name=None, begin_date=None, end_date=None, total_instructional_days=None, _configuration=None):  # noqa: E501
        """SectionSession - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._school_id = None
        self._school_year = None
        self._term_descriptor = None
        self._session_name = None
        self._begin_date = None
        self._end_date = None
        self._total_instructional_days = None
        self.discriminator = None

        self.id = id
        self.school_id = school_id
        self.school_year = school_year
        self.term_descriptor = term_descriptor
        self.session_name = session_name
        self.begin_date = begin_date
        self.end_date = end_date
        self.total_instructional_days = total_instructional_days

    @property
    def id(self):
        """Gets the id of this SectionSession.  # noqa: E501

          # noqa: E501

        :return: The id of this SectionSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SectionSession.

          # noqa: E501

        :param id: The id of this SectionSession.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def school_id(self):
        """Gets the school_id of this SectionSession.  # noqa: E501

        The identifier assigned to a school.  # noqa: E501

        :return: The school_id of this SectionSession.  # noqa: E501
        :rtype: int
        """
        return self._school_id

    @school_id.setter
    def school_id(self, school_id):
        """Sets the school_id of this SectionSession.

        The identifier assigned to a school.  # noqa: E501

        :param school_id: The school_id of this SectionSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and school_id is None:
            raise ValueError("Invalid value for `school_id`, must not be `None`")  # noqa: E501

        self._school_id = school_id

    @property
    def school_year(self):
        """Gets the school_year of this SectionSession.  # noqa: E501

        The identifier for the school year.  # noqa: E501

        :return: The school_year of this SectionSession.  # noqa: E501
        :rtype: int
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this SectionSession.

        The identifier for the school year.  # noqa: E501

        :param school_year: The school_year of this SectionSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and school_year is None:
            raise ValueError("Invalid value for `school_year`, must not be `None`")  # noqa: E501

        self._school_year = school_year

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this SectionSession.  # noqa: E501

        An descriptor value indicating the term (e.g. 'Semester', 'Quarter', etc.).  # noqa: E501

        :return: The term_descriptor of this SectionSession.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this SectionSession.

        An descriptor value indicating the term (e.g. 'Semester', 'Quarter', etc.).  # noqa: E501

        :param term_descriptor: The term_descriptor of this SectionSession.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and term_descriptor is None:
            raise ValueError("Invalid value for `term_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                term_descriptor is not None and len(term_descriptor) > 306):
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def session_name(self):
        """Gets the session_name of this SectionSession.  # noqa: E501

        The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).  # noqa: E501

        :return: The session_name of this SectionSession.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this SectionSession.

        The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).  # noqa: E501

        :param session_name: The session_name of this SectionSession.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and session_name is None:
            raise ValueError("Invalid value for `session_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                session_name is not None and len(session_name) > 60):
            raise ValueError("Invalid value for `session_name`, length must be less than or equal to `60`")  # noqa: E501

        self._session_name = session_name

    @property
    def begin_date(self):
        """Gets the begin_date of this SectionSession.  # noqa: E501

        Month, day, and year of the first day of the Session.  # noqa: E501

        :return: The begin_date of this SectionSession.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this SectionSession.

        Month, day, and year of the first day of the Session.  # noqa: E501

        :param begin_date: The begin_date of this SectionSession.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def end_date(self):
        """Gets the end_date of this SectionSession.  # noqa: E501

        Month, day and year of the last day of the Session.  # noqa: E501

        :return: The end_date of this SectionSession.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SectionSession.

        Month, day and year of the last day of the Session.  # noqa: E501

        :param end_date: The end_date of this SectionSession.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def total_instructional_days(self):
        """Gets the total_instructional_days of this SectionSession.  # noqa: E501

        The total number of instructional days in the school calendar.  # noqa: E501

        :return: The total_instructional_days of this SectionSession.  # noqa: E501
        :rtype: int
        """
        return self._total_instructional_days

    @total_instructional_days.setter
    def total_instructional_days(self, total_instructional_days):
        """Sets the total_instructional_days of this SectionSession.

        The total number of instructional days in the school calendar.  # noqa: E501

        :param total_instructional_days: The total_instructional_days of this SectionSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_instructional_days is None:
            raise ValueError("Invalid value for `total_instructional_days`, must not be `None`")  # noqa: E501

        self._total_instructional_days = total_instructional_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectionSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SectionSession):
            return True

        return self.to_dict() != other.to_dict()
