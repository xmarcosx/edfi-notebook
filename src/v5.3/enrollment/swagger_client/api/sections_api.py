# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sections(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sections_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'fields', 'q', 'section_identifier', 'local_course_code', 'school_id', 'school_year', 'session_name', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('section_identifier' in params and
                                                       len(params['section_identifier']) > 255):
            raise ValueError("Invalid value for parameter `section_identifier` when calling `get_sections`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('local_course_code' in params and
                                                       len(params['local_course_code']) > 60):
            raise ValueError("Invalid value for parameter `local_course_code` when calling `get_sections`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('session_name' in params and
                                                       len(params['session_name']) > 60):
            raise ValueError("Invalid value for parameter `session_name` when calling `get_sections`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'section_identifier' in params:
            query_params.append(('sectionIdentifier', params['section_identifier']))  # noqa: E501
        if 'local_course_code' in params:
            query_params.append(('localCourseCode', params['local_course_code']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'session_name' in params:
            query_params.append(('sessionName', params['session_name']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/Sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sections_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_sections_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match', 'fields', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_sections_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/Sections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sections_by_local_education_agency(self, local_education_agency_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_local_education_agency(local_education_agency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str local_education_agency_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_by_local_education_agency_with_http_info(local_education_agency_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_by_local_education_agency_with_http_info(local_education_agency_id, **kwargs)  # noqa: E501
            return data

    def get_sections_by_local_education_agency_with_http_info(self, local_education_agency_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_local_education_agency_with_http_info(local_education_agency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str local_education_agency_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['local_education_agency_id', 'offset', 'limit', 'fields', 'q', 'section_identifier', 'local_course_code', 'school_id', 'school_year', 'session_name', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections_by_local_education_agency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'local_education_agency_id' is set
        if self.api_client.client_side_validation and ('local_education_agency_id' not in params or
                                                       params['local_education_agency_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `local_education_agency_id` when calling `get_sections_by_local_education_agency`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_local_education_agency`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_local_education_agency`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('section_identifier' in params and
                                                       len(params['section_identifier']) > 255):
            raise ValueError("Invalid value for parameter `section_identifier` when calling `get_sections_by_local_education_agency`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('local_course_code' in params and
                                                       len(params['local_course_code']) > 60):
            raise ValueError("Invalid value for parameter `local_course_code` when calling `get_sections_by_local_education_agency`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('session_name' in params and
                                                       len(params['session_name']) > 60):
            raise ValueError("Invalid value for parameter `session_name` when calling `get_sections_by_local_education_agency`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'local_education_agency_id' in params:
            path_params['localEducationAgency_id'] = params['local_education_agency_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'section_identifier' in params:
            query_params.append(('sectionIdentifier', params['section_identifier']))  # noqa: E501
        if 'local_course_code' in params:
            query_params.append(('localCourseCode', params['local_course_code']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'session_name' in params:
            query_params.append(('sessionName', params['session_name']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sections_by_school(self, school_id2, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_school(school_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str school_id2:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_by_school_with_http_info(school_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_by_school_with_http_info(school_id2, **kwargs)  # noqa: E501
            return data

    def get_sections_by_school_with_http_info(self, school_id2, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_school_with_http_info(school_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str school_id2:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['school_id2', 'offset', 'limit', 'fields', 'q', 'section_identifier', 'local_course_code', 'school_id', 'school_year', 'session_name', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections_by_school" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'school_id2' is set
        if self.api_client.client_side_validation and ('school_id2' not in params or
                                                       params['school_id2'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `school_id2` when calling `get_sections_by_school`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_school`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_school`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('section_identifier' in params and
                                                       len(params['section_identifier']) > 255):
            raise ValueError("Invalid value for parameter `section_identifier` when calling `get_sections_by_school`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('local_course_code' in params and
                                                       len(params['local_course_code']) > 60):
            raise ValueError("Invalid value for parameter `local_course_code` when calling `get_sections_by_school`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('session_name' in params and
                                                       len(params['session_name']) > 60):
            raise ValueError("Invalid value for parameter `session_name` when calling `get_sections_by_school`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'school_id2' in params:
            path_params['school_id'] = params['school_id2']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'section_identifier' in params:
            query_params.append(('sectionIdentifier', params['section_identifier']))  # noqa: E501
        if 'local_course_code' in params:
            query_params.append(('localCourseCode', params['local_course_code']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'session_name' in params:
            query_params.append(('sessionName', params['session_name']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/schools/{school_id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sections_by_staff(self, staff_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_staff(staff_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str staff_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_by_staff_with_http_info(staff_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_by_staff_with_http_info(staff_id, **kwargs)  # noqa: E501
            return data

    def get_sections_by_staff_with_http_info(self, staff_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_staff_with_http_info(staff_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str staff_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staff_id', 'offset', 'limit', 'fields', 'q', 'section_identifier', 'local_course_code', 'school_id', 'school_year', 'session_name', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections_by_staff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'staff_id' is set
        if self.api_client.client_side_validation and ('staff_id' not in params or
                                                       params['staff_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `staff_id` when calling `get_sections_by_staff`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_staff`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_staff`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('section_identifier' in params and
                                                       len(params['section_identifier']) > 255):
            raise ValueError("Invalid value for parameter `section_identifier` when calling `get_sections_by_staff`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('local_course_code' in params and
                                                       len(params['local_course_code']) > 60):
            raise ValueError("Invalid value for parameter `local_course_code` when calling `get_sections_by_staff`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('session_name' in params and
                                                       len(params['session_name']) > 60):
            raise ValueError("Invalid value for parameter `session_name` when calling `get_sections_by_staff`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'staff_id' in params:
            path_params['staff_id'] = params['staff_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'section_identifier' in params:
            query_params.append(('sectionIdentifier', params['section_identifier']))  # noqa: E501
        if 'local_course_code' in params:
            query_params.append(('localCourseCode', params['local_course_code']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'session_name' in params:
            query_params.append(('sessionName', params['session_name']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/staffs/{staff_id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sections_by_student(self, student_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_student(student_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str student_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sections_by_student_with_http_info(student_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_by_student_with_http_info(student_id, **kwargs)  # noqa: E501
            return data

    def get_sections_by_student_with_http_info(self, student_id, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sections_by_student_with_http_info(student_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str student_id:  (required)
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param str fields: Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").
        :param str q: Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"schoolId:[255901000...255901002]\" and \"BeginDate:[2016-03-07...2016-03-10]\").
        :param str section_identifier: The local identifier assigned to a section.
        :param str local_course_code: The local code assigned by the School that identifies the course offering provided for the instruction of students.
        :param int school_id: The identifier assigned to a school.
        :param int school_year: The identifier for the school year.
        :param str session_name: The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_id', 'offset', 'limit', 'fields', 'q', 'section_identifier', 'local_course_code', 'school_id', 'school_year', 'session_name', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections_by_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_id' is set
        if self.api_client.client_side_validation and ('student_id' not in params or
                                                       params['student_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_id` when calling `get_sections_by_student`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_student`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_sections_by_student`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('section_identifier' in params and
                                                       len(params['section_identifier']) > 255):
            raise ValueError("Invalid value for parameter `section_identifier` when calling `get_sections_by_student`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('local_course_code' in params and
                                                       len(params['local_course_code']) > 60):
            raise ValueError("Invalid value for parameter `local_course_code` when calling `get_sections_by_student`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('session_name' in params and
                                                       len(params['session_name']) > 60):
            raise ValueError("Invalid value for parameter `session_name` when calling `get_sections_by_student`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'student_id' in params:
            path_params['student_id'] = params['student_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'section_identifier' in params:
            query_params.append(('sectionIdentifier', params['section_identifier']))  # noqa: E501
        if 'local_course_code' in params:
            query_params.append(('localCourseCode', params['local_course_code']))  # noqa: E501
        if 'school_id' in params:
            query_params.append(('schoolId', params['school_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'session_name' in params:
            query_params.append(('sessionName', params['session_name']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/enrollment/students/{student_id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
