# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiProgram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'program_name': 'str',
        'program_type_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'characteristics': 'list[EdFiProgramCharacteristic]',
        'learning_objectives': 'list[EdFiProgramLearningObjective]',
        'learning_standards': 'list[EdFiProgramLearningStandard]',
        'program_id': 'str',
        'services': 'list[EdFiProgramService]',
        'sponsors': 'list[EdFiProgramSponsor]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'program_name': 'programName',
        'program_type_descriptor': 'programTypeDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'characteristics': 'characteristics',
        'learning_objectives': 'learningObjectives',
        'learning_standards': 'learningStandards',
        'program_id': 'programId',
        'services': 'services',
        'sponsors': 'sponsors',
        'etag': '_etag'
    }

    def __init__(self, id=None, program_name=None, program_type_descriptor=None, education_organization_reference=None, characteristics=None, learning_objectives=None, learning_standards=None, program_id=None, services=None, sponsors=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiProgram - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._program_name = None
        self._program_type_descriptor = None
        self._education_organization_reference = None
        self._characteristics = None
        self._learning_objectives = None
        self._learning_standards = None
        self._program_id = None
        self._services = None
        self._sponsors = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.program_name = program_name
        self.program_type_descriptor = program_type_descriptor
        self.education_organization_reference = education_organization_reference
        if characteristics is not None:
            self.characteristics = characteristics
        if learning_objectives is not None:
            self.learning_objectives = learning_objectives
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if program_id is not None:
            self.program_id = program_id
        if services is not None:
            self.services = services
        if sponsors is not None:
            self.sponsors = sponsors
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiProgram.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiProgram.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiProgram.

          # noqa: E501

        :param id: The id of this EdFiProgram.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def program_name(self):
        """Gets the program_name of this EdFiProgram.  # noqa: E501

        The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.  # noqa: E501

        :return: The program_name of this EdFiProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this EdFiProgram.

        The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.  # noqa: E501

        :param program_name: The program_name of this EdFiProgram.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and program_name is None:
            raise ValueError("Invalid value for `program_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                program_name is not None and len(program_name) > 60):
            raise ValueError("Invalid value for `program_name`, length must be less than or equal to `60`")  # noqa: E501

        self._program_name = program_name

    @property
    def program_type_descriptor(self):
        """Gets the program_type_descriptor of this EdFiProgram.  # noqa: E501

        The type of program.  # noqa: E501

        :return: The program_type_descriptor of this EdFiProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_type_descriptor

    @program_type_descriptor.setter
    def program_type_descriptor(self, program_type_descriptor):
        """Sets the program_type_descriptor of this EdFiProgram.

        The type of program.  # noqa: E501

        :param program_type_descriptor: The program_type_descriptor of this EdFiProgram.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and program_type_descriptor is None:
            raise ValueError("Invalid value for `program_type_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                program_type_descriptor is not None and len(program_type_descriptor) > 306):
            raise ValueError("Invalid value for `program_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._program_type_descriptor = program_type_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiProgram.  # noqa: E501


        :return: The education_organization_reference of this EdFiProgram.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiProgram.


        :param education_organization_reference: The education_organization_reference of this EdFiProgram.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def characteristics(self):
        """Gets the characteristics of this EdFiProgram.  # noqa: E501

        An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.  # noqa: E501

        :return: The characteristics of this EdFiProgram.  # noqa: E501
        :rtype: list[EdFiProgramCharacteristic]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this EdFiProgram.

        An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.  # noqa: E501

        :param characteristics: The characteristics of this EdFiProgram.  # noqa: E501
        :type: list[EdFiProgramCharacteristic]
        """

        self._characteristics = characteristics

    @property
    def learning_objectives(self):
        """Gets the learning_objectives of this EdFiProgram.  # noqa: E501

        An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated.  # noqa: E501

        :return: The learning_objectives of this EdFiProgram.  # noqa: E501
        :rtype: list[EdFiProgramLearningObjective]
        """
        return self._learning_objectives

    @learning_objectives.setter
    def learning_objectives(self, learning_objectives):
        """Sets the learning_objectives of this EdFiProgram.

        An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated.  # noqa: E501

        :param learning_objectives: The learning_objectives of this EdFiProgram.  # noqa: E501
        :type: list[EdFiProgramLearningObjective]
        """

        self._learning_objectives = learning_objectives

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiProgram.  # noqa: E501

        An unordered collection of programLearningStandards. LearningStandard followed by this program.  # noqa: E501

        :return: The learning_standards of this EdFiProgram.  # noqa: E501
        :rtype: list[EdFiProgramLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiProgram.

        An unordered collection of programLearningStandards. LearningStandard followed by this program.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiProgram.  # noqa: E501
        :type: list[EdFiProgramLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def program_id(self):
        """Gets the program_id of this EdFiProgram.  # noqa: E501

        A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The program_id of this EdFiProgram.  # noqa: E501
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this EdFiProgram.

        A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param program_id: The program_id of this EdFiProgram.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                program_id is not None and len(program_id) > 20):
            raise ValueError("Invalid value for `program_id`, length must be less than or equal to `20`")  # noqa: E501

        self._program_id = program_id

    @property
    def services(self):
        """Gets the services of this EdFiProgram.  # noqa: E501

        An unordered collection of programServices. Defines the services this program provides to students.  # noqa: E501

        :return: The services of this EdFiProgram.  # noqa: E501
        :rtype: list[EdFiProgramService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this EdFiProgram.

        An unordered collection of programServices. Defines the services this program provides to students.  # noqa: E501

        :param services: The services of this EdFiProgram.  # noqa: E501
        :type: list[EdFiProgramService]
        """

        self._services = services

    @property
    def sponsors(self):
        """Gets the sponsors of this EdFiProgram.  # noqa: E501

        An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual's participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).  # noqa: E501

        :return: The sponsors of this EdFiProgram.  # noqa: E501
        :rtype: list[EdFiProgramSponsor]
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this EdFiProgram.

        An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual's participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).  # noqa: E501

        :param sponsors: The sponsors of this EdFiProgram.  # noqa: E501
        :type: list[EdFiProgramSponsor]
        """

        self._sponsors = sponsors

    @property
    def etag(self):
        """Gets the etag of this EdFiProgram.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiProgram.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiProgram.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiProgram.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiProgram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiProgram):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiProgram):
            return True

        return self.to_dict() != other.to_dict()
