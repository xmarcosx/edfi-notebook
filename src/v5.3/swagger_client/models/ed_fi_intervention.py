# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiIntervention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'intervention_identification_code': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'appropriate_grade_levels': 'list[EdFiInterventionAppropriateGradeLevel]',
        'appropriate_sexes': 'list[EdFiInterventionAppropriateSex]',
        'begin_date': 'date',
        'delivery_method_descriptor': 'str',
        'diagnoses': 'list[EdFiInterventionDiagnosis]',
        'education_contents': 'list[EdFiInterventionEducationContent]',
        'end_date': 'date',
        'intervention_class_descriptor': 'str',
        'intervention_prescriptions': 'list[EdFiInterventionInterventionPrescription]',
        'learning_resource_metadata_ur_is': 'list[EdFiInterventionLearningResourceMetadataURI]',
        'max_dosage': 'int',
        'meeting_times': 'list[EdFiInterventionMeetingTime]',
        'min_dosage': 'int',
        'population_serveds': 'list[EdFiInterventionPopulationServed]',
        'staffs': 'list[EdFiInterventionStaff]',
        'uris': 'list[EdFiInterventionURI]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'intervention_identification_code': 'interventionIdentificationCode',
        'education_organization_reference': 'educationOrganizationReference',
        'appropriate_grade_levels': 'appropriateGradeLevels',
        'appropriate_sexes': 'appropriateSexes',
        'begin_date': 'beginDate',
        'delivery_method_descriptor': 'deliveryMethodDescriptor',
        'diagnoses': 'diagnoses',
        'education_contents': 'educationContents',
        'end_date': 'endDate',
        'intervention_class_descriptor': 'interventionClassDescriptor',
        'intervention_prescriptions': 'interventionPrescriptions',
        'learning_resource_metadata_ur_is': 'learningResourceMetadataURIs',
        'max_dosage': 'maxDosage',
        'meeting_times': 'meetingTimes',
        'min_dosage': 'minDosage',
        'population_serveds': 'populationServeds',
        'staffs': 'staffs',
        'uris': 'uris',
        'etag': '_etag'
    }

    def __init__(self, id=None, intervention_identification_code=None, education_organization_reference=None, appropriate_grade_levels=None, appropriate_sexes=None, begin_date=None, delivery_method_descriptor=None, diagnoses=None, education_contents=None, end_date=None, intervention_class_descriptor=None, intervention_prescriptions=None, learning_resource_metadata_ur_is=None, max_dosage=None, meeting_times=None, min_dosage=None, population_serveds=None, staffs=None, uris=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiIntervention - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._intervention_identification_code = None
        self._education_organization_reference = None
        self._appropriate_grade_levels = None
        self._appropriate_sexes = None
        self._begin_date = None
        self._delivery_method_descriptor = None
        self._diagnoses = None
        self._education_contents = None
        self._end_date = None
        self._intervention_class_descriptor = None
        self._intervention_prescriptions = None
        self._learning_resource_metadata_ur_is = None
        self._max_dosage = None
        self._meeting_times = None
        self._min_dosage = None
        self._population_serveds = None
        self._staffs = None
        self._uris = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.intervention_identification_code = intervention_identification_code
        self.education_organization_reference = education_organization_reference
        if appropriate_grade_levels is not None:
            self.appropriate_grade_levels = appropriate_grade_levels
        if appropriate_sexes is not None:
            self.appropriate_sexes = appropriate_sexes
        self.begin_date = begin_date
        self.delivery_method_descriptor = delivery_method_descriptor
        if diagnoses is not None:
            self.diagnoses = diagnoses
        if education_contents is not None:
            self.education_contents = education_contents
        if end_date is not None:
            self.end_date = end_date
        self.intervention_class_descriptor = intervention_class_descriptor
        if intervention_prescriptions is not None:
            self.intervention_prescriptions = intervention_prescriptions
        if learning_resource_metadata_ur_is is not None:
            self.learning_resource_metadata_ur_is = learning_resource_metadata_ur_is
        if max_dosage is not None:
            self.max_dosage = max_dosage
        if meeting_times is not None:
            self.meeting_times = meeting_times
        if min_dosage is not None:
            self.min_dosage = min_dosage
        if population_serveds is not None:
            self.population_serveds = population_serveds
        if staffs is not None:
            self.staffs = staffs
        if uris is not None:
            self.uris = uris
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiIntervention.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiIntervention.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiIntervention.

          # noqa: E501

        :param id: The id of this EdFiIntervention.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intervention_identification_code(self):
        """Gets the intervention_identification_code of this EdFiIntervention.  # noqa: E501

        A unique number or alphanumeric code assigned to an intervention.  # noqa: E501

        :return: The intervention_identification_code of this EdFiIntervention.  # noqa: E501
        :rtype: str
        """
        return self._intervention_identification_code

    @intervention_identification_code.setter
    def intervention_identification_code(self, intervention_identification_code):
        """Sets the intervention_identification_code of this EdFiIntervention.

        A unique number or alphanumeric code assigned to an intervention.  # noqa: E501

        :param intervention_identification_code: The intervention_identification_code of this EdFiIntervention.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and intervention_identification_code is None:
            raise ValueError("Invalid value for `intervention_identification_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                intervention_identification_code is not None and len(intervention_identification_code) > 60):
            raise ValueError("Invalid value for `intervention_identification_code`, length must be less than or equal to `60`")  # noqa: E501

        self._intervention_identification_code = intervention_identification_code

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiIntervention.  # noqa: E501


        :return: The education_organization_reference of this EdFiIntervention.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiIntervention.


        :param education_organization_reference: The education_organization_reference of this EdFiIntervention.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def appropriate_grade_levels(self):
        """Gets the appropriate_grade_levels of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionAppropriateGradeLevels. Grade levels for the Intervention-if omitted, considered generally applicable.  # noqa: E501

        :return: The appropriate_grade_levels of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionAppropriateGradeLevel]
        """
        return self._appropriate_grade_levels

    @appropriate_grade_levels.setter
    def appropriate_grade_levels(self, appropriate_grade_levels):
        """Sets the appropriate_grade_levels of this EdFiIntervention.

        An unordered collection of interventionAppropriateGradeLevels. Grade levels for the Intervention-if omitted, considered generally applicable.  # noqa: E501

        :param appropriate_grade_levels: The appropriate_grade_levels of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionAppropriateGradeLevel]
        """

        self._appropriate_grade_levels = appropriate_grade_levels

    @property
    def appropriate_sexes(self):
        """Gets the appropriate_sexes of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionAppropriateSexes. Sexes for the Intervention. If omitted, considered generally applicable.  # noqa: E501

        :return: The appropriate_sexes of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionAppropriateSex]
        """
        return self._appropriate_sexes

    @appropriate_sexes.setter
    def appropriate_sexes(self, appropriate_sexes):
        """Sets the appropriate_sexes of this EdFiIntervention.

        An unordered collection of interventionAppropriateSexes. Sexes for the Intervention. If omitted, considered generally applicable.  # noqa: E501

        :param appropriate_sexes: The appropriate_sexes of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionAppropriateSex]
        """

        self._appropriate_sexes = appropriate_sexes

    @property
    def begin_date(self):
        """Gets the begin_date of this EdFiIntervention.  # noqa: E501

        The start date for the intervention implementation.  # noqa: E501

        :return: The begin_date of this EdFiIntervention.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EdFiIntervention.

        The start date for the intervention implementation.  # noqa: E501

        :param begin_date: The begin_date of this EdFiIntervention.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def delivery_method_descriptor(self):
        """Gets the delivery_method_descriptor of this EdFiIntervention.  # noqa: E501

        The way in which an intervention was implemented: individual, small group, whole class, or whole school.  # noqa: E501

        :return: The delivery_method_descriptor of this EdFiIntervention.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method_descriptor

    @delivery_method_descriptor.setter
    def delivery_method_descriptor(self, delivery_method_descriptor):
        """Sets the delivery_method_descriptor of this EdFiIntervention.

        The way in which an intervention was implemented: individual, small group, whole class, or whole school.  # noqa: E501

        :param delivery_method_descriptor: The delivery_method_descriptor of this EdFiIntervention.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and delivery_method_descriptor is None:
            raise ValueError("Invalid value for `delivery_method_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                delivery_method_descriptor is not None and len(delivery_method_descriptor) > 306):
            raise ValueError("Invalid value for `delivery_method_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._delivery_method_descriptor = delivery_method_descriptor

    @property
    def diagnoses(self):
        """Gets the diagnoses of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionDiagnoses. Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).  # noqa: E501

        :return: The diagnoses of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionDiagnosis]
        """
        return self._diagnoses

    @diagnoses.setter
    def diagnoses(self, diagnoses):
        """Sets the diagnoses of this EdFiIntervention.

        An unordered collection of interventionDiagnoses. Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).  # noqa: E501

        :param diagnoses: The diagnoses of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionDiagnosis]
        """

        self._diagnoses = diagnoses

    @property
    def education_contents(self):
        """Gets the education_contents of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionEducationContents. Relates the education content source to the education content.  # noqa: E501

        :return: The education_contents of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionEducationContent]
        """
        return self._education_contents

    @education_contents.setter
    def education_contents(self, education_contents):
        """Sets the education_contents of this EdFiIntervention.

        An unordered collection of interventionEducationContents. Relates the education content source to the education content.  # noqa: E501

        :param education_contents: The education_contents of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionEducationContent]
        """

        self._education_contents = education_contents

    @property
    def end_date(self):
        """Gets the end_date of this EdFiIntervention.  # noqa: E501

        The end date for the intervention implementation.  # noqa: E501

        :return: The end_date of this EdFiIntervention.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EdFiIntervention.

        The end date for the intervention implementation.  # noqa: E501

        :param end_date: The end_date of this EdFiIntervention.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def intervention_class_descriptor(self):
        """Gets the intervention_class_descriptor of this EdFiIntervention.  # noqa: E501

        The way in which an intervention is used: curriculum, supplement, or practice.  # noqa: E501

        :return: The intervention_class_descriptor of this EdFiIntervention.  # noqa: E501
        :rtype: str
        """
        return self._intervention_class_descriptor

    @intervention_class_descriptor.setter
    def intervention_class_descriptor(self, intervention_class_descriptor):
        """Sets the intervention_class_descriptor of this EdFiIntervention.

        The way in which an intervention is used: curriculum, supplement, or practice.  # noqa: E501

        :param intervention_class_descriptor: The intervention_class_descriptor of this EdFiIntervention.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and intervention_class_descriptor is None:
            raise ValueError("Invalid value for `intervention_class_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                intervention_class_descriptor is not None and len(intervention_class_descriptor) > 306):
            raise ValueError("Invalid value for `intervention_class_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._intervention_class_descriptor = intervention_class_descriptor

    @property
    def intervention_prescriptions(self):
        """Gets the intervention_prescriptions of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.  # noqa: E501

        :return: The intervention_prescriptions of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionInterventionPrescription]
        """
        return self._intervention_prescriptions

    @intervention_prescriptions.setter
    def intervention_prescriptions(self, intervention_prescriptions):
        """Sets the intervention_prescriptions of this EdFiIntervention.

        An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.  # noqa: E501

        :param intervention_prescriptions: The intervention_prescriptions of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionInterventionPrescription]
        """

        self._intervention_prescriptions = intervention_prescriptions

    @property
    def learning_resource_metadata_ur_is(self):
        """Gets the learning_resource_metadata_ur_is of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :return: The learning_resource_metadata_ur_is of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionLearningResourceMetadataURI]
        """
        return self._learning_resource_metadata_ur_is

    @learning_resource_metadata_ur_is.setter
    def learning_resource_metadata_ur_is(self, learning_resource_metadata_ur_is):
        """Sets the learning_resource_metadata_ur_is of this EdFiIntervention.

        An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.  # noqa: E501

        :param learning_resource_metadata_ur_is: The learning_resource_metadata_ur_is of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionLearningResourceMetadataURI]
        """

        self._learning_resource_metadata_ur_is = learning_resource_metadata_ur_is

    @property
    def max_dosage(self):
        """Gets the max_dosage of this EdFiIntervention.  # noqa: E501

        The maximum duration of time in minutes that may be assigned for the intervention.  # noqa: E501

        :return: The max_dosage of this EdFiIntervention.  # noqa: E501
        :rtype: int
        """
        return self._max_dosage

    @max_dosage.setter
    def max_dosage(self, max_dosage):
        """Sets the max_dosage of this EdFiIntervention.

        The maximum duration of time in minutes that may be assigned for the intervention.  # noqa: E501

        :param max_dosage: The max_dosage of this EdFiIntervention.  # noqa: E501
        :type: int
        """

        self._max_dosage = max_dosage

    @property
    def meeting_times(self):
        """Gets the meeting_times of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.  # noqa: E501

        :return: The meeting_times of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionMeetingTime]
        """
        return self._meeting_times

    @meeting_times.setter
    def meeting_times(self, meeting_times):
        """Sets the meeting_times of this EdFiIntervention.

        An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.  # noqa: E501

        :param meeting_times: The meeting_times of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionMeetingTime]
        """

        self._meeting_times = meeting_times

    @property
    def min_dosage(self):
        """Gets the min_dosage of this EdFiIntervention.  # noqa: E501

        The minimum duration of time in minutes that may be assigned for the intervention.  # noqa: E501

        :return: The min_dosage of this EdFiIntervention.  # noqa: E501
        :rtype: int
        """
        return self._min_dosage

    @min_dosage.setter
    def min_dosage(self, min_dosage):
        """Sets the min_dosage of this EdFiIntervention.

        The minimum duration of time in minutes that may be assigned for the intervention.  # noqa: E501

        :param min_dosage: The min_dosage of this EdFiIntervention.  # noqa: E501
        :type: int
        """

        self._min_dosage = min_dosage

    @property
    def population_serveds(self):
        """Gets the population_serveds of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the Intervention.  # noqa: E501

        :return: The population_serveds of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionPopulationServed]
        """
        return self._population_serveds

    @population_serveds.setter
    def population_serveds(self, population_serveds):
        """Sets the population_serveds of this EdFiIntervention.

        An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the Intervention.  # noqa: E501

        :param population_serveds: The population_serveds of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionPopulationServed]
        """

        self._population_serveds = population_serveds

    @property
    def staffs(self):
        """Gets the staffs of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.  # noqa: E501

        :return: The staffs of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionStaff]
        """
        return self._staffs

    @staffs.setter
    def staffs(self, staffs):
        """Sets the staffs of this EdFiIntervention.

        An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.  # noqa: E501

        :param staffs: The staffs of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionStaff]
        """

        self._staffs = staffs

    @property
    def uris(self):
        """Gets the uris of this EdFiIntervention.  # noqa: E501

        An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :return: The uris of this EdFiIntervention.  # noqa: E501
        :rtype: list[EdFiInterventionURI]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this EdFiIntervention.

        An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.  # noqa: E501

        :param uris: The uris of this EdFiIntervention.  # noqa: E501
        :type: list[EdFiInterventionURI]
        """

        self._uris = uris

    @property
    def etag(self):
        """Gets the etag of this EdFiIntervention.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiIntervention.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiIntervention.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiIntervention.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiIntervention, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiIntervention):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiIntervention):
            return True

        return self.to_dict() != other.to_dict()
