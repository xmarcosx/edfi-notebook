# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCourseOffering(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'local_course_code': 'str',
        'course_reference': 'EdFiCourseReference',
        'school_reference': 'EdFiSchoolReference',
        'session_reference': 'EdFiSessionReference',
        'course_level_characteristics': 'list[EdFiCourseOfferingCourseLevelCharacteristic]',
        'curriculum_useds': 'list[EdFiCourseOfferingCurriculumUsed]',
        'instructional_time_planned': 'int',
        'local_course_title': 'str',
        'offered_grade_levels': 'list[EdFiCourseOfferingOfferedGradeLevel]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'local_course_code': 'localCourseCode',
        'course_reference': 'courseReference',
        'school_reference': 'schoolReference',
        'session_reference': 'sessionReference',
        'course_level_characteristics': 'courseLevelCharacteristics',
        'curriculum_useds': 'curriculumUseds',
        'instructional_time_planned': 'instructionalTimePlanned',
        'local_course_title': 'localCourseTitle',
        'offered_grade_levels': 'offeredGradeLevels',
        'etag': '_etag'
    }

    def __init__(self, id=None, local_course_code=None, course_reference=None, school_reference=None, session_reference=None, course_level_characteristics=None, curriculum_useds=None, instructional_time_planned=None, local_course_title=None, offered_grade_levels=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCourseOffering - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._local_course_code = None
        self._course_reference = None
        self._school_reference = None
        self._session_reference = None
        self._course_level_characteristics = None
        self._curriculum_useds = None
        self._instructional_time_planned = None
        self._local_course_title = None
        self._offered_grade_levels = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.local_course_code = local_course_code
        self.course_reference = course_reference
        self.school_reference = school_reference
        self.session_reference = session_reference
        if course_level_characteristics is not None:
            self.course_level_characteristics = course_level_characteristics
        if curriculum_useds is not None:
            self.curriculum_useds = curriculum_useds
        if instructional_time_planned is not None:
            self.instructional_time_planned = instructional_time_planned
        if local_course_title is not None:
            self.local_course_title = local_course_title
        if offered_grade_levels is not None:
            self.offered_grade_levels = offered_grade_levels
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCourseOffering.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCourseOffering.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCourseOffering.

          # noqa: E501

        :param id: The id of this EdFiCourseOffering.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def local_course_code(self):
        """Gets the local_course_code of this EdFiCourseOffering.  # noqa: E501

        The local code assigned by the School that identifies the course offering provided for the instruction of students.  # noqa: E501

        :return: The local_course_code of this EdFiCourseOffering.  # noqa: E501
        :rtype: str
        """
        return self._local_course_code

    @local_course_code.setter
    def local_course_code(self, local_course_code):
        """Sets the local_course_code of this EdFiCourseOffering.

        The local code assigned by the School that identifies the course offering provided for the instruction of students.  # noqa: E501

        :param local_course_code: The local_course_code of this EdFiCourseOffering.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and local_course_code is None:
            raise ValueError("Invalid value for `local_course_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                local_course_code is not None and len(local_course_code) > 60):
            raise ValueError("Invalid value for `local_course_code`, length must be less than or equal to `60`")  # noqa: E501

        self._local_course_code = local_course_code

    @property
    def course_reference(self):
        """Gets the course_reference of this EdFiCourseOffering.  # noqa: E501


        :return: The course_reference of this EdFiCourseOffering.  # noqa: E501
        :rtype: EdFiCourseReference
        """
        return self._course_reference

    @course_reference.setter
    def course_reference(self, course_reference):
        """Sets the course_reference of this EdFiCourseOffering.


        :param course_reference: The course_reference of this EdFiCourseOffering.  # noqa: E501
        :type: EdFiCourseReference
        """
        if self._configuration.client_side_validation and course_reference is None:
            raise ValueError("Invalid value for `course_reference`, must not be `None`")  # noqa: E501

        self._course_reference = course_reference

    @property
    def school_reference(self):
        """Gets the school_reference of this EdFiCourseOffering.  # noqa: E501


        :return: The school_reference of this EdFiCourseOffering.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this EdFiCourseOffering.


        :param school_reference: The school_reference of this EdFiCourseOffering.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and school_reference is None:
            raise ValueError("Invalid value for `school_reference`, must not be `None`")  # noqa: E501

        self._school_reference = school_reference

    @property
    def session_reference(self):
        """Gets the session_reference of this EdFiCourseOffering.  # noqa: E501


        :return: The session_reference of this EdFiCourseOffering.  # noqa: E501
        :rtype: EdFiSessionReference
        """
        return self._session_reference

    @session_reference.setter
    def session_reference(self, session_reference):
        """Sets the session_reference of this EdFiCourseOffering.


        :param session_reference: The session_reference of this EdFiCourseOffering.  # noqa: E501
        :type: EdFiSessionReference
        """
        if self._configuration.client_side_validation and session_reference is None:
            raise ValueError("Invalid value for `session_reference`, must not be `None`")  # noqa: E501

        self._session_reference = session_reference

    @property
    def course_level_characteristics(self):
        """Gets the course_level_characteristics of this EdFiCourseOffering.  # noqa: E501

        An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.  # noqa: E501

        :return: The course_level_characteristics of this EdFiCourseOffering.  # noqa: E501
        :rtype: list[EdFiCourseOfferingCourseLevelCharacteristic]
        """
        return self._course_level_characteristics

    @course_level_characteristics.setter
    def course_level_characteristics(self, course_level_characteristics):
        """Sets the course_level_characteristics of this EdFiCourseOffering.

        An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.  # noqa: E501

        :param course_level_characteristics: The course_level_characteristics of this EdFiCourseOffering.  # noqa: E501
        :type: list[EdFiCourseOfferingCourseLevelCharacteristic]
        """

        self._course_level_characteristics = course_level_characteristics

    @property
    def curriculum_useds(self):
        """Gets the curriculum_useds of this EdFiCourseOffering.  # noqa: E501

        An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.  # noqa: E501

        :return: The curriculum_useds of this EdFiCourseOffering.  # noqa: E501
        :rtype: list[EdFiCourseOfferingCurriculumUsed]
        """
        return self._curriculum_useds

    @curriculum_useds.setter
    def curriculum_useds(self, curriculum_useds):
        """Sets the curriculum_useds of this EdFiCourseOffering.

        An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.  # noqa: E501

        :param curriculum_useds: The curriculum_useds of this EdFiCourseOffering.  # noqa: E501
        :type: list[EdFiCourseOfferingCurriculumUsed]
        """

        self._curriculum_useds = curriculum_useds

    @property
    def instructional_time_planned(self):
        """Gets the instructional_time_planned of this EdFiCourseOffering.  # noqa: E501

        The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.  # noqa: E501

        :return: The instructional_time_planned of this EdFiCourseOffering.  # noqa: E501
        :rtype: int
        """
        return self._instructional_time_planned

    @instructional_time_planned.setter
    def instructional_time_planned(self, instructional_time_planned):
        """Sets the instructional_time_planned of this EdFiCourseOffering.

        The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.  # noqa: E501

        :param instructional_time_planned: The instructional_time_planned of this EdFiCourseOffering.  # noqa: E501
        :type: int
        """

        self._instructional_time_planned = instructional_time_planned

    @property
    def local_course_title(self):
        """Gets the local_course_title of this EdFiCourseOffering.  # noqa: E501

        The descriptive name given to a course of study offered in the school, if different from the CourseTitle.  # noqa: E501

        :return: The local_course_title of this EdFiCourseOffering.  # noqa: E501
        :rtype: str
        """
        return self._local_course_title

    @local_course_title.setter
    def local_course_title(self, local_course_title):
        """Sets the local_course_title of this EdFiCourseOffering.

        The descriptive name given to a course of study offered in the school, if different from the CourseTitle.  # noqa: E501

        :param local_course_title: The local_course_title of this EdFiCourseOffering.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                local_course_title is not None and len(local_course_title) > 60):
            raise ValueError("Invalid value for `local_course_title`, length must be less than or equal to `60`")  # noqa: E501

        self._local_course_title = local_course_title

    @property
    def offered_grade_levels(self):
        """Gets the offered_grade_levels of this EdFiCourseOffering.  # noqa: E501

        An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.  # noqa: E501

        :return: The offered_grade_levels of this EdFiCourseOffering.  # noqa: E501
        :rtype: list[EdFiCourseOfferingOfferedGradeLevel]
        """
        return self._offered_grade_levels

    @offered_grade_levels.setter
    def offered_grade_levels(self, offered_grade_levels):
        """Sets the offered_grade_levels of this EdFiCourseOffering.

        An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.  # noqa: E501

        :param offered_grade_levels: The offered_grade_levels of this EdFiCourseOffering.  # noqa: E501
        :type: list[EdFiCourseOfferingOfferedGradeLevel]
        """

        self._offered_grade_levels = offered_grade_levels

    @property
    def etag(self):
        """Gets the etag of this EdFiCourseOffering.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCourseOffering.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCourseOffering.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCourseOffering.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCourseOffering, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCourseOffering):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCourseOffering):
            return True

        return self.to_dict() != other.to_dict()
