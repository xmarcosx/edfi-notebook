# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmEvaluationObjective(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'evaluation_objective_title': 'str',
        'evaluation_reference': 'TpdmEvaluationReference',
        'evaluation_objective_description': 'str',
        'evaluation_type_descriptor': 'str',
        'max_rating': 'float',
        'min_rating': 'float',
        'rating_levels': 'list[TpdmEvaluationObjectiveRatingLevel]',
        'sort_order': 'int',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'evaluation_objective_title': 'evaluationObjectiveTitle',
        'evaluation_reference': 'evaluationReference',
        'evaluation_objective_description': 'evaluationObjectiveDescription',
        'evaluation_type_descriptor': 'evaluationTypeDescriptor',
        'max_rating': 'maxRating',
        'min_rating': 'minRating',
        'rating_levels': 'ratingLevels',
        'sort_order': 'sortOrder',
        'etag': '_etag'
    }

    def __init__(self, id=None, evaluation_objective_title=None, evaluation_reference=None, evaluation_objective_description=None, evaluation_type_descriptor=None, max_rating=None, min_rating=None, rating_levels=None, sort_order=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmEvaluationObjective - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._evaluation_objective_title = None
        self._evaluation_reference = None
        self._evaluation_objective_description = None
        self._evaluation_type_descriptor = None
        self._max_rating = None
        self._min_rating = None
        self._rating_levels = None
        self._sort_order = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.evaluation_objective_title = evaluation_objective_title
        self.evaluation_reference = evaluation_reference
        if evaluation_objective_description is not None:
            self.evaluation_objective_description = evaluation_objective_description
        if evaluation_type_descriptor is not None:
            self.evaluation_type_descriptor = evaluation_type_descriptor
        if max_rating is not None:
            self.max_rating = max_rating
        if min_rating is not None:
            self.min_rating = min_rating
        if rating_levels is not None:
            self.rating_levels = rating_levels
        if sort_order is not None:
            self.sort_order = sort_order
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmEvaluationObjective.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmEvaluationObjective.

          # noqa: E501

        :param id: The id of this TpdmEvaluationObjective.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def evaluation_objective_title(self):
        """Gets the evaluation_objective_title of this TpdmEvaluationObjective.  # noqa: E501

        The name or title of the evaluation Objective.  # noqa: E501

        :return: The evaluation_objective_title of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_objective_title

    @evaluation_objective_title.setter
    def evaluation_objective_title(self, evaluation_objective_title):
        """Sets the evaluation_objective_title of this TpdmEvaluationObjective.

        The name or title of the evaluation Objective.  # noqa: E501

        :param evaluation_objective_title: The evaluation_objective_title of this TpdmEvaluationObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and evaluation_objective_title is None:
            raise ValueError("Invalid value for `evaluation_objective_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                evaluation_objective_title is not None and len(evaluation_objective_title) > 50):
            raise ValueError("Invalid value for `evaluation_objective_title`, length must be less than or equal to `50`")  # noqa: E501

        self._evaluation_objective_title = evaluation_objective_title

    @property
    def evaluation_reference(self):
        """Gets the evaluation_reference of this TpdmEvaluationObjective.  # noqa: E501


        :return: The evaluation_reference of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: TpdmEvaluationReference
        """
        return self._evaluation_reference

    @evaluation_reference.setter
    def evaluation_reference(self, evaluation_reference):
        """Sets the evaluation_reference of this TpdmEvaluationObjective.


        :param evaluation_reference: The evaluation_reference of this TpdmEvaluationObjective.  # noqa: E501
        :type: TpdmEvaluationReference
        """
        if self._configuration.client_side_validation and evaluation_reference is None:
            raise ValueError("Invalid value for `evaluation_reference`, must not be `None`")  # noqa: E501

        self._evaluation_reference = evaluation_reference

    @property
    def evaluation_objective_description(self):
        """Gets the evaluation_objective_description of this TpdmEvaluationObjective.  # noqa: E501

        The long description of the Evaluation Objective.  # noqa: E501

        :return: The evaluation_objective_description of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_objective_description

    @evaluation_objective_description.setter
    def evaluation_objective_description(self, evaluation_objective_description):
        """Sets the evaluation_objective_description of this TpdmEvaluationObjective.

        The long description of the Evaluation Objective.  # noqa: E501

        :param evaluation_objective_description: The evaluation_objective_description of this TpdmEvaluationObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evaluation_objective_description is not None and len(evaluation_objective_description) > 255):
            raise ValueError("Invalid value for `evaluation_objective_description`, length must be less than or equal to `255`")  # noqa: E501

        self._evaluation_objective_description = evaluation_objective_description

    @property
    def evaluation_type_descriptor(self):
        """Gets the evaluation_type_descriptor of this TpdmEvaluationObjective.  # noqa: E501

        The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).  # noqa: E501

        :return: The evaluation_type_descriptor of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_type_descriptor

    @evaluation_type_descriptor.setter
    def evaluation_type_descriptor(self, evaluation_type_descriptor):
        """Sets the evaluation_type_descriptor of this TpdmEvaluationObjective.

        The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).  # noqa: E501

        :param evaluation_type_descriptor: The evaluation_type_descriptor of this TpdmEvaluationObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evaluation_type_descriptor is not None and len(evaluation_type_descriptor) > 306):
            raise ValueError("Invalid value for `evaluation_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._evaluation_type_descriptor = evaluation_type_descriptor

    @property
    def max_rating(self):
        """Gets the max_rating of this TpdmEvaluationObjective.  # noqa: E501

        The maximum summary numerical rating or score for the evaluation Objective.  # noqa: E501

        :return: The max_rating of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: float
        """
        return self._max_rating

    @max_rating.setter
    def max_rating(self, max_rating):
        """Sets the max_rating of this TpdmEvaluationObjective.

        The maximum summary numerical rating or score for the evaluation Objective.  # noqa: E501

        :param max_rating: The max_rating of this TpdmEvaluationObjective.  # noqa: E501
        :type: float
        """

        self._max_rating = max_rating

    @property
    def min_rating(self):
        """Gets the min_rating of this TpdmEvaluationObjective.  # noqa: E501

        The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.  # noqa: E501

        :return: The min_rating of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: float
        """
        return self._min_rating

    @min_rating.setter
    def min_rating(self, min_rating):
        """Sets the min_rating of this TpdmEvaluationObjective.

        The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.  # noqa: E501

        :param min_rating: The min_rating of this TpdmEvaluationObjective.  # noqa: E501
        :type: float
        """

        self._min_rating = min_rating

    @property
    def rating_levels(self):
        """Gets the rating_levels of this TpdmEvaluationObjective.  # noqa: E501

        An unordered collection of evaluationObjectiveRatingLevels. The descriptive level(s) of ratings (cut scores) for evaluation Objective.  # noqa: E501

        :return: The rating_levels of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: list[TpdmEvaluationObjectiveRatingLevel]
        """
        return self._rating_levels

    @rating_levels.setter
    def rating_levels(self, rating_levels):
        """Sets the rating_levels of this TpdmEvaluationObjective.

        An unordered collection of evaluationObjectiveRatingLevels. The descriptive level(s) of ratings (cut scores) for evaluation Objective.  # noqa: E501

        :param rating_levels: The rating_levels of this TpdmEvaluationObjective.  # noqa: E501
        :type: list[TpdmEvaluationObjectiveRatingLevel]
        """

        self._rating_levels = rating_levels

    @property
    def sort_order(self):
        """Gets the sort_order of this TpdmEvaluationObjective.  # noqa: E501

        The sort order of this Evaluation Objective.  # noqa: E501

        :return: The sort_order of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this TpdmEvaluationObjective.

        The sort order of this Evaluation Objective.  # noqa: E501

        :param sort_order: The sort_order of this TpdmEvaluationObjective.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def etag(self):
        """Gets the etag of this TpdmEvaluationObjective.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmEvaluationObjective.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmEvaluationObjective.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmEvaluationObjective.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmEvaluationObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmEvaluationObjective):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmEvaluationObjective):
            return True

        return self.to_dict() != other.to_dict()
