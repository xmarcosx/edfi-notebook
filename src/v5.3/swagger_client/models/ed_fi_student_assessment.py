# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentAssessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'student_assessment_identifier': 'str',
        'assessment_reference': 'EdFiAssessmentReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'student_reference': 'EdFiStudentReference',
        'accommodations': 'list[EdFiStudentAssessmentAccommodation]',
        'administration_date': 'datetime',
        'administration_end_date': 'datetime',
        'administration_environment_descriptor': 'str',
        'administration_language_descriptor': 'str',
        'event_circumstance_descriptor': 'str',
        'event_description': 'str',
        'items': 'list[EdFiStudentAssessmentItem]',
        'performance_levels': 'list[EdFiStudentAssessmentPerformanceLevel]',
        'platform_type_descriptor': 'str',
        'reason_not_tested_descriptor': 'str',
        'retest_indicator_descriptor': 'str',
        'score_results': 'list[EdFiStudentAssessmentScoreResult]',
        'serial_number': 'str',
        'student_objective_assessments': 'list[EdFiStudentAssessmentStudentObjectiveAssessment]',
        'when_assessed_grade_level_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'student_assessment_identifier': 'studentAssessmentIdentifier',
        'assessment_reference': 'assessmentReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'student_reference': 'studentReference',
        'accommodations': 'accommodations',
        'administration_date': 'administrationDate',
        'administration_end_date': 'administrationEndDate',
        'administration_environment_descriptor': 'administrationEnvironmentDescriptor',
        'administration_language_descriptor': 'administrationLanguageDescriptor',
        'event_circumstance_descriptor': 'eventCircumstanceDescriptor',
        'event_description': 'eventDescription',
        'items': 'items',
        'performance_levels': 'performanceLevels',
        'platform_type_descriptor': 'platformTypeDescriptor',
        'reason_not_tested_descriptor': 'reasonNotTestedDescriptor',
        'retest_indicator_descriptor': 'retestIndicatorDescriptor',
        'score_results': 'scoreResults',
        'serial_number': 'serialNumber',
        'student_objective_assessments': 'studentObjectiveAssessments',
        'when_assessed_grade_level_descriptor': 'whenAssessedGradeLevelDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, student_assessment_identifier=None, assessment_reference=None, school_year_type_reference=None, student_reference=None, accommodations=None, administration_date=None, administration_end_date=None, administration_environment_descriptor=None, administration_language_descriptor=None, event_circumstance_descriptor=None, event_description=None, items=None, performance_levels=None, platform_type_descriptor=None, reason_not_tested_descriptor=None, retest_indicator_descriptor=None, score_results=None, serial_number=None, student_objective_assessments=None, when_assessed_grade_level_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentAssessment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._student_assessment_identifier = None
        self._assessment_reference = None
        self._school_year_type_reference = None
        self._student_reference = None
        self._accommodations = None
        self._administration_date = None
        self._administration_end_date = None
        self._administration_environment_descriptor = None
        self._administration_language_descriptor = None
        self._event_circumstance_descriptor = None
        self._event_description = None
        self._items = None
        self._performance_levels = None
        self._platform_type_descriptor = None
        self._reason_not_tested_descriptor = None
        self._retest_indicator_descriptor = None
        self._score_results = None
        self._serial_number = None
        self._student_objective_assessments = None
        self._when_assessed_grade_level_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.student_assessment_identifier = student_assessment_identifier
        self.assessment_reference = assessment_reference
        if school_year_type_reference is not None:
            self.school_year_type_reference = school_year_type_reference
        self.student_reference = student_reference
        if accommodations is not None:
            self.accommodations = accommodations
        self.administration_date = administration_date
        if administration_end_date is not None:
            self.administration_end_date = administration_end_date
        if administration_environment_descriptor is not None:
            self.administration_environment_descriptor = administration_environment_descriptor
        if administration_language_descriptor is not None:
            self.administration_language_descriptor = administration_language_descriptor
        if event_circumstance_descriptor is not None:
            self.event_circumstance_descriptor = event_circumstance_descriptor
        if event_description is not None:
            self.event_description = event_description
        if items is not None:
            self.items = items
        if performance_levels is not None:
            self.performance_levels = performance_levels
        if platform_type_descriptor is not None:
            self.platform_type_descriptor = platform_type_descriptor
        if reason_not_tested_descriptor is not None:
            self.reason_not_tested_descriptor = reason_not_tested_descriptor
        if retest_indicator_descriptor is not None:
            self.retest_indicator_descriptor = retest_indicator_descriptor
        if score_results is not None:
            self.score_results = score_results
        if serial_number is not None:
            self.serial_number = serial_number
        if student_objective_assessments is not None:
            self.student_objective_assessments = student_objective_assessments
        if when_assessed_grade_level_descriptor is not None:
            self.when_assessed_grade_level_descriptor = when_assessed_grade_level_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentAssessment.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentAssessment.

          # noqa: E501

        :param id: The id of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def student_assessment_identifier(self):
        """Gets the student_assessment_identifier of this EdFiStudentAssessment.  # noqa: E501

        A unique number or alphanumeric code assigned to an assessment administered to a student.  # noqa: E501

        :return: The student_assessment_identifier of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._student_assessment_identifier

    @student_assessment_identifier.setter
    def student_assessment_identifier(self, student_assessment_identifier):
        """Sets the student_assessment_identifier of this EdFiStudentAssessment.

        A unique number or alphanumeric code assigned to an assessment administered to a student.  # noqa: E501

        :param student_assessment_identifier: The student_assessment_identifier of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and student_assessment_identifier is None:
            raise ValueError("Invalid value for `student_assessment_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                student_assessment_identifier is not None and len(student_assessment_identifier) > 60):
            raise ValueError("Invalid value for `student_assessment_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._student_assessment_identifier = student_assessment_identifier

    @property
    def assessment_reference(self):
        """Gets the assessment_reference of this EdFiStudentAssessment.  # noqa: E501


        :return: The assessment_reference of this EdFiStudentAssessment.  # noqa: E501
        :rtype: EdFiAssessmentReference
        """
        return self._assessment_reference

    @assessment_reference.setter
    def assessment_reference(self, assessment_reference):
        """Sets the assessment_reference of this EdFiStudentAssessment.


        :param assessment_reference: The assessment_reference of this EdFiStudentAssessment.  # noqa: E501
        :type: EdFiAssessmentReference
        """
        if self._configuration.client_side_validation and assessment_reference is None:
            raise ValueError("Invalid value for `assessment_reference`, must not be `None`")  # noqa: E501

        self._assessment_reference = assessment_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiStudentAssessment.  # noqa: E501


        :return: The school_year_type_reference of this EdFiStudentAssessment.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiStudentAssessment.


        :param school_year_type_reference: The school_year_type_reference of this EdFiStudentAssessment.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """

        self._school_year_type_reference = school_year_type_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentAssessment.  # noqa: E501


        :return: The student_reference of this EdFiStudentAssessment.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentAssessment.


        :param student_reference: The student_reference of this EdFiStudentAssessment.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def accommodations(self):
        """Gets the accommodations of this EdFiStudentAssessment.  # noqa: E501

        An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:        Braille        Enlarged monitor view        Extra time        Large Print        Setting        Oral Administration        ...  # noqa: E501

        :return: The accommodations of this EdFiStudentAssessment.  # noqa: E501
        :rtype: list[EdFiStudentAssessmentAccommodation]
        """
        return self._accommodations

    @accommodations.setter
    def accommodations(self, accommodations):
        """Sets the accommodations of this EdFiStudentAssessment.

        An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:        Braille        Enlarged monitor view        Extra time        Large Print        Setting        Oral Administration        ...  # noqa: E501

        :param accommodations: The accommodations of this EdFiStudentAssessment.  # noqa: E501
        :type: list[EdFiStudentAssessmentAccommodation]
        """

        self._accommodations = accommodations

    @property
    def administration_date(self):
        """Gets the administration_date of this EdFiStudentAssessment.  # noqa: E501

        The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.  # noqa: E501

        :return: The administration_date of this EdFiStudentAssessment.  # noqa: E501
        :rtype: datetime
        """
        return self._administration_date

    @administration_date.setter
    def administration_date(self, administration_date):
        """Sets the administration_date of this EdFiStudentAssessment.

        The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.  # noqa: E501

        :param administration_date: The administration_date of this EdFiStudentAssessment.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and administration_date is None:
            raise ValueError("Invalid value for `administration_date`, must not be `None`")  # noqa: E501

        self._administration_date = administration_date

    @property
    def administration_end_date(self):
        """Gets the administration_end_date of this EdFiStudentAssessment.  # noqa: E501

        The date and time an assessment administration ended.  # noqa: E501

        :return: The administration_end_date of this EdFiStudentAssessment.  # noqa: E501
        :rtype: datetime
        """
        return self._administration_end_date

    @administration_end_date.setter
    def administration_end_date(self, administration_end_date):
        """Sets the administration_end_date of this EdFiStudentAssessment.

        The date and time an assessment administration ended.  # noqa: E501

        :param administration_end_date: The administration_end_date of this EdFiStudentAssessment.  # noqa: E501
        :type: datetime
        """

        self._administration_end_date = administration_end_date

    @property
    def administration_environment_descriptor(self):
        """Gets the administration_environment_descriptor of this EdFiStudentAssessment.  # noqa: E501

        The environment in which the test was administered.  # noqa: E501

        :return: The administration_environment_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._administration_environment_descriptor

    @administration_environment_descriptor.setter
    def administration_environment_descriptor(self, administration_environment_descriptor):
        """Sets the administration_environment_descriptor of this EdFiStudentAssessment.

        The environment in which the test was administered.  # noqa: E501

        :param administration_environment_descriptor: The administration_environment_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                administration_environment_descriptor is not None and len(administration_environment_descriptor) > 306):
            raise ValueError("Invalid value for `administration_environment_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._administration_environment_descriptor = administration_environment_descriptor

    @property
    def administration_language_descriptor(self):
        """Gets the administration_language_descriptor of this EdFiStudentAssessment.  # noqa: E501

        The language in which an assessment is written and/or administered.  # noqa: E501

        :return: The administration_language_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._administration_language_descriptor

    @administration_language_descriptor.setter
    def administration_language_descriptor(self, administration_language_descriptor):
        """Sets the administration_language_descriptor of this EdFiStudentAssessment.

        The language in which an assessment is written and/or administered.  # noqa: E501

        :param administration_language_descriptor: The administration_language_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                administration_language_descriptor is not None and len(administration_language_descriptor) > 306):
            raise ValueError("Invalid value for `administration_language_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._administration_language_descriptor = administration_language_descriptor

    @property
    def event_circumstance_descriptor(self):
        """Gets the event_circumstance_descriptor of this EdFiStudentAssessment.  # noqa: E501

        An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.  # noqa: E501

        :return: The event_circumstance_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._event_circumstance_descriptor

    @event_circumstance_descriptor.setter
    def event_circumstance_descriptor(self, event_circumstance_descriptor):
        """Sets the event_circumstance_descriptor of this EdFiStudentAssessment.

        An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.  # noqa: E501

        :param event_circumstance_descriptor: The event_circumstance_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                event_circumstance_descriptor is not None and len(event_circumstance_descriptor) > 306):
            raise ValueError("Invalid value for `event_circumstance_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._event_circumstance_descriptor = event_circumstance_descriptor

    @property
    def event_description(self):
        """Gets the event_description of this EdFiStudentAssessment.  # noqa: E501

        Describes special events that occur before during or after the assessment session that may impact use of results.  # noqa: E501

        :return: The event_description of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this EdFiStudentAssessment.

        Describes special events that occur before during or after the assessment session that may impact use of results.  # noqa: E501

        :param event_description: The event_description of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                event_description is not None and len(event_description) > 1024):
            raise ValueError("Invalid value for `event_description`, length must be less than or equal to `1024`")  # noqa: E501

        self._event_description = event_description

    @property
    def items(self):
        """Gets the items of this EdFiStudentAssessment.  # noqa: E501

        An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.  # noqa: E501

        :return: The items of this EdFiStudentAssessment.  # noqa: E501
        :rtype: list[EdFiStudentAssessmentItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this EdFiStudentAssessment.

        An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.  # noqa: E501

        :param items: The items of this EdFiStudentAssessment.  # noqa: E501
        :type: list[EdFiStudentAssessmentItem]
        """

        self._items = items

    @property
    def performance_levels(self):
        """Gets the performance_levels of this EdFiStudentAssessment.  # noqa: E501

        An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.  # noqa: E501

        :return: The performance_levels of this EdFiStudentAssessment.  # noqa: E501
        :rtype: list[EdFiStudentAssessmentPerformanceLevel]
        """
        return self._performance_levels

    @performance_levels.setter
    def performance_levels(self, performance_levels):
        """Sets the performance_levels of this EdFiStudentAssessment.

        An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.  # noqa: E501

        :param performance_levels: The performance_levels of this EdFiStudentAssessment.  # noqa: E501
        :type: list[EdFiStudentAssessmentPerformanceLevel]
        """

        self._performance_levels = performance_levels

    @property
    def platform_type_descriptor(self):
        """Gets the platform_type_descriptor of this EdFiStudentAssessment.  # noqa: E501

        The platform with which the assessment was delivered to the student during the assessment session.  # noqa: E501

        :return: The platform_type_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._platform_type_descriptor

    @platform_type_descriptor.setter
    def platform_type_descriptor(self, platform_type_descriptor):
        """Sets the platform_type_descriptor of this EdFiStudentAssessment.

        The platform with which the assessment was delivered to the student during the assessment session.  # noqa: E501

        :param platform_type_descriptor: The platform_type_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                platform_type_descriptor is not None and len(platform_type_descriptor) > 306):
            raise ValueError("Invalid value for `platform_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._platform_type_descriptor = platform_type_descriptor

    @property
    def reason_not_tested_descriptor(self):
        """Gets the reason_not_tested_descriptor of this EdFiStudentAssessment.  # noqa: E501

        The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...  # noqa: E501

        :return: The reason_not_tested_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._reason_not_tested_descriptor

    @reason_not_tested_descriptor.setter
    def reason_not_tested_descriptor(self, reason_not_tested_descriptor):
        """Sets the reason_not_tested_descriptor of this EdFiStudentAssessment.

        The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...  # noqa: E501

        :param reason_not_tested_descriptor: The reason_not_tested_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reason_not_tested_descriptor is not None and len(reason_not_tested_descriptor) > 306):
            raise ValueError("Invalid value for `reason_not_tested_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._reason_not_tested_descriptor = reason_not_tested_descriptor

    @property
    def retest_indicator_descriptor(self):
        """Gets the retest_indicator_descriptor of this EdFiStudentAssessment.  # noqa: E501

        Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...  # noqa: E501

        :return: The retest_indicator_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._retest_indicator_descriptor

    @retest_indicator_descriptor.setter
    def retest_indicator_descriptor(self, retest_indicator_descriptor):
        """Sets the retest_indicator_descriptor of this EdFiStudentAssessment.

        Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...  # noqa: E501

        :param retest_indicator_descriptor: The retest_indicator_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                retest_indicator_descriptor is not None and len(retest_indicator_descriptor) > 306):
            raise ValueError("Invalid value for `retest_indicator_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._retest_indicator_descriptor = retest_indicator_descriptor

    @property
    def score_results(self):
        """Gets the score_results of this EdFiStudentAssessment.  # noqa: E501

        An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :return: The score_results of this EdFiStudentAssessment.  # noqa: E501
        :rtype: list[EdFiStudentAssessmentScoreResult]
        """
        return self._score_results

    @score_results.setter
    def score_results(self, score_results):
        """Sets the score_results of this EdFiStudentAssessment.

        An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.  # noqa: E501

        :param score_results: The score_results of this EdFiStudentAssessment.  # noqa: E501
        :type: list[EdFiStudentAssessmentScoreResult]
        """

        self._score_results = score_results

    @property
    def serial_number(self):
        """Gets the serial_number of this EdFiStudentAssessment.  # noqa: E501

        The unique number for the assessment form or answer document.  # noqa: E501

        :return: The serial_number of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EdFiStudentAssessment.

        The unique number for the assessment form or answer document.  # noqa: E501

        :param serial_number: The serial_number of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                serial_number is not None and len(serial_number) > 60):
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `60`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def student_objective_assessments(self):
        """Gets the student_objective_assessments of this EdFiStudentAssessment.  # noqa: E501

        An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an ObjectiveAssessment.  # noqa: E501

        :return: The student_objective_assessments of this EdFiStudentAssessment.  # noqa: E501
        :rtype: list[EdFiStudentAssessmentStudentObjectiveAssessment]
        """
        return self._student_objective_assessments

    @student_objective_assessments.setter
    def student_objective_assessments(self, student_objective_assessments):
        """Sets the student_objective_assessments of this EdFiStudentAssessment.

        An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an ObjectiveAssessment.  # noqa: E501

        :param student_objective_assessments: The student_objective_assessments of this EdFiStudentAssessment.  # noqa: E501
        :type: list[EdFiStudentAssessmentStudentObjectiveAssessment]
        """

        self._student_objective_assessments = student_objective_assessments

    @property
    def when_assessed_grade_level_descriptor(self):
        """Gets the when_assessed_grade_level_descriptor of this EdFiStudentAssessment.  # noqa: E501

        The grade level of a student when assessed.  # noqa: E501

        :return: The when_assessed_grade_level_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._when_assessed_grade_level_descriptor

    @when_assessed_grade_level_descriptor.setter
    def when_assessed_grade_level_descriptor(self, when_assessed_grade_level_descriptor):
        """Sets the when_assessed_grade_level_descriptor of this EdFiStudentAssessment.

        The grade level of a student when assessed.  # noqa: E501

        :param when_assessed_grade_level_descriptor: The when_assessed_grade_level_descriptor of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                when_assessed_grade_level_descriptor is not None and len(when_assessed_grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `when_assessed_grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._when_assessed_grade_level_descriptor = when_assessed_grade_level_descriptor

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentAssessment.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentAssessment.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentAssessment.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentAssessment.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentAssessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentAssessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentAssessment):
            return True

        return self.to_dict() != other.to_dict()
