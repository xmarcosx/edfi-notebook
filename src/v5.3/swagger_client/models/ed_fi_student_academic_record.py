# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentAcademicRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'term_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'student_reference': 'EdFiStudentReference',
        'academic_honors': 'list[EdFiStudentAcademicRecordAcademicHonor]',
        'class_ranking': 'EdFiStudentAcademicRecordClassRanking',
        'cumulative_attempted_credit_conversion': 'float',
        'cumulative_attempted_credits': 'float',
        'cumulative_attempted_credit_type_descriptor': 'str',
        'cumulative_earned_credit_conversion': 'float',
        'cumulative_earned_credits': 'float',
        'cumulative_earned_credit_type_descriptor': 'str',
        'cumulative_grade_point_average': 'float',
        'cumulative_grade_points_earned': 'float',
        'diplomas': 'list[EdFiStudentAcademicRecordDiploma]',
        'grade_point_averages': 'list[EdFiStudentAcademicRecordGradePointAverage]',
        'grade_value_qualifier': 'str',
        'projected_graduation_date': 'date',
        'recognitions': 'list[EdFiStudentAcademicRecordRecognition]',
        'report_cards': 'list[EdFiStudentAcademicRecordReportCard]',
        'session_attempted_credit_conversion': 'float',
        'session_attempted_credits': 'float',
        'session_attempted_credit_type_descriptor': 'str',
        'session_earned_credit_conversion': 'float',
        'session_earned_credits': 'float',
        'session_earned_credit_type_descriptor': 'str',
        'session_grade_point_average': 'float',
        'session_grade_points_earned': 'float',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'term_descriptor': 'termDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'student_reference': 'studentReference',
        'academic_honors': 'academicHonors',
        'class_ranking': 'classRanking',
        'cumulative_attempted_credit_conversion': 'cumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits': 'cumulativeAttemptedCredits',
        'cumulative_attempted_credit_type_descriptor': 'cumulativeAttemptedCreditTypeDescriptor',
        'cumulative_earned_credit_conversion': 'cumulativeEarnedCreditConversion',
        'cumulative_earned_credits': 'cumulativeEarnedCredits',
        'cumulative_earned_credit_type_descriptor': 'cumulativeEarnedCreditTypeDescriptor',
        'cumulative_grade_point_average': 'cumulativeGradePointAverage',
        'cumulative_grade_points_earned': 'cumulativeGradePointsEarned',
        'diplomas': 'diplomas',
        'grade_point_averages': 'gradePointAverages',
        'grade_value_qualifier': 'gradeValueQualifier',
        'projected_graduation_date': 'projectedGraduationDate',
        'recognitions': 'recognitions',
        'report_cards': 'reportCards',
        'session_attempted_credit_conversion': 'sessionAttemptedCreditConversion',
        'session_attempted_credits': 'sessionAttemptedCredits',
        'session_attempted_credit_type_descriptor': 'sessionAttemptedCreditTypeDescriptor',
        'session_earned_credit_conversion': 'sessionEarnedCreditConversion',
        'session_earned_credits': 'sessionEarnedCredits',
        'session_earned_credit_type_descriptor': 'sessionEarnedCreditTypeDescriptor',
        'session_grade_point_average': 'sessionGradePointAverage',
        'session_grade_points_earned': 'sessionGradePointsEarned',
        'etag': '_etag'
    }

    def __init__(self, id=None, term_descriptor=None, education_organization_reference=None, school_year_type_reference=None, student_reference=None, academic_honors=None, class_ranking=None, cumulative_attempted_credit_conversion=None, cumulative_attempted_credits=None, cumulative_attempted_credit_type_descriptor=None, cumulative_earned_credit_conversion=None, cumulative_earned_credits=None, cumulative_earned_credit_type_descriptor=None, cumulative_grade_point_average=None, cumulative_grade_points_earned=None, diplomas=None, grade_point_averages=None, grade_value_qualifier=None, projected_graduation_date=None, recognitions=None, report_cards=None, session_attempted_credit_conversion=None, session_attempted_credits=None, session_attempted_credit_type_descriptor=None, session_earned_credit_conversion=None, session_earned_credits=None, session_earned_credit_type_descriptor=None, session_grade_point_average=None, session_grade_points_earned=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentAcademicRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._term_descriptor = None
        self._education_organization_reference = None
        self._school_year_type_reference = None
        self._student_reference = None
        self._academic_honors = None
        self._class_ranking = None
        self._cumulative_attempted_credit_conversion = None
        self._cumulative_attempted_credits = None
        self._cumulative_attempted_credit_type_descriptor = None
        self._cumulative_earned_credit_conversion = None
        self._cumulative_earned_credits = None
        self._cumulative_earned_credit_type_descriptor = None
        self._cumulative_grade_point_average = None
        self._cumulative_grade_points_earned = None
        self._diplomas = None
        self._grade_point_averages = None
        self._grade_value_qualifier = None
        self._projected_graduation_date = None
        self._recognitions = None
        self._report_cards = None
        self._session_attempted_credit_conversion = None
        self._session_attempted_credits = None
        self._session_attempted_credit_type_descriptor = None
        self._session_earned_credit_conversion = None
        self._session_earned_credits = None
        self._session_earned_credit_type_descriptor = None
        self._session_grade_point_average = None
        self._session_grade_points_earned = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.term_descriptor = term_descriptor
        self.education_organization_reference = education_organization_reference
        self.school_year_type_reference = school_year_type_reference
        self.student_reference = student_reference
        if academic_honors is not None:
            self.academic_honors = academic_honors
        if class_ranking is not None:
            self.class_ranking = class_ranking
        if cumulative_attempted_credit_conversion is not None:
            self.cumulative_attempted_credit_conversion = cumulative_attempted_credit_conversion
        if cumulative_attempted_credits is not None:
            self.cumulative_attempted_credits = cumulative_attempted_credits
        if cumulative_attempted_credit_type_descriptor is not None:
            self.cumulative_attempted_credit_type_descriptor = cumulative_attempted_credit_type_descriptor
        if cumulative_earned_credit_conversion is not None:
            self.cumulative_earned_credit_conversion = cumulative_earned_credit_conversion
        if cumulative_earned_credits is not None:
            self.cumulative_earned_credits = cumulative_earned_credits
        if cumulative_earned_credit_type_descriptor is not None:
            self.cumulative_earned_credit_type_descriptor = cumulative_earned_credit_type_descriptor
        if cumulative_grade_point_average is not None:
            self.cumulative_grade_point_average = cumulative_grade_point_average
        if cumulative_grade_points_earned is not None:
            self.cumulative_grade_points_earned = cumulative_grade_points_earned
        if diplomas is not None:
            self.diplomas = diplomas
        if grade_point_averages is not None:
            self.grade_point_averages = grade_point_averages
        if grade_value_qualifier is not None:
            self.grade_value_qualifier = grade_value_qualifier
        if projected_graduation_date is not None:
            self.projected_graduation_date = projected_graduation_date
        if recognitions is not None:
            self.recognitions = recognitions
        if report_cards is not None:
            self.report_cards = report_cards
        if session_attempted_credit_conversion is not None:
            self.session_attempted_credit_conversion = session_attempted_credit_conversion
        if session_attempted_credits is not None:
            self.session_attempted_credits = session_attempted_credits
        if session_attempted_credit_type_descriptor is not None:
            self.session_attempted_credit_type_descriptor = session_attempted_credit_type_descriptor
        if session_earned_credit_conversion is not None:
            self.session_earned_credit_conversion = session_earned_credit_conversion
        if session_earned_credits is not None:
            self.session_earned_credits = session_earned_credits
        if session_earned_credit_type_descriptor is not None:
            self.session_earned_credit_type_descriptor = session_earned_credit_type_descriptor
        if session_grade_point_average is not None:
            self.session_grade_point_average = session_grade_point_average
        if session_grade_points_earned is not None:
            self.session_grade_points_earned = session_grade_points_earned
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentAcademicRecord.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentAcademicRecord.

          # noqa: E501

        :param id: The id of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def term_descriptor(self):
        """Gets the term_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501

        The term for the session during the school year.  # noqa: E501

        :return: The term_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._term_descriptor

    @term_descriptor.setter
    def term_descriptor(self, term_descriptor):
        """Sets the term_descriptor of this EdFiStudentAcademicRecord.

        The term for the session during the school year.  # noqa: E501

        :param term_descriptor: The term_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and term_descriptor is None:
            raise ValueError("Invalid value for `term_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                term_descriptor is not None and len(term_descriptor) > 306):
            raise ValueError("Invalid value for `term_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._term_descriptor = term_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiStudentAcademicRecord.  # noqa: E501


        :return: The education_organization_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiStudentAcademicRecord.


        :param education_organization_reference: The education_organization_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiStudentAcademicRecord.  # noqa: E501


        :return: The school_year_type_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiStudentAcademicRecord.


        :param school_year_type_reference: The school_year_type_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentAcademicRecord.  # noqa: E501


        :return: The student_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentAcademicRecord.


        :param student_reference: The student_reference of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def academic_honors(self):
        """Gets the academic_honors of this EdFiStudentAcademicRecord.  # noqa: E501

        An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.  # noqa: E501

        :return: The academic_honors of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: list[EdFiStudentAcademicRecordAcademicHonor]
        """
        return self._academic_honors

    @academic_honors.setter
    def academic_honors(self, academic_honors):
        """Sets the academic_honors of this EdFiStudentAcademicRecord.

        An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.  # noqa: E501

        :param academic_honors: The academic_honors of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: list[EdFiStudentAcademicRecordAcademicHonor]
        """

        self._academic_honors = academic_honors

    @property
    def class_ranking(self):
        """Gets the class_ranking of this EdFiStudentAcademicRecord.  # noqa: E501


        :return: The class_ranking of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: EdFiStudentAcademicRecordClassRanking
        """
        return self._class_ranking

    @class_ranking.setter
    def class_ranking(self, class_ranking):
        """Sets the class_ranking of this EdFiStudentAcademicRecord.


        :param class_ranking: The class_ranking of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: EdFiStudentAcademicRecordClassRanking
        """

        self._class_ranking = class_ranking

    @property
    def cumulative_attempted_credit_conversion(self):
        """Gets the cumulative_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The cumulative_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_attempted_credit_conversion

    @cumulative_attempted_credit_conversion.setter
    def cumulative_attempted_credit_conversion(self, cumulative_attempted_credit_conversion):
        """Sets the cumulative_attempted_credit_conversion of this EdFiStudentAcademicRecord.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param cumulative_attempted_credit_conversion: The cumulative_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_attempted_credit_conversion = cumulative_attempted_credit_conversion

    @property
    def cumulative_attempted_credits(self):
        """Gets the cumulative_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The cumulative_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_attempted_credits

    @cumulative_attempted_credits.setter
    def cumulative_attempted_credits(self, cumulative_attempted_credits):
        """Sets the cumulative_attempted_credits of this EdFiStudentAcademicRecord.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param cumulative_attempted_credits: The cumulative_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_attempted_credits = cumulative_attempted_credits

    @property
    def cumulative_attempted_credit_type_descriptor(self):
        """Gets the cumulative_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The cumulative_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_attempted_credit_type_descriptor

    @cumulative_attempted_credit_type_descriptor.setter
    def cumulative_attempted_credit_type_descriptor(self, cumulative_attempted_credit_type_descriptor):
        """Sets the cumulative_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param cumulative_attempted_credit_type_descriptor: The cumulative_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cumulative_attempted_credit_type_descriptor is not None and len(cumulative_attempted_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `cumulative_attempted_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._cumulative_attempted_credit_type_descriptor = cumulative_attempted_credit_type_descriptor

    @property
    def cumulative_earned_credit_conversion(self):
        """Gets the cumulative_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The cumulative_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_earned_credit_conversion

    @cumulative_earned_credit_conversion.setter
    def cumulative_earned_credit_conversion(self, cumulative_earned_credit_conversion):
        """Sets the cumulative_earned_credit_conversion of this EdFiStudentAcademicRecord.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param cumulative_earned_credit_conversion: The cumulative_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_earned_credit_conversion = cumulative_earned_credit_conversion

    @property
    def cumulative_earned_credits(self):
        """Gets the cumulative_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The cumulative_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_earned_credits

    @cumulative_earned_credits.setter
    def cumulative_earned_credits(self, cumulative_earned_credits):
        """Sets the cumulative_earned_credits of this EdFiStudentAcademicRecord.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param cumulative_earned_credits: The cumulative_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_earned_credits = cumulative_earned_credits

    @property
    def cumulative_earned_credit_type_descriptor(self):
        """Gets the cumulative_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The cumulative_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_earned_credit_type_descriptor

    @cumulative_earned_credit_type_descriptor.setter
    def cumulative_earned_credit_type_descriptor(self, cumulative_earned_credit_type_descriptor):
        """Sets the cumulative_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param cumulative_earned_credit_type_descriptor: The cumulative_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cumulative_earned_credit_type_descriptor is not None and len(cumulative_earned_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `cumulative_earned_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._cumulative_earned_credit_type_descriptor = cumulative_earned_credit_type_descriptor

    @property
    def cumulative_grade_point_average(self):
        """Gets the cumulative_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501

        A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.  # noqa: E501

        :return: The cumulative_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_grade_point_average

    @cumulative_grade_point_average.setter
    def cumulative_grade_point_average(self, cumulative_grade_point_average):
        """Sets the cumulative_grade_point_average of this EdFiStudentAcademicRecord.

        A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.  # noqa: E501

        :param cumulative_grade_point_average: The cumulative_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_grade_point_average = cumulative_grade_point_average

    @property
    def cumulative_grade_points_earned(self):
        """Gets the cumulative_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501

        The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.  # noqa: E501

        :return: The cumulative_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_grade_points_earned

    @cumulative_grade_points_earned.setter
    def cumulative_grade_points_earned(self, cumulative_grade_points_earned):
        """Sets the cumulative_grade_points_earned of this EdFiStudentAcademicRecord.

        The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.  # noqa: E501

        :param cumulative_grade_points_earned: The cumulative_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._cumulative_grade_points_earned = cumulative_grade_points_earned

    @property
    def diplomas(self):
        """Gets the diplomas of this EdFiStudentAcademicRecord.  # noqa: E501

        An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.  # noqa: E501

        :return: The diplomas of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: list[EdFiStudentAcademicRecordDiploma]
        """
        return self._diplomas

    @diplomas.setter
    def diplomas(self, diplomas):
        """Sets the diplomas of this EdFiStudentAcademicRecord.

        An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.  # noqa: E501

        :param diplomas: The diplomas of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: list[EdFiStudentAcademicRecordDiploma]
        """

        self._diplomas = diplomas

    @property
    def grade_point_averages(self):
        """Gets the grade_point_averages of this EdFiStudentAcademicRecord.  # noqa: E501

        An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.  # noqa: E501

        :return: The grade_point_averages of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: list[EdFiStudentAcademicRecordGradePointAverage]
        """
        return self._grade_point_averages

    @grade_point_averages.setter
    def grade_point_averages(self, grade_point_averages):
        """Sets the grade_point_averages of this EdFiStudentAcademicRecord.

        An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.  # noqa: E501

        :param grade_point_averages: The grade_point_averages of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: list[EdFiStudentAcademicRecordGradePointAverage]
        """

        self._grade_point_averages = grade_point_averages

    @property
    def grade_value_qualifier(self):
        """Gets the grade_value_qualifier of this EdFiStudentAcademicRecord.  # noqa: E501

        The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)  # noqa: E501

        :return: The grade_value_qualifier of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._grade_value_qualifier

    @grade_value_qualifier.setter
    def grade_value_qualifier(self, grade_value_qualifier):
        """Sets the grade_value_qualifier of this EdFiStudentAcademicRecord.

        The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)  # noqa: E501

        :param grade_value_qualifier: The grade_value_qualifier of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                grade_value_qualifier is not None and len(grade_value_qualifier) > 80):
            raise ValueError("Invalid value for `grade_value_qualifier`, length must be less than or equal to `80`")  # noqa: E501

        self._grade_value_qualifier = grade_value_qualifier

    @property
    def projected_graduation_date(self):
        """Gets the projected_graduation_date of this EdFiStudentAcademicRecord.  # noqa: E501

        The month and year the student is projected to graduate.  # noqa: E501

        :return: The projected_graduation_date of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: date
        """
        return self._projected_graduation_date

    @projected_graduation_date.setter
    def projected_graduation_date(self, projected_graduation_date):
        """Sets the projected_graduation_date of this EdFiStudentAcademicRecord.

        The month and year the student is projected to graduate.  # noqa: E501

        :param projected_graduation_date: The projected_graduation_date of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: date
        """

        self._projected_graduation_date = projected_graduation_date

    @property
    def recognitions(self):
        """Gets the recognitions of this EdFiStudentAcademicRecord.  # noqa: E501

        An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.  # noqa: E501

        :return: The recognitions of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: list[EdFiStudentAcademicRecordRecognition]
        """
        return self._recognitions

    @recognitions.setter
    def recognitions(self, recognitions):
        """Sets the recognitions of this EdFiStudentAcademicRecord.

        An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.  # noqa: E501

        :param recognitions: The recognitions of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: list[EdFiStudentAcademicRecordRecognition]
        """

        self._recognitions = recognitions

    @property
    def report_cards(self):
        """Gets the report_cards of this EdFiStudentAcademicRecord.  # noqa: E501

        An unordered collection of studentAcademicRecordReportCards. Report cards for the student.  # noqa: E501

        :return: The report_cards of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: list[EdFiStudentAcademicRecordReportCard]
        """
        return self._report_cards

    @report_cards.setter
    def report_cards(self, report_cards):
        """Sets the report_cards of this EdFiStudentAcademicRecord.

        An unordered collection of studentAcademicRecordReportCards. Report cards for the student.  # noqa: E501

        :param report_cards: The report_cards of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: list[EdFiStudentAcademicRecordReportCard]
        """

        self._report_cards = report_cards

    @property
    def session_attempted_credit_conversion(self):
        """Gets the session_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The session_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_attempted_credit_conversion

    @session_attempted_credit_conversion.setter
    def session_attempted_credit_conversion(self, session_attempted_credit_conversion):
        """Sets the session_attempted_credit_conversion of this EdFiStudentAcademicRecord.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param session_attempted_credit_conversion: The session_attempted_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_attempted_credit_conversion = session_attempted_credit_conversion

    @property
    def session_attempted_credits(self):
        """Gets the session_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The session_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_attempted_credits

    @session_attempted_credits.setter
    def session_attempted_credits(self, session_attempted_credits):
        """Sets the session_attempted_credits of this EdFiStudentAcademicRecord.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param session_attempted_credits: The session_attempted_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_attempted_credits = session_attempted_credits

    @property
    def session_attempted_credit_type_descriptor(self):
        """Gets the session_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The session_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._session_attempted_credit_type_descriptor

    @session_attempted_credit_type_descriptor.setter
    def session_attempted_credit_type_descriptor(self, session_attempted_credit_type_descriptor):
        """Sets the session_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param session_attempted_credit_type_descriptor: The session_attempted_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                session_attempted_credit_type_descriptor is not None and len(session_attempted_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `session_attempted_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._session_attempted_credit_type_descriptor = session_attempted_credit_type_descriptor

    @property
    def session_earned_credit_conversion(self):
        """Gets the session_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The session_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_earned_credit_conversion

    @session_earned_credit_conversion.setter
    def session_earned_credit_conversion(self, session_earned_credit_conversion):
        """Sets the session_earned_credit_conversion of this EdFiStudentAcademicRecord.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param session_earned_credit_conversion: The session_earned_credit_conversion of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_earned_credit_conversion = session_earned_credit_conversion

    @property
    def session_earned_credits(self):
        """Gets the session_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The session_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_earned_credits

    @session_earned_credits.setter
    def session_earned_credits(self, session_earned_credits):
        """Sets the session_earned_credits of this EdFiStudentAcademicRecord.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param session_earned_credits: The session_earned_credits of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_earned_credits = session_earned_credits

    @property
    def session_earned_credit_type_descriptor(self):
        """Gets the session_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The session_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._session_earned_credit_type_descriptor

    @session_earned_credit_type_descriptor.setter
    def session_earned_credit_type_descriptor(self, session_earned_credit_type_descriptor):
        """Sets the session_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param session_earned_credit_type_descriptor: The session_earned_credit_type_descriptor of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                session_earned_credit_type_descriptor is not None and len(session_earned_credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `session_earned_credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._session_earned_credit_type_descriptor = session_earned_credit_type_descriptor

    @property
    def session_grade_point_average(self):
        """Gets the session_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501

        The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.  # noqa: E501

        :return: The session_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_grade_point_average

    @session_grade_point_average.setter
    def session_grade_point_average(self, session_grade_point_average):
        """Sets the session_grade_point_average of this EdFiStudentAcademicRecord.

        The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.  # noqa: E501

        :param session_grade_point_average: The session_grade_point_average of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_grade_point_average = session_grade_point_average

    @property
    def session_grade_points_earned(self):
        """Gets the session_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501

        The number of grade points an individual earned for this session.  # noqa: E501

        :return: The session_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: float
        """
        return self._session_grade_points_earned

    @session_grade_points_earned.setter
    def session_grade_points_earned(self, session_grade_points_earned):
        """Sets the session_grade_points_earned of this EdFiStudentAcademicRecord.

        The number of grade points an individual earned for this session.  # noqa: E501

        :param session_grade_points_earned: The session_grade_points_earned of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: float
        """

        self._session_grade_points_earned = session_grade_points_earned

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentAcademicRecord.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentAcademicRecord.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentAcademicRecord.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentAcademicRecord.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentAcademicRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentAcademicRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentAcademicRecord):
            return True

        return self.to_dict() != other.to_dict()
