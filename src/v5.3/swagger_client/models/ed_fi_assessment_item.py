# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiAssessmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'identification_code': 'str',
        'assessment_reference': 'EdFiAssessmentReference',
        'assessment_item_category_descriptor': 'str',
        'assessment_item_uri': 'str',
        'correct_response': 'str',
        'expected_time_assessed': 'str',
        'item_text': 'str',
        'learning_standards': 'list[EdFiAssessmentItemLearningStandard]',
        'max_raw_score': 'float',
        'nomenclature': 'str',
        'possible_responses': 'list[EdFiAssessmentItemPossibleResponse]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identification_code': 'identificationCode',
        'assessment_reference': 'assessmentReference',
        'assessment_item_category_descriptor': 'assessmentItemCategoryDescriptor',
        'assessment_item_uri': 'assessmentItemURI',
        'correct_response': 'correctResponse',
        'expected_time_assessed': 'expectedTimeAssessed',
        'item_text': 'itemText',
        'learning_standards': 'learningStandards',
        'max_raw_score': 'maxRawScore',
        'nomenclature': 'nomenclature',
        'possible_responses': 'possibleResponses',
        'etag': '_etag'
    }

    def __init__(self, id=None, identification_code=None, assessment_reference=None, assessment_item_category_descriptor=None, assessment_item_uri=None, correct_response=None, expected_time_assessed=None, item_text=None, learning_standards=None, max_raw_score=None, nomenclature=None, possible_responses=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiAssessmentItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._identification_code = None
        self._assessment_reference = None
        self._assessment_item_category_descriptor = None
        self._assessment_item_uri = None
        self._correct_response = None
        self._expected_time_assessed = None
        self._item_text = None
        self._learning_standards = None
        self._max_raw_score = None
        self._nomenclature = None
        self._possible_responses = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.identification_code = identification_code
        self.assessment_reference = assessment_reference
        if assessment_item_category_descriptor is not None:
            self.assessment_item_category_descriptor = assessment_item_category_descriptor
        if assessment_item_uri is not None:
            self.assessment_item_uri = assessment_item_uri
        if correct_response is not None:
            self.correct_response = correct_response
        if expected_time_assessed is not None:
            self.expected_time_assessed = expected_time_assessed
        if item_text is not None:
            self.item_text = item_text
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if max_raw_score is not None:
            self.max_raw_score = max_raw_score
        if nomenclature is not None:
            self.nomenclature = nomenclature
        if possible_responses is not None:
            self.possible_responses = possible_responses
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiAssessmentItem.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiAssessmentItem.

          # noqa: E501

        :param id: The id of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def identification_code(self):
        """Gets the identification_code of this EdFiAssessmentItem.  # noqa: E501

        A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.  # noqa: E501

        :return: The identification_code of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._identification_code

    @identification_code.setter
    def identification_code(self, identification_code):
        """Sets the identification_code of this EdFiAssessmentItem.

        A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.  # noqa: E501

        :param identification_code: The identification_code of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identification_code is None:
            raise ValueError("Invalid value for `identification_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identification_code is not None and len(identification_code) > 60):
            raise ValueError("Invalid value for `identification_code`, length must be less than or equal to `60`")  # noqa: E501

        self._identification_code = identification_code

    @property
    def assessment_reference(self):
        """Gets the assessment_reference of this EdFiAssessmentItem.  # noqa: E501


        :return: The assessment_reference of this EdFiAssessmentItem.  # noqa: E501
        :rtype: EdFiAssessmentReference
        """
        return self._assessment_reference

    @assessment_reference.setter
    def assessment_reference(self, assessment_reference):
        """Sets the assessment_reference of this EdFiAssessmentItem.


        :param assessment_reference: The assessment_reference of this EdFiAssessmentItem.  # noqa: E501
        :type: EdFiAssessmentReference
        """
        if self._configuration.client_side_validation and assessment_reference is None:
            raise ValueError("Invalid value for `assessment_reference`, must not be `None`")  # noqa: E501

        self._assessment_reference = assessment_reference

    @property
    def assessment_item_category_descriptor(self):
        """Gets the assessment_item_category_descriptor of this EdFiAssessmentItem.  # noqa: E501

        Category or type of the AssessmentItem. For example:        Multiple choice        Analytic        Prose        ...  # noqa: E501

        :return: The assessment_item_category_descriptor of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._assessment_item_category_descriptor

    @assessment_item_category_descriptor.setter
    def assessment_item_category_descriptor(self, assessment_item_category_descriptor):
        """Sets the assessment_item_category_descriptor of this EdFiAssessmentItem.

        Category or type of the AssessmentItem. For example:        Multiple choice        Analytic        Prose        ...  # noqa: E501

        :param assessment_item_category_descriptor: The assessment_item_category_descriptor of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assessment_item_category_descriptor is not None and len(assessment_item_category_descriptor) > 306):
            raise ValueError("Invalid value for `assessment_item_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._assessment_item_category_descriptor = assessment_item_category_descriptor

    @property
    def assessment_item_uri(self):
        """Gets the assessment_item_uri of this EdFiAssessmentItem.  # noqa: E501

        The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.  # noqa: E501

        :return: The assessment_item_uri of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._assessment_item_uri

    @assessment_item_uri.setter
    def assessment_item_uri(self, assessment_item_uri):
        """Sets the assessment_item_uri of this EdFiAssessmentItem.

        The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.  # noqa: E501

        :param assessment_item_uri: The assessment_item_uri of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assessment_item_uri is not None and len(assessment_item_uri) > 255):
            raise ValueError("Invalid value for `assessment_item_uri`, length must be less than or equal to `255`")  # noqa: E501

        self._assessment_item_uri = assessment_item_uri

    @property
    def correct_response(self):
        """Gets the correct_response of this EdFiAssessmentItem.  # noqa: E501

        The correct response for the AssessmentItem.  # noqa: E501

        :return: The correct_response of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._correct_response

    @correct_response.setter
    def correct_response(self, correct_response):
        """Sets the correct_response of this EdFiAssessmentItem.

        The correct response for the AssessmentItem.  # noqa: E501

        :param correct_response: The correct_response of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                correct_response is not None and len(correct_response) > 20):
            raise ValueError("Invalid value for `correct_response`, length must be less than or equal to `20`")  # noqa: E501

        self._correct_response = correct_response

    @property
    def expected_time_assessed(self):
        """Gets the expected_time_assessed of this EdFiAssessmentItem.  # noqa: E501

        The duration of time allotted for the AssessmentItem.  # noqa: E501

        :return: The expected_time_assessed of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._expected_time_assessed

    @expected_time_assessed.setter
    def expected_time_assessed(self, expected_time_assessed):
        """Sets the expected_time_assessed of this EdFiAssessmentItem.

        The duration of time allotted for the AssessmentItem.  # noqa: E501

        :param expected_time_assessed: The expected_time_assessed of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                expected_time_assessed is not None and len(expected_time_assessed) > 30):
            raise ValueError("Invalid value for `expected_time_assessed`, length must be less than or equal to `30`")  # noqa: E501

        self._expected_time_assessed = expected_time_assessed

    @property
    def item_text(self):
        """Gets the item_text of this EdFiAssessmentItem.  # noqa: E501

        The text of the item.  # noqa: E501

        :return: The item_text of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._item_text

    @item_text.setter
    def item_text(self, item_text):
        """Sets the item_text of this EdFiAssessmentItem.

        The text of the item.  # noqa: E501

        :param item_text: The item_text of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                item_text is not None and len(item_text) > 1024):
            raise ValueError("Invalid value for `item_text`, length must be less than or equal to `1024`")  # noqa: E501

        self._item_text = item_text

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiAssessmentItem.  # noqa: E501

        An unordered collection of assessmentItemLearningStandards. LearningStandard tested by this item.  # noqa: E501

        :return: The learning_standards of this EdFiAssessmentItem.  # noqa: E501
        :rtype: list[EdFiAssessmentItemLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiAssessmentItem.

        An unordered collection of assessmentItemLearningStandards. LearningStandard tested by this item.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiAssessmentItem.  # noqa: E501
        :type: list[EdFiAssessmentItemLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def max_raw_score(self):
        """Gets the max_raw_score of this EdFiAssessmentItem.  # noqa: E501

        The maximum raw score achievable across all assessment items that are correct and scored at the maximum.  # noqa: E501

        :return: The max_raw_score of this EdFiAssessmentItem.  # noqa: E501
        :rtype: float
        """
        return self._max_raw_score

    @max_raw_score.setter
    def max_raw_score(self, max_raw_score):
        """Sets the max_raw_score of this EdFiAssessmentItem.

        The maximum raw score achievable across all assessment items that are correct and scored at the maximum.  # noqa: E501

        :param max_raw_score: The max_raw_score of this EdFiAssessmentItem.  # noqa: E501
        :type: float
        """

        self._max_raw_score = max_raw_score

    @property
    def nomenclature(self):
        """Gets the nomenclature of this EdFiAssessmentItem.  # noqa: E501

        Reflects the specific nomenclature used for AssessmentItem.  # noqa: E501

        :return: The nomenclature of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._nomenclature

    @nomenclature.setter
    def nomenclature(self, nomenclature):
        """Sets the nomenclature of this EdFiAssessmentItem.

        Reflects the specific nomenclature used for AssessmentItem.  # noqa: E501

        :param nomenclature: The nomenclature of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nomenclature is not None and len(nomenclature) > 35):
            raise ValueError("Invalid value for `nomenclature`, length must be less than or equal to `35`")  # noqa: E501

        self._nomenclature = nomenclature

    @property
    def possible_responses(self):
        """Gets the possible_responses of this EdFiAssessmentItem.  # noqa: E501

        An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.  # noqa: E501

        :return: The possible_responses of this EdFiAssessmentItem.  # noqa: E501
        :rtype: list[EdFiAssessmentItemPossibleResponse]
        """
        return self._possible_responses

    @possible_responses.setter
    def possible_responses(self, possible_responses):
        """Sets the possible_responses of this EdFiAssessmentItem.

        An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.  # noqa: E501

        :param possible_responses: The possible_responses of this EdFiAssessmentItem.  # noqa: E501
        :type: list[EdFiAssessmentItemPossibleResponse]
        """

        self._possible_responses = possible_responses

    @property
    def etag(self):
        """Gets the etag of this EdFiAssessmentItem.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiAssessmentItem.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiAssessmentItem.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiAssessmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiAssessmentItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiAssessmentItem):
            return True

        return self.to_dict() != other.to_dict()
