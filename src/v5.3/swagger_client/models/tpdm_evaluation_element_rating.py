# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TpdmEvaluationElementRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'evaluation_element_reference': 'TpdmEvaluationElementReference',
        'evaluation_objective_rating_reference': 'TpdmEvaluationObjectiveRatingReference',
        'area_of_refinement': 'str',
        'area_of_reinforcement': 'str',
        'comments': 'str',
        'evaluation_element_rating_level_descriptor': 'str',
        'feedback': 'str',
        'results': 'list[TpdmEvaluationElementRatingResult]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'evaluation_element_reference': 'evaluationElementReference',
        'evaluation_objective_rating_reference': 'evaluationObjectiveRatingReference',
        'area_of_refinement': 'areaOfRefinement',
        'area_of_reinforcement': 'areaOfReinforcement',
        'comments': 'comments',
        'evaluation_element_rating_level_descriptor': 'evaluationElementRatingLevelDescriptor',
        'feedback': 'feedback',
        'results': 'results',
        'etag': '_etag'
    }

    def __init__(self, id=None, evaluation_element_reference=None, evaluation_objective_rating_reference=None, area_of_refinement=None, area_of_reinforcement=None, comments=None, evaluation_element_rating_level_descriptor=None, feedback=None, results=None, etag=None, _configuration=None):  # noqa: E501
        """TpdmEvaluationElementRating - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._evaluation_element_reference = None
        self._evaluation_objective_rating_reference = None
        self._area_of_refinement = None
        self._area_of_reinforcement = None
        self._comments = None
        self._evaluation_element_rating_level_descriptor = None
        self._feedback = None
        self._results = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.evaluation_element_reference = evaluation_element_reference
        self.evaluation_objective_rating_reference = evaluation_objective_rating_reference
        if area_of_refinement is not None:
            self.area_of_refinement = area_of_refinement
        if area_of_reinforcement is not None:
            self.area_of_reinforcement = area_of_reinforcement
        if comments is not None:
            self.comments = comments
        if evaluation_element_rating_level_descriptor is not None:
            self.evaluation_element_rating_level_descriptor = evaluation_element_rating_level_descriptor
        if feedback is not None:
            self.feedback = feedback
        if results is not None:
            self.results = results
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this TpdmEvaluationElementRating.  # noqa: E501

          # noqa: E501

        :return: The id of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpdmEvaluationElementRating.

          # noqa: E501

        :param id: The id of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def evaluation_element_reference(self):
        """Gets the evaluation_element_reference of this TpdmEvaluationElementRating.  # noqa: E501


        :return: The evaluation_element_reference of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: TpdmEvaluationElementReference
        """
        return self._evaluation_element_reference

    @evaluation_element_reference.setter
    def evaluation_element_reference(self, evaluation_element_reference):
        """Sets the evaluation_element_reference of this TpdmEvaluationElementRating.


        :param evaluation_element_reference: The evaluation_element_reference of this TpdmEvaluationElementRating.  # noqa: E501
        :type: TpdmEvaluationElementReference
        """
        if self._configuration.client_side_validation and evaluation_element_reference is None:
            raise ValueError("Invalid value for `evaluation_element_reference`, must not be `None`")  # noqa: E501

        self._evaluation_element_reference = evaluation_element_reference

    @property
    def evaluation_objective_rating_reference(self):
        """Gets the evaluation_objective_rating_reference of this TpdmEvaluationElementRating.  # noqa: E501


        :return: The evaluation_objective_rating_reference of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: TpdmEvaluationObjectiveRatingReference
        """
        return self._evaluation_objective_rating_reference

    @evaluation_objective_rating_reference.setter
    def evaluation_objective_rating_reference(self, evaluation_objective_rating_reference):
        """Sets the evaluation_objective_rating_reference of this TpdmEvaluationElementRating.


        :param evaluation_objective_rating_reference: The evaluation_objective_rating_reference of this TpdmEvaluationElementRating.  # noqa: E501
        :type: TpdmEvaluationObjectiveRatingReference
        """
        if self._configuration.client_side_validation and evaluation_objective_rating_reference is None:
            raise ValueError("Invalid value for `evaluation_objective_rating_reference`, must not be `None`")  # noqa: E501

        self._evaluation_objective_rating_reference = evaluation_objective_rating_reference

    @property
    def area_of_refinement(self):
        """Gets the area_of_refinement of this TpdmEvaluationElementRating.  # noqa: E501

        Area identified for person to refine or improve as part of the evaluation.  # noqa: E501

        :return: The area_of_refinement of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._area_of_refinement

    @area_of_refinement.setter
    def area_of_refinement(self, area_of_refinement):
        """Sets the area_of_refinement of this TpdmEvaluationElementRating.

        Area identified for person to refine or improve as part of the evaluation.  # noqa: E501

        :param area_of_refinement: The area_of_refinement of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                area_of_refinement is not None and len(area_of_refinement) > 1024):
            raise ValueError("Invalid value for `area_of_refinement`, length must be less than or equal to `1024`")  # noqa: E501

        self._area_of_refinement = area_of_refinement

    @property
    def area_of_reinforcement(self):
        """Gets the area_of_reinforcement of this TpdmEvaluationElementRating.  # noqa: E501

        Area identified for reinforcement or positive feedback as part of the evaluation.  # noqa: E501

        :return: The area_of_reinforcement of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._area_of_reinforcement

    @area_of_reinforcement.setter
    def area_of_reinforcement(self, area_of_reinforcement):
        """Sets the area_of_reinforcement of this TpdmEvaluationElementRating.

        Area identified for reinforcement or positive feedback as part of the evaluation.  # noqa: E501

        :param area_of_reinforcement: The area_of_reinforcement of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                area_of_reinforcement is not None and len(area_of_reinforcement) > 1024):
            raise ValueError("Invalid value for `area_of_reinforcement`, length must be less than or equal to `1024`")  # noqa: E501

        self._area_of_reinforcement = area_of_reinforcement

    @property
    def comments(self):
        """Gets the comments of this TpdmEvaluationElementRating.  # noqa: E501

        Any comments about the performance evaluation to be captured.  # noqa: E501

        :return: The comments of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TpdmEvaluationElementRating.

        Any comments about the performance evaluation to be captured.  # noqa: E501

        :param comments: The comments of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                comments is not None and len(comments) > 1024):
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `1024`")  # noqa: E501

        self._comments = comments

    @property
    def evaluation_element_rating_level_descriptor(self):
        """Gets the evaluation_element_rating_level_descriptor of this TpdmEvaluationElementRating.  # noqa: E501

        The rating level achieved based upon the rating or score.  # noqa: E501

        :return: The evaluation_element_rating_level_descriptor of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_element_rating_level_descriptor

    @evaluation_element_rating_level_descriptor.setter
    def evaluation_element_rating_level_descriptor(self, evaluation_element_rating_level_descriptor):
        """Sets the evaluation_element_rating_level_descriptor of this TpdmEvaluationElementRating.

        The rating level achieved based upon the rating or score.  # noqa: E501

        :param evaluation_element_rating_level_descriptor: The evaluation_element_rating_level_descriptor of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                evaluation_element_rating_level_descriptor is not None and len(evaluation_element_rating_level_descriptor) > 306):
            raise ValueError("Invalid value for `evaluation_element_rating_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._evaluation_element_rating_level_descriptor = evaluation_element_rating_level_descriptor

    @property
    def feedback(self):
        """Gets the feedback of this TpdmEvaluationElementRating.  # noqa: E501

        Feedback provided to the evaluated person.  # noqa: E501

        :return: The feedback of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this TpdmEvaluationElementRating.

        Feedback provided to the evaluated person.  # noqa: E501

        :param feedback: The feedback of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                feedback is not None and len(feedback) > 2048):
            raise ValueError("Invalid value for `feedback`, length must be less than or equal to `2048`")  # noqa: E501

        self._feedback = feedback

    @property
    def results(self):
        """Gets the results of this TpdmEvaluationElementRating.  # noqa: E501

        An unordered collection of evaluationElementRatingResults. The numerical summary rating or score for the evaluation element.  # noqa: E501

        :return: The results of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: list[TpdmEvaluationElementRatingResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this TpdmEvaluationElementRating.

        An unordered collection of evaluationElementRatingResults. The numerical summary rating or score for the evaluation element.  # noqa: E501

        :param results: The results of this TpdmEvaluationElementRating.  # noqa: E501
        :type: list[TpdmEvaluationElementRatingResult]
        """

        self._results = results

    @property
    def etag(self):
        """Gets the etag of this TpdmEvaluationElementRating.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this TpdmEvaluationElementRating.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TpdmEvaluationElementRating.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this TpdmEvaluationElementRating.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpdmEvaluationElementRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpdmEvaluationElementRating):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TpdmEvaluationElementRating):
            return True

        return self.to_dict() != other.to_dict()
