# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentSchoolAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'entry_date': 'date',
        'calendar_reference': 'EdFiCalendarReference',
        'class_of_school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'graduation_plan_reference': 'EdFiGraduationPlanReference',
        'school_reference': 'EdFiSchoolReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'student_reference': 'EdFiStudentReference',
        'alternative_graduation_plans': 'list[EdFiStudentSchoolAssociationAlternativeGraduationPlan]',
        'education_plans': 'list[EdFiStudentSchoolAssociationEducationPlan]',
        'employed_while_enrolled': 'bool',
        'entry_grade_level_descriptor': 'str',
        'entry_grade_level_reason_descriptor': 'str',
        'entry_type_descriptor': 'str',
        'exit_withdraw_date': 'date',
        'exit_withdraw_type_descriptor': 'str',
        'full_time_equivalency': 'float',
        'primary_school': 'bool',
        'repeat_grade_indicator': 'bool',
        'residency_status_descriptor': 'str',
        'school_choice_transfer': 'bool',
        'term_completion_indicator': 'bool',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'entry_date': 'entryDate',
        'calendar_reference': 'calendarReference',
        'class_of_school_year_type_reference': 'classOfSchoolYearTypeReference',
        'graduation_plan_reference': 'graduationPlanReference',
        'school_reference': 'schoolReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'student_reference': 'studentReference',
        'alternative_graduation_plans': 'alternativeGraduationPlans',
        'education_plans': 'educationPlans',
        'employed_while_enrolled': 'employedWhileEnrolled',
        'entry_grade_level_descriptor': 'entryGradeLevelDescriptor',
        'entry_grade_level_reason_descriptor': 'entryGradeLevelReasonDescriptor',
        'entry_type_descriptor': 'entryTypeDescriptor',
        'exit_withdraw_date': 'exitWithdrawDate',
        'exit_withdraw_type_descriptor': 'exitWithdrawTypeDescriptor',
        'full_time_equivalency': 'fullTimeEquivalency',
        'primary_school': 'primarySchool',
        'repeat_grade_indicator': 'repeatGradeIndicator',
        'residency_status_descriptor': 'residencyStatusDescriptor',
        'school_choice_transfer': 'schoolChoiceTransfer',
        'term_completion_indicator': 'termCompletionIndicator',
        'etag': '_etag'
    }

    def __init__(self, id=None, entry_date=None, calendar_reference=None, class_of_school_year_type_reference=None, graduation_plan_reference=None, school_reference=None, school_year_type_reference=None, student_reference=None, alternative_graduation_plans=None, education_plans=None, employed_while_enrolled=None, entry_grade_level_descriptor=None, entry_grade_level_reason_descriptor=None, entry_type_descriptor=None, exit_withdraw_date=None, exit_withdraw_type_descriptor=None, full_time_equivalency=None, primary_school=None, repeat_grade_indicator=None, residency_status_descriptor=None, school_choice_transfer=None, term_completion_indicator=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentSchoolAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._entry_date = None
        self._calendar_reference = None
        self._class_of_school_year_type_reference = None
        self._graduation_plan_reference = None
        self._school_reference = None
        self._school_year_type_reference = None
        self._student_reference = None
        self._alternative_graduation_plans = None
        self._education_plans = None
        self._employed_while_enrolled = None
        self._entry_grade_level_descriptor = None
        self._entry_grade_level_reason_descriptor = None
        self._entry_type_descriptor = None
        self._exit_withdraw_date = None
        self._exit_withdraw_type_descriptor = None
        self._full_time_equivalency = None
        self._primary_school = None
        self._repeat_grade_indicator = None
        self._residency_status_descriptor = None
        self._school_choice_transfer = None
        self._term_completion_indicator = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.entry_date = entry_date
        if calendar_reference is not None:
            self.calendar_reference = calendar_reference
        if class_of_school_year_type_reference is not None:
            self.class_of_school_year_type_reference = class_of_school_year_type_reference
        if graduation_plan_reference is not None:
            self.graduation_plan_reference = graduation_plan_reference
        self.school_reference = school_reference
        if school_year_type_reference is not None:
            self.school_year_type_reference = school_year_type_reference
        self.student_reference = student_reference
        if alternative_graduation_plans is not None:
            self.alternative_graduation_plans = alternative_graduation_plans
        if education_plans is not None:
            self.education_plans = education_plans
        if employed_while_enrolled is not None:
            self.employed_while_enrolled = employed_while_enrolled
        self.entry_grade_level_descriptor = entry_grade_level_descriptor
        if entry_grade_level_reason_descriptor is not None:
            self.entry_grade_level_reason_descriptor = entry_grade_level_reason_descriptor
        if entry_type_descriptor is not None:
            self.entry_type_descriptor = entry_type_descriptor
        if exit_withdraw_date is not None:
            self.exit_withdraw_date = exit_withdraw_date
        if exit_withdraw_type_descriptor is not None:
            self.exit_withdraw_type_descriptor = exit_withdraw_type_descriptor
        if full_time_equivalency is not None:
            self.full_time_equivalency = full_time_equivalency
        if primary_school is not None:
            self.primary_school = primary_school
        if repeat_grade_indicator is not None:
            self.repeat_grade_indicator = repeat_grade_indicator
        if residency_status_descriptor is not None:
            self.residency_status_descriptor = residency_status_descriptor
        if school_choice_transfer is not None:
            self.school_choice_transfer = school_choice_transfer
        if term_completion_indicator is not None:
            self.term_completion_indicator = term_completion_indicator
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentSchoolAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentSchoolAssociation.

          # noqa: E501

        :param id: The id of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def entry_date(self):
        """Gets the entry_date of this EdFiStudentSchoolAssociation.  # noqa: E501

        The month, day, and year on which an individual enters and begins to receive instructional services in a school.  # noqa: E501

        :return: The entry_date of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: date
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this EdFiStudentSchoolAssociation.

        The month, day, and year on which an individual enters and begins to receive instructional services in a school.  # noqa: E501

        :param entry_date: The entry_date of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and entry_date is None:
            raise ValueError("Invalid value for `entry_date`, must not be `None`")  # noqa: E501

        self._entry_date = entry_date

    @property
    def calendar_reference(self):
        """Gets the calendar_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The calendar_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiCalendarReference
        """
        return self._calendar_reference

    @calendar_reference.setter
    def calendar_reference(self, calendar_reference):
        """Sets the calendar_reference of this EdFiStudentSchoolAssociation.


        :param calendar_reference: The calendar_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiCalendarReference
        """

        self._calendar_reference = calendar_reference

    @property
    def class_of_school_year_type_reference(self):
        """Gets the class_of_school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The class_of_school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._class_of_school_year_type_reference

    @class_of_school_year_type_reference.setter
    def class_of_school_year_type_reference(self, class_of_school_year_type_reference):
        """Sets the class_of_school_year_type_reference of this EdFiStudentSchoolAssociation.


        :param class_of_school_year_type_reference: The class_of_school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """

        self._class_of_school_year_type_reference = class_of_school_year_type_reference

    @property
    def graduation_plan_reference(self):
        """Gets the graduation_plan_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The graduation_plan_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiGraduationPlanReference
        """
        return self._graduation_plan_reference

    @graduation_plan_reference.setter
    def graduation_plan_reference(self, graduation_plan_reference):
        """Sets the graduation_plan_reference of this EdFiStudentSchoolAssociation.


        :param graduation_plan_reference: The graduation_plan_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiGraduationPlanReference
        """

        self._graduation_plan_reference = graduation_plan_reference

    @property
    def school_reference(self):
        """Gets the school_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The school_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this EdFiStudentSchoolAssociation.


        :param school_reference: The school_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and school_reference is None:
            raise ValueError("Invalid value for `school_reference`, must not be `None`")  # noqa: E501

        self._school_reference = school_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiStudentSchoolAssociation.


        :param school_year_type_reference: The school_year_type_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """

        self._school_year_type_reference = school_year_type_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentSchoolAssociation.  # noqa: E501


        :return: The student_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentSchoolAssociation.


        :param student_reference: The student_reference of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def alternative_graduation_plans(self):
        """Gets the alternative_graduation_plans of this EdFiStudentSchoolAssociation.  # noqa: E501

        An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.  # noqa: E501

        :return: The alternative_graduation_plans of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: list[EdFiStudentSchoolAssociationAlternativeGraduationPlan]
        """
        return self._alternative_graduation_plans

    @alternative_graduation_plans.setter
    def alternative_graduation_plans(self, alternative_graduation_plans):
        """Sets the alternative_graduation_plans of this EdFiStudentSchoolAssociation.

        An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.  # noqa: E501

        :param alternative_graduation_plans: The alternative_graduation_plans of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: list[EdFiStudentSchoolAssociationAlternativeGraduationPlan]
        """

        self._alternative_graduation_plans = alternative_graduation_plans

    @property
    def education_plans(self):
        """Gets the education_plans of this EdFiStudentSchoolAssociation.  # noqa: E501

        An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.  # noqa: E501

        :return: The education_plans of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: list[EdFiStudentSchoolAssociationEducationPlan]
        """
        return self._education_plans

    @education_plans.setter
    def education_plans(self, education_plans):
        """Sets the education_plans of this EdFiStudentSchoolAssociation.

        An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.  # noqa: E501

        :param education_plans: The education_plans of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: list[EdFiStudentSchoolAssociationEducationPlan]
        """

        self._education_plans = education_plans

    @property
    def employed_while_enrolled(self):
        """Gets the employed_while_enrolled of this EdFiStudentSchoolAssociation.  # noqa: E501

        An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.  # noqa: E501

        :return: The employed_while_enrolled of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._employed_while_enrolled

    @employed_while_enrolled.setter
    def employed_while_enrolled(self, employed_while_enrolled):
        """Sets the employed_while_enrolled of this EdFiStudentSchoolAssociation.

        An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.  # noqa: E501

        :param employed_while_enrolled: The employed_while_enrolled of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: bool
        """

        self._employed_while_enrolled = employed_while_enrolled

    @property
    def entry_grade_level_descriptor(self):
        """Gets the entry_grade_level_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501

        The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.  # noqa: E501

        :return: The entry_grade_level_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._entry_grade_level_descriptor

    @entry_grade_level_descriptor.setter
    def entry_grade_level_descriptor(self, entry_grade_level_descriptor):
        """Sets the entry_grade_level_descriptor of this EdFiStudentSchoolAssociation.

        The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.  # noqa: E501

        :param entry_grade_level_descriptor: The entry_grade_level_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and entry_grade_level_descriptor is None:
            raise ValueError("Invalid value for `entry_grade_level_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                entry_grade_level_descriptor is not None and len(entry_grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `entry_grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._entry_grade_level_descriptor = entry_grade_level_descriptor

    @property
    def entry_grade_level_reason_descriptor(self):
        """Gets the entry_grade_level_reason_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501

        The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.  # noqa: E501

        :return: The entry_grade_level_reason_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._entry_grade_level_reason_descriptor

    @entry_grade_level_reason_descriptor.setter
    def entry_grade_level_reason_descriptor(self, entry_grade_level_reason_descriptor):
        """Sets the entry_grade_level_reason_descriptor of this EdFiStudentSchoolAssociation.

        The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.  # noqa: E501

        :param entry_grade_level_reason_descriptor: The entry_grade_level_reason_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                entry_grade_level_reason_descriptor is not None and len(entry_grade_level_reason_descriptor) > 306):
            raise ValueError("Invalid value for `entry_grade_level_reason_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._entry_grade_level_reason_descriptor = entry_grade_level_reason_descriptor

    @property
    def entry_type_descriptor(self):
        """Gets the entry_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501

        The process by which a student enters a school during a given academic session.  # noqa: E501

        :return: The entry_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._entry_type_descriptor

    @entry_type_descriptor.setter
    def entry_type_descriptor(self, entry_type_descriptor):
        """Sets the entry_type_descriptor of this EdFiStudentSchoolAssociation.

        The process by which a student enters a school during a given academic session.  # noqa: E501

        :param entry_type_descriptor: The entry_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                entry_type_descriptor is not None and len(entry_type_descriptor) > 306):
            raise ValueError("Invalid value for `entry_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._entry_type_descriptor = entry_type_descriptor

    @property
    def exit_withdraw_date(self):
        """Gets the exit_withdraw_date of this EdFiStudentSchoolAssociation.  # noqa: E501

        The recorded exit or withdraw date for the student.  # noqa: E501

        :return: The exit_withdraw_date of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: date
        """
        return self._exit_withdraw_date

    @exit_withdraw_date.setter
    def exit_withdraw_date(self, exit_withdraw_date):
        """Sets the exit_withdraw_date of this EdFiStudentSchoolAssociation.

        The recorded exit or withdraw date for the student.  # noqa: E501

        :param exit_withdraw_date: The exit_withdraw_date of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: date
        """

        self._exit_withdraw_date = exit_withdraw_date

    @property
    def exit_withdraw_type_descriptor(self):
        """Gets the exit_withdraw_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501

        The circumstances under which the student exited from membership in an educational institution.  # noqa: E501

        :return: The exit_withdraw_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._exit_withdraw_type_descriptor

    @exit_withdraw_type_descriptor.setter
    def exit_withdraw_type_descriptor(self, exit_withdraw_type_descriptor):
        """Sets the exit_withdraw_type_descriptor of this EdFiStudentSchoolAssociation.

        The circumstances under which the student exited from membership in an educational institution.  # noqa: E501

        :param exit_withdraw_type_descriptor: The exit_withdraw_type_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                exit_withdraw_type_descriptor is not None and len(exit_withdraw_type_descriptor) > 306):
            raise ValueError("Invalid value for `exit_withdraw_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._exit_withdraw_type_descriptor = exit_withdraw_type_descriptor

    @property
    def full_time_equivalency(self):
        """Gets the full_time_equivalency of this EdFiStudentSchoolAssociation.  # noqa: E501

        The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.  # noqa: E501

        :return: The full_time_equivalency of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: float
        """
        return self._full_time_equivalency

    @full_time_equivalency.setter
    def full_time_equivalency(self, full_time_equivalency):
        """Sets the full_time_equivalency of this EdFiStudentSchoolAssociation.

        The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.  # noqa: E501

        :param full_time_equivalency: The full_time_equivalency of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: float
        """

        self._full_time_equivalency = full_time_equivalency

    @property
    def primary_school(self):
        """Gets the primary_school of this EdFiStudentSchoolAssociation.  # noqa: E501

        Indicates if a given enrollment record should be considered the primary record for a student.  # noqa: E501

        :return: The primary_school of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._primary_school

    @primary_school.setter
    def primary_school(self, primary_school):
        """Sets the primary_school of this EdFiStudentSchoolAssociation.

        Indicates if a given enrollment record should be considered the primary record for a student.  # noqa: E501

        :param primary_school: The primary_school of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: bool
        """

        self._primary_school = primary_school

    @property
    def repeat_grade_indicator(self):
        """Gets the repeat_grade_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501

        An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.  # noqa: E501

        :return: The repeat_grade_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._repeat_grade_indicator

    @repeat_grade_indicator.setter
    def repeat_grade_indicator(self, repeat_grade_indicator):
        """Sets the repeat_grade_indicator of this EdFiStudentSchoolAssociation.

        An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.  # noqa: E501

        :param repeat_grade_indicator: The repeat_grade_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: bool
        """

        self._repeat_grade_indicator = repeat_grade_indicator

    @property
    def residency_status_descriptor(self):
        """Gets the residency_status_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501

        An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.  # noqa: E501

        :return: The residency_status_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._residency_status_descriptor

    @residency_status_descriptor.setter
    def residency_status_descriptor(self, residency_status_descriptor):
        """Sets the residency_status_descriptor of this EdFiStudentSchoolAssociation.

        An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.  # noqa: E501

        :param residency_status_descriptor: The residency_status_descriptor of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                residency_status_descriptor is not None and len(residency_status_descriptor) > 306):
            raise ValueError("Invalid value for `residency_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._residency_status_descriptor = residency_status_descriptor

    @property
    def school_choice_transfer(self):
        """Gets the school_choice_transfer of this EdFiStudentSchoolAssociation.  # noqa: E501

        An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.  # noqa: E501

        :return: The school_choice_transfer of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._school_choice_transfer

    @school_choice_transfer.setter
    def school_choice_transfer(self, school_choice_transfer):
        """Sets the school_choice_transfer of this EdFiStudentSchoolAssociation.

        An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.  # noqa: E501

        :param school_choice_transfer: The school_choice_transfer of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: bool
        """

        self._school_choice_transfer = school_choice_transfer

    @property
    def term_completion_indicator(self):
        """Gets the term_completion_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501

        Idicates whether or not a student completed the most recent school term.  # noqa: E501

        :return: The term_completion_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._term_completion_indicator

    @term_completion_indicator.setter
    def term_completion_indicator(self, term_completion_indicator):
        """Sets the term_completion_indicator of this EdFiStudentSchoolAssociation.

        Idicates whether or not a student completed the most recent school term.  # noqa: E501

        :param term_completion_indicator: The term_completion_indicator of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: bool
        """

        self._term_completion_indicator = term_completion_indicator

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentSchoolAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentSchoolAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentSchoolAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentSchoolAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentSchoolAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentSchoolAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentSchoolAssociation):
            return True

        return self.to_dict() != other.to_dict()
