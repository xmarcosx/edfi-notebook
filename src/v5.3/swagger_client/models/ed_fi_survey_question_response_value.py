# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiSurveyQuestionResponseValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'survey_question_response_value_identifier': 'int',
        'numeric_response': 'int',
        'text_response': 'str'
    }

    attribute_map = {
        'survey_question_response_value_identifier': 'surveyQuestionResponseValueIdentifier',
        'numeric_response': 'numericResponse',
        'text_response': 'textResponse'
    }

    def __init__(self, survey_question_response_value_identifier=None, numeric_response=None, text_response=None, _configuration=None):  # noqa: E501
        """EdFiSurveyQuestionResponseValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._survey_question_response_value_identifier = None
        self._numeric_response = None
        self._text_response = None
        self.discriminator = None

        self.survey_question_response_value_identifier = survey_question_response_value_identifier
        if numeric_response is not None:
            self.numeric_response = numeric_response
        if text_response is not None:
            self.text_response = text_response

    @property
    def survey_question_response_value_identifier(self):
        """Gets the survey_question_response_value_identifier of this EdFiSurveyQuestionResponseValue.  # noqa: E501

        Primary key for the response value; a unique, usually sequential numeric value for a collection of responses, or potentially the value of NumericResponse for a single response.  # noqa: E501

        :return: The survey_question_response_value_identifier of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :rtype: int
        """
        return self._survey_question_response_value_identifier

    @survey_question_response_value_identifier.setter
    def survey_question_response_value_identifier(self, survey_question_response_value_identifier):
        """Sets the survey_question_response_value_identifier of this EdFiSurveyQuestionResponseValue.

        Primary key for the response value; a unique, usually sequential numeric value for a collection of responses, or potentially the value of NumericResponse for a single response.  # noqa: E501

        :param survey_question_response_value_identifier: The survey_question_response_value_identifier of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and survey_question_response_value_identifier is None:
            raise ValueError("Invalid value for `survey_question_response_value_identifier`, must not be `None`")  # noqa: E501

        self._survey_question_response_value_identifier = survey_question_response_value_identifier

    @property
    def numeric_response(self):
        """Gets the numeric_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501

        A numeric response to the question.  # noqa: E501

        :return: The numeric_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :rtype: int
        """
        return self._numeric_response

    @numeric_response.setter
    def numeric_response(self, numeric_response):
        """Sets the numeric_response of this EdFiSurveyQuestionResponseValue.

        A numeric response to the question.  # noqa: E501

        :param numeric_response: The numeric_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :type: int
        """

        self._numeric_response = numeric_response

    @property
    def text_response(self):
        """Gets the text_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501

        A text response to the question.  # noqa: E501

        :return: The text_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :rtype: str
        """
        return self._text_response

    @text_response.setter
    def text_response(self, text_response):
        """Sets the text_response of this EdFiSurveyQuestionResponseValue.

        A text response to the question.  # noqa: E501

        :param text_response: The text_response of this EdFiSurveyQuestionResponseValue.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                text_response is not None and len(text_response) > 2048):
            raise ValueError("Invalid value for `text_response`, length must be less than or equal to `2048`")  # noqa: E501

        self._text_response = text_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiSurveyQuestionResponseValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiSurveyQuestionResponseValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiSurveyQuestionResponseValue):
            return True

        return self.to_dict() != other.to_dict()
