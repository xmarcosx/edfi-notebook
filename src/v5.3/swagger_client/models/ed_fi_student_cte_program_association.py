# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentCTEProgramAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'begin_date': 'date',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'program_reference': 'EdFiProgramReference',
        'student_reference': 'EdFiStudentReference',
        'cte_programs': 'list[EdFiStudentCTEProgramAssociationCTEProgram]',
        'cte_program_services': 'list[EdFiStudentCTEProgramAssociationCTEProgramService]',
        'end_date': 'date',
        'non_traditional_gender_status': 'bool',
        'participation_status': 'EdFiGeneralStudentProgramAssociationParticipationStatus',
        'private_cte_program': 'bool',
        'program_participation_statuses': 'list[EdFiGeneralStudentProgramAssociationProgramParticipationStatus]',
        'reason_exited_descriptor': 'str',
        'served_outside_of_regular_session': 'bool',
        'services': 'list[EdFiStudentCTEProgramAssociationService]',
        'technical_skills_assessment_descriptor': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'begin_date': 'beginDate',
        'education_organization_reference': 'educationOrganizationReference',
        'program_reference': 'programReference',
        'student_reference': 'studentReference',
        'cte_programs': 'ctePrograms',
        'cte_program_services': 'cteProgramServices',
        'end_date': 'endDate',
        'non_traditional_gender_status': 'nonTraditionalGenderStatus',
        'participation_status': 'participationStatus',
        'private_cte_program': 'privateCTEProgram',
        'program_participation_statuses': 'programParticipationStatuses',
        'reason_exited_descriptor': 'reasonExitedDescriptor',
        'served_outside_of_regular_session': 'servedOutsideOfRegularSession',
        'services': 'services',
        'technical_skills_assessment_descriptor': 'technicalSkillsAssessmentDescriptor',
        'etag': '_etag'
    }

    def __init__(self, id=None, begin_date=None, education_organization_reference=None, program_reference=None, student_reference=None, cte_programs=None, cte_program_services=None, end_date=None, non_traditional_gender_status=None, participation_status=None, private_cte_program=None, program_participation_statuses=None, reason_exited_descriptor=None, served_outside_of_regular_session=None, services=None, technical_skills_assessment_descriptor=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiStudentCTEProgramAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._begin_date = None
        self._education_organization_reference = None
        self._program_reference = None
        self._student_reference = None
        self._cte_programs = None
        self._cte_program_services = None
        self._end_date = None
        self._non_traditional_gender_status = None
        self._participation_status = None
        self._private_cte_program = None
        self._program_participation_statuses = None
        self._reason_exited_descriptor = None
        self._served_outside_of_regular_session = None
        self._services = None
        self._technical_skills_assessment_descriptor = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.begin_date = begin_date
        self.education_organization_reference = education_organization_reference
        self.program_reference = program_reference
        self.student_reference = student_reference
        if cte_programs is not None:
            self.cte_programs = cte_programs
        if cte_program_services is not None:
            self.cte_program_services = cte_program_services
        if end_date is not None:
            self.end_date = end_date
        if non_traditional_gender_status is not None:
            self.non_traditional_gender_status = non_traditional_gender_status
        if participation_status is not None:
            self.participation_status = participation_status
        if private_cte_program is not None:
            self.private_cte_program = private_cte_program
        if program_participation_statuses is not None:
            self.program_participation_statuses = program_participation_statuses
        if reason_exited_descriptor is not None:
            self.reason_exited_descriptor = reason_exited_descriptor
        if served_outside_of_regular_session is not None:
            self.served_outside_of_regular_session = served_outside_of_regular_session
        if services is not None:
            self.services = services
        if technical_skills_assessment_descriptor is not None:
            self.technical_skills_assessment_descriptor = technical_skills_assessment_descriptor
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiStudentCTEProgramAssociation.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiStudentCTEProgramAssociation.

          # noqa: E501

        :param id: The id of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def begin_date(self):
        """Gets the begin_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  # noqa: E501

        :return: The begin_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EdFiStudentCTEProgramAssociation.

        The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  # noqa: E501

        :param begin_date: The begin_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501


        :return: The education_organization_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiStudentCTEProgramAssociation.


        :param education_organization_reference: The education_organization_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def program_reference(self):
        """Gets the program_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501


        :return: The program_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: EdFiProgramReference
        """
        return self._program_reference

    @program_reference.setter
    def program_reference(self, program_reference):
        """Sets the program_reference of this EdFiStudentCTEProgramAssociation.


        :param program_reference: The program_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: EdFiProgramReference
        """
        if self._configuration.client_side_validation and program_reference is None:
            raise ValueError("Invalid value for `program_reference`, must not be `None`")  # noqa: E501

        self._program_reference = program_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501


        :return: The student_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiStudentCTEProgramAssociation.


        :param student_reference: The student_reference of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def cte_programs(self):
        """Gets the cte_programs of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        An unordered collection of studentCTEProgramAssociationCTEPrograms. The career cluster representing the career path of the Vocational/Career Tech concentrator.  # noqa: E501

        :return: The cte_programs of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: list[EdFiStudentCTEProgramAssociationCTEProgram]
        """
        return self._cte_programs

    @cte_programs.setter
    def cte_programs(self, cte_programs):
        """Sets the cte_programs of this EdFiStudentCTEProgramAssociation.

        An unordered collection of studentCTEProgramAssociationCTEPrograms. The career cluster representing the career path of the Vocational/Career Tech concentrator.  # noqa: E501

        :param cte_programs: The cte_programs of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: list[EdFiStudentCTEProgramAssociationCTEProgram]
        """

        self._cte_programs = cte_programs

    @property
    def cte_program_services(self):
        """Gets the cte_program_services of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        An unordered collection of studentCTEProgramAssociationCTEProgramServices. Indicates the Service(s) being provided to the Student by the CTE Program.  # noqa: E501

        :return: The cte_program_services of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: list[EdFiStudentCTEProgramAssociationCTEProgramService]
        """
        return self._cte_program_services

    @cte_program_services.setter
    def cte_program_services(self, cte_program_services):
        """Sets the cte_program_services of this EdFiStudentCTEProgramAssociation.

        An unordered collection of studentCTEProgramAssociationCTEProgramServices. Indicates the Service(s) being provided to the Student by the CTE Program.  # noqa: E501

        :param cte_program_services: The cte_program_services of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: list[EdFiStudentCTEProgramAssociationCTEProgramService]
        """

        self._cte_program_services = cte_program_services

    @property
    def end_date(self):
        """Gets the end_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        The month, day, and year on which the Student exited the Program or stopped receiving services.  # noqa: E501

        :return: The end_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EdFiStudentCTEProgramAssociation.

        The month, day, and year on which the Student exited the Program or stopped receiving services.  # noqa: E501

        :param end_date: The end_date of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def non_traditional_gender_status(self):
        """Gets the non_traditional_gender_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.  # noqa: E501

        :return: The non_traditional_gender_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._non_traditional_gender_status

    @non_traditional_gender_status.setter
    def non_traditional_gender_status(self, non_traditional_gender_status):
        """Sets the non_traditional_gender_status of this EdFiStudentCTEProgramAssociation.

        Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.  # noqa: E501

        :param non_traditional_gender_status: The non_traditional_gender_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: bool
        """

        self._non_traditional_gender_status = non_traditional_gender_status

    @property
    def participation_status(self):
        """Gets the participation_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501


        :return: The participation_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: EdFiGeneralStudentProgramAssociationParticipationStatus
        """
        return self._participation_status

    @participation_status.setter
    def participation_status(self, participation_status):
        """Sets the participation_status of this EdFiStudentCTEProgramAssociation.


        :param participation_status: The participation_status of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: EdFiGeneralStudentProgramAssociationParticipationStatus
        """

        self._participation_status = participation_status

    @property
    def private_cte_program(self):
        """Gets the private_cte_program of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA).Students in private institutions which do not receive Perkins funding are reported only in the state file.  # noqa: E501

        :return: The private_cte_program of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._private_cte_program

    @private_cte_program.setter
    def private_cte_program(self, private_cte_program):
        """Sets the private_cte_program of this EdFiStudentCTEProgramAssociation.

        Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA).Students in private institutions which do not receive Perkins funding are reported only in the state file.  # noqa: E501

        :param private_cte_program: The private_cte_program of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: bool
        """

        self._private_cte_program = private_cte_program

    @property
    def program_participation_statuses(self):
        """Gets the program_participation_statuses of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student's program participation.  # noqa: E501

        :return: The program_participation_statuses of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: list[EdFiGeneralStudentProgramAssociationProgramParticipationStatus]
        """
        return self._program_participation_statuses

    @program_participation_statuses.setter
    def program_participation_statuses(self, program_participation_statuses):
        """Sets the program_participation_statuses of this EdFiStudentCTEProgramAssociation.

        An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student's program participation.  # noqa: E501

        :param program_participation_statuses: The program_participation_statuses of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: list[EdFiGeneralStudentProgramAssociationProgramParticipationStatus]
        """

        self._program_participation_statuses = program_participation_statuses

    @property
    def reason_exited_descriptor(self):
        """Gets the reason_exited_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        The reason the child left the Program within a school or district.  # noqa: E501

        :return: The reason_exited_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: str
        """
        return self._reason_exited_descriptor

    @reason_exited_descriptor.setter
    def reason_exited_descriptor(self, reason_exited_descriptor):
        """Sets the reason_exited_descriptor of this EdFiStudentCTEProgramAssociation.

        The reason the child left the Program within a school or district.  # noqa: E501

        :param reason_exited_descriptor: The reason_exited_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reason_exited_descriptor is not None and len(reason_exited_descriptor) > 306):
            raise ValueError("Invalid value for `reason_exited_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._reason_exited_descriptor = reason_exited_descriptor

    @property
    def served_outside_of_regular_session(self):
        """Gets the served_outside_of_regular_session of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        Indicates whether the Student received services during the summer session or between sessions.  # noqa: E501

        :return: The served_outside_of_regular_session of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._served_outside_of_regular_session

    @served_outside_of_regular_session.setter
    def served_outside_of_regular_session(self, served_outside_of_regular_session):
        """Sets the served_outside_of_regular_session of this EdFiStudentCTEProgramAssociation.

        Indicates whether the Student received services during the summer session or between sessions.  # noqa: E501

        :param served_outside_of_regular_session: The served_outside_of_regular_session of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: bool
        """

        self._served_outside_of_regular_session = served_outside_of_regular_session

    @property
    def services(self):
        """Gets the services of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        An unordered collection of studentCTEProgramAssociationServices. Indicates the Service(s) being provided to the Student by the Program.  # noqa: E501

        :return: The services of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: list[EdFiStudentCTEProgramAssociationService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this EdFiStudentCTEProgramAssociation.

        An unordered collection of studentCTEProgramAssociationServices. Indicates the Service(s) being provided to the Student by the Program.  # noqa: E501

        :param services: The services of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: list[EdFiStudentCTEProgramAssociationService]
        """

        self._services = services

    @property
    def technical_skills_assessment_descriptor(self):
        """Gets the technical_skills_assessment_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        Results of technical skills assessment aligned with industry recognized standards.  # noqa: E501

        :return: The technical_skills_assessment_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: str
        """
        return self._technical_skills_assessment_descriptor

    @technical_skills_assessment_descriptor.setter
    def technical_skills_assessment_descriptor(self, technical_skills_assessment_descriptor):
        """Sets the technical_skills_assessment_descriptor of this EdFiStudentCTEProgramAssociation.

        Results of technical skills assessment aligned with industry recognized standards.  # noqa: E501

        :param technical_skills_assessment_descriptor: The technical_skills_assessment_descriptor of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                technical_skills_assessment_descriptor is not None and len(technical_skills_assessment_descriptor) > 306):
            raise ValueError("Invalid value for `technical_skills_assessment_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._technical_skills_assessment_descriptor = technical_skills_assessment_descriptor

    @property
    def etag(self):
        """Gets the etag of this EdFiStudentCTEProgramAssociation.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiStudentCTEProgramAssociation.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiStudentCTEProgramAssociation.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentCTEProgramAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentCTEProgramAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentCTEProgramAssociation):
            return True

        return self.to_dict() != other.to_dict()
