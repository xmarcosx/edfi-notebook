# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiLocalEducationAgencyFederalFunds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fiscal_year': 'int',
        'innovative_dollars_spent': 'float',
        'innovative_dollars_spent_strategic_priorities': 'float',
        'innovative_programs_funds_received': 'float',
        'school_improvement_allocation': 'float',
        'school_improvement_reserved_funds_percentage': 'float',
        'state_assessment_administration_funding': 'float',
        'supplemental_educational_services_funds_spent': 'float',
        'supplemental_educational_services_per_pupil_expenditure': 'float'
    }

    attribute_map = {
        'fiscal_year': 'fiscalYear',
        'innovative_dollars_spent': 'innovativeDollarsSpent',
        'innovative_dollars_spent_strategic_priorities': 'innovativeDollarsSpentStrategicPriorities',
        'innovative_programs_funds_received': 'innovativeProgramsFundsReceived',
        'school_improvement_allocation': 'schoolImprovementAllocation',
        'school_improvement_reserved_funds_percentage': 'schoolImprovementReservedFundsPercentage',
        'state_assessment_administration_funding': 'stateAssessmentAdministrationFunding',
        'supplemental_educational_services_funds_spent': 'supplementalEducationalServicesFundsSpent',
        'supplemental_educational_services_per_pupil_expenditure': 'supplementalEducationalServicesPerPupilExpenditure'
    }

    def __init__(self, fiscal_year=None, innovative_dollars_spent=None, innovative_dollars_spent_strategic_priorities=None, innovative_programs_funds_received=None, school_improvement_allocation=None, school_improvement_reserved_funds_percentage=None, state_assessment_administration_funding=None, supplemental_educational_services_funds_spent=None, supplemental_educational_services_per_pupil_expenditure=None, _configuration=None):  # noqa: E501
        """EdFiLocalEducationAgencyFederalFunds - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fiscal_year = None
        self._innovative_dollars_spent = None
        self._innovative_dollars_spent_strategic_priorities = None
        self._innovative_programs_funds_received = None
        self._school_improvement_allocation = None
        self._school_improvement_reserved_funds_percentage = None
        self._state_assessment_administration_funding = None
        self._supplemental_educational_services_funds_spent = None
        self._supplemental_educational_services_per_pupil_expenditure = None
        self.discriminator = None

        self.fiscal_year = fiscal_year
        if innovative_dollars_spent is not None:
            self.innovative_dollars_spent = innovative_dollars_spent
        if innovative_dollars_spent_strategic_priorities is not None:
            self.innovative_dollars_spent_strategic_priorities = innovative_dollars_spent_strategic_priorities
        if innovative_programs_funds_received is not None:
            self.innovative_programs_funds_received = innovative_programs_funds_received
        if school_improvement_allocation is not None:
            self.school_improvement_allocation = school_improvement_allocation
        if school_improvement_reserved_funds_percentage is not None:
            self.school_improvement_reserved_funds_percentage = school_improvement_reserved_funds_percentage
        if state_assessment_administration_funding is not None:
            self.state_assessment_administration_funding = state_assessment_administration_funding
        if supplemental_educational_services_funds_spent is not None:
            self.supplemental_educational_services_funds_spent = supplemental_educational_services_funds_spent
        if supplemental_educational_services_per_pupil_expenditure is not None:
            self.supplemental_educational_services_per_pupil_expenditure = supplemental_educational_services_per_pupil_expenditure

    @property
    def fiscal_year(self):
        """Gets the fiscal_year of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The fiscal year for which the federal funds are received.  # noqa: E501

        :return: The fiscal_year of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: int
        """
        return self._fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, fiscal_year):
        """Sets the fiscal_year of this EdFiLocalEducationAgencyFederalFunds.

        The fiscal year for which the federal funds are received.  # noqa: E501

        :param fiscal_year: The fiscal_year of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and fiscal_year is None:
            raise ValueError("Invalid value for `fiscal_year`, must not be `None`")  # noqa: E501

        self._fiscal_year = fiscal_year

    @property
    def innovative_dollars_spent(self):
        """Gets the innovative_dollars_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The total Title V, Part A funds expended by LEAs.  # noqa: E501

        :return: The innovative_dollars_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._innovative_dollars_spent

    @innovative_dollars_spent.setter
    def innovative_dollars_spent(self, innovative_dollars_spent):
        """Sets the innovative_dollars_spent of this EdFiLocalEducationAgencyFederalFunds.

        The total Title V, Part A funds expended by LEAs.  # noqa: E501

        :param innovative_dollars_spent: The innovative_dollars_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._innovative_dollars_spent = innovative_dollars_spent

    @property
    def innovative_dollars_spent_strategic_priorities(self):
        """Gets the innovative_dollars_spent_strategic_priorities of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.  # noqa: E501

        :return: The innovative_dollars_spent_strategic_priorities of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._innovative_dollars_spent_strategic_priorities

    @innovative_dollars_spent_strategic_priorities.setter
    def innovative_dollars_spent_strategic_priorities(self, innovative_dollars_spent_strategic_priorities):
        """Sets the innovative_dollars_spent_strategic_priorities of this EdFiLocalEducationAgencyFederalFunds.

        The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.  # noqa: E501

        :param innovative_dollars_spent_strategic_priorities: The innovative_dollars_spent_strategic_priorities of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._innovative_dollars_spent_strategic_priorities = innovative_dollars_spent_strategic_priorities

    @property
    def innovative_programs_funds_received(self):
        """Gets the innovative_programs_funds_received of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The total Title V, Part A funds received by LEAs.  # noqa: E501

        :return: The innovative_programs_funds_received of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._innovative_programs_funds_received

    @innovative_programs_funds_received.setter
    def innovative_programs_funds_received(self, innovative_programs_funds_received):
        """Sets the innovative_programs_funds_received of this EdFiLocalEducationAgencyFederalFunds.

        The total Title V, Part A funds received by LEAs.  # noqa: E501

        :param innovative_programs_funds_received: The innovative_programs_funds_received of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._innovative_programs_funds_received = innovative_programs_funds_received

    @property
    def school_improvement_allocation(self):
        """Gets the school_improvement_allocation of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The amount of Section 1003(a) and 1003(g) allocations to LEAs.  # noqa: E501

        :return: The school_improvement_allocation of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._school_improvement_allocation

    @school_improvement_allocation.setter
    def school_improvement_allocation(self, school_improvement_allocation):
        """Sets the school_improvement_allocation of this EdFiLocalEducationAgencyFederalFunds.

        The amount of Section 1003(a) and 1003(g) allocations to LEAs.  # noqa: E501

        :param school_improvement_allocation: The school_improvement_allocation of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._school_improvement_allocation = school_improvement_allocation

    @property
    def school_improvement_reserved_funds_percentage(self):
        """Gets the school_improvement_reserved_funds_percentage of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED's regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.  # noqa: E501

        :return: The school_improvement_reserved_funds_percentage of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._school_improvement_reserved_funds_percentage

    @school_improvement_reserved_funds_percentage.setter
    def school_improvement_reserved_funds_percentage(self, school_improvement_reserved_funds_percentage):
        """Sets the school_improvement_reserved_funds_percentage of this EdFiLocalEducationAgencyFederalFunds.

        An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED's regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.  # noqa: E501

        :param school_improvement_reserved_funds_percentage: The school_improvement_reserved_funds_percentage of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._school_improvement_reserved_funds_percentage = school_improvement_reserved_funds_percentage

    @property
    def state_assessment_administration_funding(self):
        """Gets the state_assessment_administration_funding of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state's schools and LEAs are held accountable for results.  # noqa: E501

        :return: The state_assessment_administration_funding of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._state_assessment_administration_funding

    @state_assessment_administration_funding.setter
    def state_assessment_administration_funding(self, state_assessment_administration_funding):
        """Sets the state_assessment_administration_funding of this EdFiLocalEducationAgencyFederalFunds.

        The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state's schools and LEAs are held accountable for results.  # noqa: E501

        :param state_assessment_administration_funding: The state_assessment_administration_funding of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._state_assessment_administration_funding = state_assessment_administration_funding

    @property
    def supplemental_educational_services_funds_spent(self):
        """Gets the supplemental_educational_services_funds_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.  # noqa: E501

        :return: The supplemental_educational_services_funds_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._supplemental_educational_services_funds_spent

    @supplemental_educational_services_funds_spent.setter
    def supplemental_educational_services_funds_spent(self, supplemental_educational_services_funds_spent):
        """Sets the supplemental_educational_services_funds_spent of this EdFiLocalEducationAgencyFederalFunds.

        The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.  # noqa: E501

        :param supplemental_educational_services_funds_spent: The supplemental_educational_services_funds_spent of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._supplemental_educational_services_funds_spent = supplemental_educational_services_funds_spent

    @property
    def supplemental_educational_services_per_pupil_expenditure(self):
        """Gets the supplemental_educational_services_per_pupil_expenditure of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501

        The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.  # noqa: E501

        :return: The supplemental_educational_services_per_pupil_expenditure of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :rtype: float
        """
        return self._supplemental_educational_services_per_pupil_expenditure

    @supplemental_educational_services_per_pupil_expenditure.setter
    def supplemental_educational_services_per_pupil_expenditure(self, supplemental_educational_services_per_pupil_expenditure):
        """Sets the supplemental_educational_services_per_pupil_expenditure of this EdFiLocalEducationAgencyFederalFunds.

        The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.  # noqa: E501

        :param supplemental_educational_services_per_pupil_expenditure: The supplemental_educational_services_per_pupil_expenditure of this EdFiLocalEducationAgencyFederalFunds.  # noqa: E501
        :type: float
        """

        self._supplemental_educational_services_per_pupil_expenditure = supplemental_educational_services_per_pupil_expenditure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiLocalEducationAgencyFederalFunds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiLocalEducationAgencyFederalFunds):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiLocalEducationAgencyFederalFunds):
            return True

        return self.to_dict() != other.to_dict()
