# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentAssessmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assessment_item_result_descriptor': 'str',
        'response_indicator_descriptor': 'str',
        'assessment_response': 'str',
        'descriptive_feedback': 'str',
        'raw_score_result': 'float',
        'time_assessed': 'str',
        'assessment_item_reference': 'EdFiAssessmentItemReference'
    }

    attribute_map = {
        'assessment_item_result_descriptor': 'assessmentItemResultDescriptor',
        'response_indicator_descriptor': 'responseIndicatorDescriptor',
        'assessment_response': 'assessmentResponse',
        'descriptive_feedback': 'descriptiveFeedback',
        'raw_score_result': 'rawScoreResult',
        'time_assessed': 'timeAssessed',
        'assessment_item_reference': 'assessmentItemReference'
    }

    def __init__(self, assessment_item_result_descriptor=None, response_indicator_descriptor=None, assessment_response=None, descriptive_feedback=None, raw_score_result=None, time_assessed=None, assessment_item_reference=None, _configuration=None):  # noqa: E501
        """EdFiStudentAssessmentItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assessment_item_result_descriptor = None
        self._response_indicator_descriptor = None
        self._assessment_response = None
        self._descriptive_feedback = None
        self._raw_score_result = None
        self._time_assessed = None
        self._assessment_item_reference = None
        self.discriminator = None

        self.assessment_item_result_descriptor = assessment_item_result_descriptor
        if response_indicator_descriptor is not None:
            self.response_indicator_descriptor = response_indicator_descriptor
        if assessment_response is not None:
            self.assessment_response = assessment_response
        if descriptive_feedback is not None:
            self.descriptive_feedback = descriptive_feedback
        if raw_score_result is not None:
            self.raw_score_result = raw_score_result
        if time_assessed is not None:
            self.time_assessed = time_assessed
        self.assessment_item_reference = assessment_item_reference

    @property
    def assessment_item_result_descriptor(self):
        """Gets the assessment_item_result_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501

        The analyzed result of a student's response to an assessment item. For example:        Correct        Incorrect         Met standard        ...  # noqa: E501

        :return: The assessment_item_result_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._assessment_item_result_descriptor

    @assessment_item_result_descriptor.setter
    def assessment_item_result_descriptor(self, assessment_item_result_descriptor):
        """Sets the assessment_item_result_descriptor of this EdFiStudentAssessmentItem.

        The analyzed result of a student's response to an assessment item. For example:        Correct        Incorrect         Met standard        ...  # noqa: E501

        :param assessment_item_result_descriptor: The assessment_item_result_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and assessment_item_result_descriptor is None:
            raise ValueError("Invalid value for `assessment_item_result_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                assessment_item_result_descriptor is not None and len(assessment_item_result_descriptor) > 306):
            raise ValueError("Invalid value for `assessment_item_result_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._assessment_item_result_descriptor = assessment_item_result_descriptor

    @property
    def response_indicator_descriptor(self):
        """Gets the response_indicator_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501

        Indicator of the response. For example:        Nonscorable response        Ineffective response        Effective response        Partial response        ...  # noqa: E501

        :return: The response_indicator_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._response_indicator_descriptor

    @response_indicator_descriptor.setter
    def response_indicator_descriptor(self, response_indicator_descriptor):
        """Sets the response_indicator_descriptor of this EdFiStudentAssessmentItem.

        Indicator of the response. For example:        Nonscorable response        Ineffective response        Effective response        Partial response        ...  # noqa: E501

        :param response_indicator_descriptor: The response_indicator_descriptor of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                response_indicator_descriptor is not None and len(response_indicator_descriptor) > 306):
            raise ValueError("Invalid value for `response_indicator_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._response_indicator_descriptor = response_indicator_descriptor

    @property
    def assessment_response(self):
        """Gets the assessment_response of this EdFiStudentAssessmentItem.  # noqa: E501

        A student's response to a stimulus on a test.  # noqa: E501

        :return: The assessment_response of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._assessment_response

    @assessment_response.setter
    def assessment_response(self, assessment_response):
        """Sets the assessment_response of this EdFiStudentAssessmentItem.

        A student's response to a stimulus on a test.  # noqa: E501

        :param assessment_response: The assessment_response of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                assessment_response is not None and len(assessment_response) > 60):
            raise ValueError("Invalid value for `assessment_response`, length must be less than or equal to `60`")  # noqa: E501

        self._assessment_response = assessment_response

    @property
    def descriptive_feedback(self):
        """Gets the descriptive_feedback of this EdFiStudentAssessmentItem.  # noqa: E501

        The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.  # noqa: E501

        :return: The descriptive_feedback of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._descriptive_feedback

    @descriptive_feedback.setter
    def descriptive_feedback(self, descriptive_feedback):
        """Sets the descriptive_feedback of this EdFiStudentAssessmentItem.

        The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.  # noqa: E501

        :param descriptive_feedback: The descriptive_feedback of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                descriptive_feedback is not None and len(descriptive_feedback) > 1024):
            raise ValueError("Invalid value for `descriptive_feedback`, length must be less than or equal to `1024`")  # noqa: E501

        self._descriptive_feedback = descriptive_feedback

    @property
    def raw_score_result(self):
        """Gets the raw_score_result of this EdFiStudentAssessmentItem.  # noqa: E501

        A meaningful raw score of the performance of an individual on an assessment item.  # noqa: E501

        :return: The raw_score_result of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: float
        """
        return self._raw_score_result

    @raw_score_result.setter
    def raw_score_result(self, raw_score_result):
        """Sets the raw_score_result of this EdFiStudentAssessmentItem.

        A meaningful raw score of the performance of an individual on an assessment item.  # noqa: E501

        :param raw_score_result: The raw_score_result of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: float
        """

        self._raw_score_result = raw_score_result

    @property
    def time_assessed(self):
        """Gets the time_assessed of this EdFiStudentAssessmentItem.  # noqa: E501

        The overall time a student actually spent during the AssessmentItem.  # noqa: E501

        :return: The time_assessed of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: str
        """
        return self._time_assessed

    @time_assessed.setter
    def time_assessed(self, time_assessed):
        """Sets the time_assessed of this EdFiStudentAssessmentItem.

        The overall time a student actually spent during the AssessmentItem.  # noqa: E501

        :param time_assessed: The time_assessed of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                time_assessed is not None and len(time_assessed) > 30):
            raise ValueError("Invalid value for `time_assessed`, length must be less than or equal to `30`")  # noqa: E501

        self._time_assessed = time_assessed

    @property
    def assessment_item_reference(self):
        """Gets the assessment_item_reference of this EdFiStudentAssessmentItem.  # noqa: E501


        :return: The assessment_item_reference of this EdFiStudentAssessmentItem.  # noqa: E501
        :rtype: EdFiAssessmentItemReference
        """
        return self._assessment_item_reference

    @assessment_item_reference.setter
    def assessment_item_reference(self, assessment_item_reference):
        """Sets the assessment_item_reference of this EdFiStudentAssessmentItem.


        :param assessment_item_reference: The assessment_item_reference of this EdFiStudentAssessmentItem.  # noqa: E501
        :type: EdFiAssessmentItemReference
        """
        if self._configuration.client_side_validation and assessment_item_reference is None:
            raise ValueError("Invalid value for `assessment_item_reference`, must not be `None`")  # noqa: E501

        self._assessment_item_reference = assessment_item_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentAssessmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentAssessmentItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentAssessmentItem):
            return True

        return self.to_dict() != other.to_dict()
