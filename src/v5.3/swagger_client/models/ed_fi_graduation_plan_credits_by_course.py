# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiGraduationPlanCreditsByCourse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'course_set_name': 'str',
        'credit_type_descriptor': 'str',
        'when_taken_grade_level_descriptor': 'str',
        'credit_conversion': 'float',
        'credits': 'float',
        'courses': 'list[EdFiGraduationPlanCreditsByCourseCourse]'
    }

    attribute_map = {
        'course_set_name': 'courseSetName',
        'credit_type_descriptor': 'creditTypeDescriptor',
        'when_taken_grade_level_descriptor': 'whenTakenGradeLevelDescriptor',
        'credit_conversion': 'creditConversion',
        'credits': 'credits',
        'courses': 'courses'
    }

    def __init__(self, course_set_name=None, credit_type_descriptor=None, when_taken_grade_level_descriptor=None, credit_conversion=None, credits=None, courses=None, _configuration=None):  # noqa: E501
        """EdFiGraduationPlanCreditsByCourse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._course_set_name = None
        self._credit_type_descriptor = None
        self._when_taken_grade_level_descriptor = None
        self._credit_conversion = None
        self._credits = None
        self._courses = None
        self.discriminator = None

        self.course_set_name = course_set_name
        if credit_type_descriptor is not None:
            self.credit_type_descriptor = credit_type_descriptor
        if when_taken_grade_level_descriptor is not None:
            self.when_taken_grade_level_descriptor = when_taken_grade_level_descriptor
        if credit_conversion is not None:
            self.credit_conversion = credit_conversion
        self.credits = credits
        self.courses = courses

    @property
    def course_set_name(self):
        """Gets the course_set_name of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        Identifying name given to a collection of courses.  # noqa: E501

        :return: The course_set_name of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: str
        """
        return self._course_set_name

    @course_set_name.setter
    def course_set_name(self, course_set_name):
        """Sets the course_set_name of this EdFiGraduationPlanCreditsByCourse.

        Identifying name given to a collection of courses.  # noqa: E501

        :param course_set_name: The course_set_name of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and course_set_name is None:
            raise ValueError("Invalid value for `course_set_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                course_set_name is not None and len(course_set_name) > 120):
            raise ValueError("Invalid value for `course_set_name`, length must be less than or equal to `120`")  # noqa: E501

        self._course_set_name = course_set_name

    @property
    def credit_type_descriptor(self):
        """Gets the credit_type_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The credit_type_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: str
        """
        return self._credit_type_descriptor

    @credit_type_descriptor.setter
    def credit_type_descriptor(self, credit_type_descriptor):
        """Sets the credit_type_descriptor of this EdFiGraduationPlanCreditsByCourse.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param credit_type_descriptor: The credit_type_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                credit_type_descriptor is not None and len(credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credit_type_descriptor = credit_type_descriptor

    @property
    def when_taken_grade_level_descriptor(self):
        """Gets the when_taken_grade_level_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        The grade level when the student is planned to take the course.  # noqa: E501

        :return: The when_taken_grade_level_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: str
        """
        return self._when_taken_grade_level_descriptor

    @when_taken_grade_level_descriptor.setter
    def when_taken_grade_level_descriptor(self, when_taken_grade_level_descriptor):
        """Sets the when_taken_grade_level_descriptor of this EdFiGraduationPlanCreditsByCourse.

        The grade level when the student is planned to take the course.  # noqa: E501

        :param when_taken_grade_level_descriptor: The when_taken_grade_level_descriptor of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                when_taken_grade_level_descriptor is not None and len(when_taken_grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `when_taken_grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._when_taken_grade_level_descriptor = when_taken_grade_level_descriptor

    @property
    def credit_conversion(self):
        """Gets the credit_conversion of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The credit_conversion of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: float
        """
        return self._credit_conversion

    @credit_conversion.setter
    def credit_conversion(self, credit_conversion):
        """Sets the credit_conversion of this EdFiGraduationPlanCreditsByCourse.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param credit_conversion: The credit_conversion of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: float
        """

        self._credit_conversion = credit_conversion

    @property
    def credits(self):
        """Gets the credits of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The credits of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this EdFiGraduationPlanCreditsByCourse.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param credits: The credits of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")  # noqa: E501

        self._credits = credits

    @property
    def courses(self):
        """Gets the courses of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501

        An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.  # noqa: E501

        :return: The courses of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :rtype: list[EdFiGraduationPlanCreditsByCourseCourse]
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """Sets the courses of this EdFiGraduationPlanCreditsByCourse.

        An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.  # noqa: E501

        :param courses: The courses of this EdFiGraduationPlanCreditsByCourse.  # noqa: E501
        :type: list[EdFiGraduationPlanCreditsByCourseCourse]
        """
        if self._configuration.client_side_validation and courses is None:
            raise ValueError("Invalid value for `courses`, must not be `None`")  # noqa: E501

        self._courses = courses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiGraduationPlanCreditsByCourse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiGraduationPlanCreditsByCourse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiGraduationPlanCreditsByCourse):
            return True

        return self.to_dict() != other.to_dict()
