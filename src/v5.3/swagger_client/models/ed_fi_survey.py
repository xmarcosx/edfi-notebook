# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiSurvey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'namespace': 'str',
        'survey_identifier': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference',
        'session_reference': 'EdFiSessionReference',
        'number_administered': 'int',
        'survey_category_descriptor': 'str',
        'survey_title': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'survey_identifier': 'surveyIdentifier',
        'education_organization_reference': 'educationOrganizationReference',
        'school_year_type_reference': 'schoolYearTypeReference',
        'session_reference': 'sessionReference',
        'number_administered': 'numberAdministered',
        'survey_category_descriptor': 'surveyCategoryDescriptor',
        'survey_title': 'surveyTitle',
        'etag': '_etag'
    }

    def __init__(self, id=None, namespace=None, survey_identifier=None, education_organization_reference=None, school_year_type_reference=None, session_reference=None, number_administered=None, survey_category_descriptor=None, survey_title=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiSurvey - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._namespace = None
        self._survey_identifier = None
        self._education_organization_reference = None
        self._school_year_type_reference = None
        self._session_reference = None
        self._number_administered = None
        self._survey_category_descriptor = None
        self._survey_title = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.namespace = namespace
        self.survey_identifier = survey_identifier
        if education_organization_reference is not None:
            self.education_organization_reference = education_organization_reference
        self.school_year_type_reference = school_year_type_reference
        if session_reference is not None:
            self.session_reference = session_reference
        if number_administered is not None:
            self.number_administered = number_administered
        if survey_category_descriptor is not None:
            self.survey_category_descriptor = survey_category_descriptor
        self.survey_title = survey_title
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiSurvey.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiSurvey.

          # noqa: E501

        :param id: The id of this EdFiSurvey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this EdFiSurvey.  # noqa: E501

        Namespace for the Survey.  # noqa: E501

        :return: The namespace of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiSurvey.

        Namespace for the Survey.  # noqa: E501

        :param namespace: The namespace of this EdFiSurvey.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def survey_identifier(self):
        """Gets the survey_identifier of this EdFiSurvey.  # noqa: E501

        The unique survey identifier from the survey tool.  # noqa: E501

        :return: The survey_identifier of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._survey_identifier

    @survey_identifier.setter
    def survey_identifier(self, survey_identifier):
        """Sets the survey_identifier of this EdFiSurvey.

        The unique survey identifier from the survey tool.  # noqa: E501

        :param survey_identifier: The survey_identifier of this EdFiSurvey.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and survey_identifier is None:
            raise ValueError("Invalid value for `survey_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                survey_identifier is not None and len(survey_identifier) > 60):
            raise ValueError("Invalid value for `survey_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._survey_identifier = survey_identifier

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiSurvey.  # noqa: E501


        :return: The education_organization_reference of this EdFiSurvey.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiSurvey.


        :param education_organization_reference: The education_organization_reference of this EdFiSurvey.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """

        self._education_organization_reference = education_organization_reference

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiSurvey.  # noqa: E501


        :return: The school_year_type_reference of this EdFiSurvey.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiSurvey.


        :param school_year_type_reference: The school_year_type_reference of this EdFiSurvey.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    @property
    def session_reference(self):
        """Gets the session_reference of this EdFiSurvey.  # noqa: E501


        :return: The session_reference of this EdFiSurvey.  # noqa: E501
        :rtype: EdFiSessionReference
        """
        return self._session_reference

    @session_reference.setter
    def session_reference(self, session_reference):
        """Sets the session_reference of this EdFiSurvey.


        :param session_reference: The session_reference of this EdFiSurvey.  # noqa: E501
        :type: EdFiSessionReference
        """

        self._session_reference = session_reference

    @property
    def number_administered(self):
        """Gets the number_administered of this EdFiSurvey.  # noqa: E501

        Number of persons to whom this survey was administered.  # noqa: E501

        :return: The number_administered of this EdFiSurvey.  # noqa: E501
        :rtype: int
        """
        return self._number_administered

    @number_administered.setter
    def number_administered(self, number_administered):
        """Sets the number_administered of this EdFiSurvey.

        Number of persons to whom this survey was administered.  # noqa: E501

        :param number_administered: The number_administered of this EdFiSurvey.  # noqa: E501
        :type: int
        """

        self._number_administered = number_administered

    @property
    def survey_category_descriptor(self):
        """Gets the survey_category_descriptor of this EdFiSurvey.  # noqa: E501

        The category or type of survey.  # noqa: E501

        :return: The survey_category_descriptor of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._survey_category_descriptor

    @survey_category_descriptor.setter
    def survey_category_descriptor(self, survey_category_descriptor):
        """Sets the survey_category_descriptor of this EdFiSurvey.

        The category or type of survey.  # noqa: E501

        :param survey_category_descriptor: The survey_category_descriptor of this EdFiSurvey.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                survey_category_descriptor is not None and len(survey_category_descriptor) > 306):
            raise ValueError("Invalid value for `survey_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._survey_category_descriptor = survey_category_descriptor

    @property
    def survey_title(self):
        """Gets the survey_title of this EdFiSurvey.  # noqa: E501

        The title of the survey.  # noqa: E501

        :return: The survey_title of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._survey_title

    @survey_title.setter
    def survey_title(self, survey_title):
        """Sets the survey_title of this EdFiSurvey.

        The title of the survey.  # noqa: E501

        :param survey_title: The survey_title of this EdFiSurvey.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and survey_title is None:
            raise ValueError("Invalid value for `survey_title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                survey_title is not None and len(survey_title) > 255):
            raise ValueError("Invalid value for `survey_title`, length must be less than or equal to `255`")  # noqa: E501

        self._survey_title = survey_title

    @property
    def etag(self):
        """Gets the etag of this EdFiSurvey.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiSurvey.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiSurvey.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiSurvey.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiSurvey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiSurvey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiSurvey):
            return True

        return self.to_dict() != other.to_dict()
