# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiLearningObjectiveContentStandard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publication_status_descriptor': 'str',
        'begin_date': 'date',
        'end_date': 'date',
        'publication_date': 'date',
        'publication_year': 'int',
        'title': 'str',
        'uri': 'str',
        'version': 'str',
        'mandating_education_organization_reference': 'EdFiEducationOrganizationReference',
        'authors': 'list[EdFiLearningObjectiveContentStandardAuthor]'
    }

    attribute_map = {
        'publication_status_descriptor': 'publicationStatusDescriptor',
        'begin_date': 'beginDate',
        'end_date': 'endDate',
        'publication_date': 'publicationDate',
        'publication_year': 'publicationYear',
        'title': 'title',
        'uri': 'uri',
        'version': 'version',
        'mandating_education_organization_reference': 'mandatingEducationOrganizationReference',
        'authors': 'authors'
    }

    def __init__(self, publication_status_descriptor=None, begin_date=None, end_date=None, publication_date=None, publication_year=None, title=None, uri=None, version=None, mandating_education_organization_reference=None, authors=None, _configuration=None):  # noqa: E501
        """EdFiLearningObjectiveContentStandard - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._publication_status_descriptor = None
        self._begin_date = None
        self._end_date = None
        self._publication_date = None
        self._publication_year = None
        self._title = None
        self._uri = None
        self._version = None
        self._mandating_education_organization_reference = None
        self._authors = None
        self.discriminator = None

        if publication_status_descriptor is not None:
            self.publication_status_descriptor = publication_status_descriptor
        if begin_date is not None:
            self.begin_date = begin_date
        if end_date is not None:
            self.end_date = end_date
        if publication_date is not None:
            self.publication_date = publication_date
        if publication_year is not None:
            self.publication_year = publication_year
        self.title = title
        if uri is not None:
            self.uri = uri
        if version is not None:
            self.version = version
        if mandating_education_organization_reference is not None:
            self.mandating_education_organization_reference = mandating_education_organization_reference
        if authors is not None:
            self.authors = authors

    @property
    def publication_status_descriptor(self):
        """Gets the publication_status_descriptor of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).  # noqa: E501

        :return: The publication_status_descriptor of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: str
        """
        return self._publication_status_descriptor

    @publication_status_descriptor.setter
    def publication_status_descriptor(self, publication_status_descriptor):
        """Sets the publication_status_descriptor of this EdFiLearningObjectiveContentStandard.

        The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).  # noqa: E501

        :param publication_status_descriptor: The publication_status_descriptor of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                publication_status_descriptor is not None and len(publication_status_descriptor) > 306):
            raise ValueError("Invalid value for `publication_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._publication_status_descriptor = publication_status_descriptor

    @property
    def begin_date(self):
        """Gets the begin_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The beginning of the period during which this learning standard document is intended for use.  # noqa: E501

        :return: The begin_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: date
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EdFiLearningObjectiveContentStandard.

        The beginning of the period during which this learning standard document is intended for use.  # noqa: E501

        :param begin_date: The begin_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: date
        """

        self._begin_date = begin_date

    @property
    def end_date(self):
        """Gets the end_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The end of the period during which this learning standard document is intended for use.  # noqa: E501

        :return: The end_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EdFiLearningObjectiveContentStandard.

        The end of the period during which this learning standard document is intended for use.  # noqa: E501

        :param end_date: The end_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def publication_date(self):
        """Gets the publication_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The date on which this content was first published.  # noqa: E501

        :return: The publication_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: date
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this EdFiLearningObjectiveContentStandard.

        The date on which this content was first published.  # noqa: E501

        :param publication_date: The publication_date of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: date
        """

        self._publication_date = publication_date

    @property
    def publication_year(self):
        """Gets the publication_year of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The year at which this content was first published.  # noqa: E501

        :return: The publication_year of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: int
        """
        return self._publication_year

    @publication_year.setter
    def publication_year(self, publication_year):
        """Sets the publication_year of this EdFiLearningObjectiveContentStandard.

        The year at which this content was first published.  # noqa: E501

        :param publication_year: The publication_year of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: int
        """

        self._publication_year = publication_year

    @property
    def title(self):
        """Gets the title of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The name of the content standard, for example Common Core.  # noqa: E501

        :return: The title of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EdFiLearningObjectiveContentStandard.

        The name of the content standard, for example Common Core.  # noqa: E501

        :param title: The title of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 75):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `75`")  # noqa: E501

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        An unambiguous reference to the standards using a network-resolvable URI.  # noqa: E501

        :return: The uri of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EdFiLearningObjectiveContentStandard.

        An unambiguous reference to the standards using a network-resolvable URI.  # noqa: E501

        :param uri: The uri of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uri is not None and len(uri) > 255):
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `255`")  # noqa: E501

        self._uri = uri

    @property
    def version(self):
        """Gets the version of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        The version identifier for the content.  # noqa: E501

        :return: The version of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EdFiLearningObjectiveContentStandard.

        The version identifier for the content.  # noqa: E501

        :param version: The version of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                version is not None and len(version) > 50):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `50`")  # noqa: E501

        self._version = version

    @property
    def mandating_education_organization_reference(self):
        """Gets the mandating_education_organization_reference of this EdFiLearningObjectiveContentStandard.  # noqa: E501


        :return: The mandating_education_organization_reference of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._mandating_education_organization_reference

    @mandating_education_organization_reference.setter
    def mandating_education_organization_reference(self, mandating_education_organization_reference):
        """Sets the mandating_education_organization_reference of this EdFiLearningObjectiveContentStandard.


        :param mandating_education_organization_reference: The mandating_education_organization_reference of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """

        self._mandating_education_organization_reference = mandating_education_organization_reference

    @property
    def authors(self):
        """Gets the authors of this EdFiLearningObjectiveContentStandard.  # noqa: E501

        An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.  # noqa: E501

        :return: The authors of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :rtype: list[EdFiLearningObjectiveContentStandardAuthor]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this EdFiLearningObjectiveContentStandard.

        An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.  # noqa: E501

        :param authors: The authors of this EdFiLearningObjectiveContentStandard.  # noqa: E501
        :type: list[EdFiLearningObjectiveContentStandardAuthor]
        """

        self._authors = authors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiLearningObjectiveContentStandard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiLearningObjectiveContentStandard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiLearningObjectiveContentStandard):
            return True

        return self.to_dict() != other.to_dict()
