# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCommunityProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'categories': 'list[EdFiEducationOrganizationCategory]',
        'community_provider_id': 'int',
        'community_organization_reference': 'EdFiCommunityOrganizationReference',
        'addresses': 'list[EdFiEducationOrganizationAddress]',
        'identification_codes': 'list[EdFiEducationOrganizationIdentificationCode]',
        'indicators': 'list[EdFiEducationOrganizationIndicator]',
        'institution_telephones': 'list[EdFiEducationOrganizationInstitutionTelephone]',
        'international_addresses': 'list[EdFiEducationOrganizationInternationalAddress]',
        'license_exempt_indicator': 'bool',
        'name_of_institution': 'str',
        'operational_status_descriptor': 'str',
        'provider_category_descriptor': 'str',
        'provider_profitability_descriptor': 'str',
        'provider_status_descriptor': 'str',
        'school_indicator': 'bool',
        'short_name_of_institution': 'str',
        'web_site': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'categories': 'categories',
        'community_provider_id': 'communityProviderId',
        'community_organization_reference': 'communityOrganizationReference',
        'addresses': 'addresses',
        'identification_codes': 'identificationCodes',
        'indicators': 'indicators',
        'institution_telephones': 'institutionTelephones',
        'international_addresses': 'internationalAddresses',
        'license_exempt_indicator': 'licenseExemptIndicator',
        'name_of_institution': 'nameOfInstitution',
        'operational_status_descriptor': 'operationalStatusDescriptor',
        'provider_category_descriptor': 'providerCategoryDescriptor',
        'provider_profitability_descriptor': 'providerProfitabilityDescriptor',
        'provider_status_descriptor': 'providerStatusDescriptor',
        'school_indicator': 'schoolIndicator',
        'short_name_of_institution': 'shortNameOfInstitution',
        'web_site': 'webSite',
        'etag': '_etag'
    }

    def __init__(self, id=None, categories=None, community_provider_id=None, community_organization_reference=None, addresses=None, identification_codes=None, indicators=None, institution_telephones=None, international_addresses=None, license_exempt_indicator=None, name_of_institution=None, operational_status_descriptor=None, provider_category_descriptor=None, provider_profitability_descriptor=None, provider_status_descriptor=None, school_indicator=None, short_name_of_institution=None, web_site=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCommunityProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._categories = None
        self._community_provider_id = None
        self._community_organization_reference = None
        self._addresses = None
        self._identification_codes = None
        self._indicators = None
        self._institution_telephones = None
        self._international_addresses = None
        self._license_exempt_indicator = None
        self._name_of_institution = None
        self._operational_status_descriptor = None
        self._provider_category_descriptor = None
        self._provider_profitability_descriptor = None
        self._provider_status_descriptor = None
        self._school_indicator = None
        self._short_name_of_institution = None
        self._web_site = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.categories = categories
        self.community_provider_id = community_provider_id
        if community_organization_reference is not None:
            self.community_organization_reference = community_organization_reference
        if addresses is not None:
            self.addresses = addresses
        if identification_codes is not None:
            self.identification_codes = identification_codes
        if indicators is not None:
            self.indicators = indicators
        if institution_telephones is not None:
            self.institution_telephones = institution_telephones
        if international_addresses is not None:
            self.international_addresses = international_addresses
        if license_exempt_indicator is not None:
            self.license_exempt_indicator = license_exempt_indicator
        self.name_of_institution = name_of_institution
        if operational_status_descriptor is not None:
            self.operational_status_descriptor = operational_status_descriptor
        self.provider_category_descriptor = provider_category_descriptor
        if provider_profitability_descriptor is not None:
            self.provider_profitability_descriptor = provider_profitability_descriptor
        self.provider_status_descriptor = provider_status_descriptor
        if school_indicator is not None:
            self.school_indicator = school_indicator
        if short_name_of_institution is not None:
            self.short_name_of_institution = short_name_of_institution
        if web_site is not None:
            self.web_site = web_site
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCommunityProvider.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCommunityProvider.

          # noqa: E501

        :param id: The id of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def categories(self):
        """Gets the categories of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.  # noqa: E501

        :return: The categories of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.  # noqa: E501

        :param categories: The categories of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationCategory]
        """
        if self._configuration.client_side_validation and categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def community_provider_id(self):
        """Gets the community_provider_id of this EdFiCommunityProvider.  # noqa: E501

        The identifier assigned to a CommunityProvider.  # noqa: E501

        :return: The community_provider_id of this EdFiCommunityProvider.  # noqa: E501
        :rtype: int
        """
        return self._community_provider_id

    @community_provider_id.setter
    def community_provider_id(self, community_provider_id):
        """Sets the community_provider_id of this EdFiCommunityProvider.

        The identifier assigned to a CommunityProvider.  # noqa: E501

        :param community_provider_id: The community_provider_id of this EdFiCommunityProvider.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and community_provider_id is None:
            raise ValueError("Invalid value for `community_provider_id`, must not be `None`")  # noqa: E501

        self._community_provider_id = community_provider_id

    @property
    def community_organization_reference(self):
        """Gets the community_organization_reference of this EdFiCommunityProvider.  # noqa: E501


        :return: The community_organization_reference of this EdFiCommunityProvider.  # noqa: E501
        :rtype: EdFiCommunityOrganizationReference
        """
        return self._community_organization_reference

    @community_organization_reference.setter
    def community_organization_reference(self, community_organization_reference):
        """Sets the community_organization_reference of this EdFiCommunityProvider.


        :param community_organization_reference: The community_organization_reference of this EdFiCommunityProvider.  # noqa: E501
        :type: EdFiCommunityOrganizationReference
        """

        self._community_organization_reference = community_organization_reference

    @property
    def addresses(self):
        """Gets the addresses of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.  # noqa: E501

        :return: The addresses of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.  # noqa: E501

        :param addresses: The addresses of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationAddress]
        """

        self._addresses = addresses

    @property
    def identification_codes(self):
        """Gets the identification_codes of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.  # noqa: E501

        :return: The identification_codes of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationIdentificationCode]
        """
        return self._identification_codes

    @identification_codes.setter
    def identification_codes(self, identification_codes):
        """Sets the identification_codes of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.  # noqa: E501

        :param identification_codes: The identification_codes of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationIdentificationCode]
        """

        self._identification_codes = identification_codes

    @property
    def indicators(self):
        """Gets the indicators of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationIndicators. An indicator or metric of an Education Organization.  # noqa: E501

        :return: The indicators of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationIndicator]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationIndicators. An indicator or metric of an Education Organization.  # noqa: E501

        :param indicators: The indicators of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationIndicator]
        """

        self._indicators = indicators

    @property
    def institution_telephones(self):
        """Gets the institution_telephones of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.  # noqa: E501

        :return: The institution_telephones of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationInstitutionTelephone]
        """
        return self._institution_telephones

    @institution_telephones.setter
    def institution_telephones(self, institution_telephones):
        """Sets the institution_telephones of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.  # noqa: E501

        :param institution_telephones: The institution_telephones of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationInstitutionTelephone]
        """

        self._institution_telephones = institution_telephones

    @property
    def international_addresses(self):
        """Gets the international_addresses of this EdFiCommunityProvider.  # noqa: E501

        An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.  # noqa: E501

        :return: The international_addresses of this EdFiCommunityProvider.  # noqa: E501
        :rtype: list[EdFiEducationOrganizationInternationalAddress]
        """
        return self._international_addresses

    @international_addresses.setter
    def international_addresses(self, international_addresses):
        """Sets the international_addresses of this EdFiCommunityProvider.

        An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.  # noqa: E501

        :param international_addresses: The international_addresses of this EdFiCommunityProvider.  # noqa: E501
        :type: list[EdFiEducationOrganizationInternationalAddress]
        """

        self._international_addresses = international_addresses

    @property
    def license_exempt_indicator(self):
        """Gets the license_exempt_indicator of this EdFiCommunityProvider.  # noqa: E501

        An indication of whether the provider is exempt from having a license.  # noqa: E501

        :return: The license_exempt_indicator of this EdFiCommunityProvider.  # noqa: E501
        :rtype: bool
        """
        return self._license_exempt_indicator

    @license_exempt_indicator.setter
    def license_exempt_indicator(self, license_exempt_indicator):
        """Sets the license_exempt_indicator of this EdFiCommunityProvider.

        An indication of whether the provider is exempt from having a license.  # noqa: E501

        :param license_exempt_indicator: The license_exempt_indicator of this EdFiCommunityProvider.  # noqa: E501
        :type: bool
        """

        self._license_exempt_indicator = license_exempt_indicator

    @property
    def name_of_institution(self):
        """Gets the name_of_institution of this EdFiCommunityProvider.  # noqa: E501

        The full, legally accepted name of the institution.  # noqa: E501

        :return: The name_of_institution of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._name_of_institution

    @name_of_institution.setter
    def name_of_institution(self, name_of_institution):
        """Sets the name_of_institution of this EdFiCommunityProvider.

        The full, legally accepted name of the institution.  # noqa: E501

        :param name_of_institution: The name_of_institution of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name_of_institution is None:
            raise ValueError("Invalid value for `name_of_institution`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name_of_institution is not None and len(name_of_institution) > 75):
            raise ValueError("Invalid value for `name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._name_of_institution = name_of_institution

    @property
    def operational_status_descriptor(self):
        """Gets the operational_status_descriptor of this EdFiCommunityProvider.  # noqa: E501

        The current operational status of the EducationOrganization (e.g., active, inactive).  # noqa: E501

        :return: The operational_status_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._operational_status_descriptor

    @operational_status_descriptor.setter
    def operational_status_descriptor(self, operational_status_descriptor):
        """Sets the operational_status_descriptor of this EdFiCommunityProvider.

        The current operational status of the EducationOrganization (e.g., active, inactive).  # noqa: E501

        :param operational_status_descriptor: The operational_status_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                operational_status_descriptor is not None and len(operational_status_descriptor) > 306):
            raise ValueError("Invalid value for `operational_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._operational_status_descriptor = operational_status_descriptor

    @property
    def provider_category_descriptor(self):
        """Gets the provider_category_descriptor of this EdFiCommunityProvider.  # noqa: E501

        Indicates the category of the provider.  # noqa: E501

        :return: The provider_category_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._provider_category_descriptor

    @provider_category_descriptor.setter
    def provider_category_descriptor(self, provider_category_descriptor):
        """Sets the provider_category_descriptor of this EdFiCommunityProvider.

        Indicates the category of the provider.  # noqa: E501

        :param provider_category_descriptor: The provider_category_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider_category_descriptor is None:
            raise ValueError("Invalid value for `provider_category_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                provider_category_descriptor is not None and len(provider_category_descriptor) > 306):
            raise ValueError("Invalid value for `provider_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._provider_category_descriptor = provider_category_descriptor

    @property
    def provider_profitability_descriptor(self):
        """Gets the provider_profitability_descriptor of this EdFiCommunityProvider.  # noqa: E501

        Indicates the profitability status of the provider.  # noqa: E501

        :return: The provider_profitability_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._provider_profitability_descriptor

    @provider_profitability_descriptor.setter
    def provider_profitability_descriptor(self, provider_profitability_descriptor):
        """Sets the provider_profitability_descriptor of this EdFiCommunityProvider.

        Indicates the profitability status of the provider.  # noqa: E501

        :param provider_profitability_descriptor: The provider_profitability_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                provider_profitability_descriptor is not None and len(provider_profitability_descriptor) > 306):
            raise ValueError("Invalid value for `provider_profitability_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._provider_profitability_descriptor = provider_profitability_descriptor

    @property
    def provider_status_descriptor(self):
        """Gets the provider_status_descriptor of this EdFiCommunityProvider.  # noqa: E501

        Indicates the status of the provider.  # noqa: E501

        :return: The provider_status_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._provider_status_descriptor

    @provider_status_descriptor.setter
    def provider_status_descriptor(self, provider_status_descriptor):
        """Sets the provider_status_descriptor of this EdFiCommunityProvider.

        Indicates the status of the provider.  # noqa: E501

        :param provider_status_descriptor: The provider_status_descriptor of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider_status_descriptor is None:
            raise ValueError("Invalid value for `provider_status_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                provider_status_descriptor is not None and len(provider_status_descriptor) > 306):
            raise ValueError("Invalid value for `provider_status_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._provider_status_descriptor = provider_status_descriptor

    @property
    def school_indicator(self):
        """Gets the school_indicator of this EdFiCommunityProvider.  # noqa: E501

        An indication of whether the community provider is a school.  # noqa: E501

        :return: The school_indicator of this EdFiCommunityProvider.  # noqa: E501
        :rtype: bool
        """
        return self._school_indicator

    @school_indicator.setter
    def school_indicator(self, school_indicator):
        """Sets the school_indicator of this EdFiCommunityProvider.

        An indication of whether the community provider is a school.  # noqa: E501

        :param school_indicator: The school_indicator of this EdFiCommunityProvider.  # noqa: E501
        :type: bool
        """

        self._school_indicator = school_indicator

    @property
    def short_name_of_institution(self):
        """Gets the short_name_of_institution of this EdFiCommunityProvider.  # noqa: E501

        A short name for the institution.  # noqa: E501

        :return: The short_name_of_institution of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._short_name_of_institution

    @short_name_of_institution.setter
    def short_name_of_institution(self, short_name_of_institution):
        """Sets the short_name_of_institution of this EdFiCommunityProvider.

        A short name for the institution.  # noqa: E501

        :param short_name_of_institution: The short_name_of_institution of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_name_of_institution is not None and len(short_name_of_institution) > 75):
            raise ValueError("Invalid value for `short_name_of_institution`, length must be less than or equal to `75`")  # noqa: E501

        self._short_name_of_institution = short_name_of_institution

    @property
    def web_site(self):
        """Gets the web_site of this EdFiCommunityProvider.  # noqa: E501

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :return: The web_site of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._web_site

    @web_site.setter
    def web_site(self, web_site):
        """Sets the web_site of this EdFiCommunityProvider.

        The public web site address (URL) for the EducationOrganization.  # noqa: E501

        :param web_site: The web_site of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                web_site is not None and len(web_site) > 255):
            raise ValueError("Invalid value for `web_site`, length must be less than or equal to `255`")  # noqa: E501

        self._web_site = web_site

    @property
    def etag(self):
        """Gets the etag of this EdFiCommunityProvider.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCommunityProvider.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCommunityProvider.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCommunityProvider.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCommunityProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCommunityProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCommunityProvider):
            return True

        return self.to_dict() != other.to_dict()
