# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitored_descriptor': 'str',
        'participation_descriptor': 'str',
        'proficiency_descriptor': 'str',
        'progress_descriptor': 'str',
        'school_year_type_reference': 'EdFiSchoolYearTypeReference'
    }

    attribute_map = {
        'monitored_descriptor': 'monitoredDescriptor',
        'participation_descriptor': 'participationDescriptor',
        'proficiency_descriptor': 'proficiencyDescriptor',
        'progress_descriptor': 'progressDescriptor',
        'school_year_type_reference': 'schoolYearTypeReference'
    }

    def __init__(self, monitored_descriptor=None, participation_descriptor=None, proficiency_descriptor=None, progress_descriptor=None, school_year_type_reference=None, _configuration=None):  # noqa: E501
        """EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._monitored_descriptor = None
        self._participation_descriptor = None
        self._proficiency_descriptor = None
        self._progress_descriptor = None
        self._school_year_type_reference = None
        self.discriminator = None

        if monitored_descriptor is not None:
            self.monitored_descriptor = monitored_descriptor
        if participation_descriptor is not None:
            self.participation_descriptor = participation_descriptor
        if proficiency_descriptor is not None:
            self.proficiency_descriptor = proficiency_descriptor
        if progress_descriptor is not None:
            self.progress_descriptor = progress_descriptor
        self.school_year_type_reference = school_year_type_reference

    @property
    def monitored_descriptor(self):
        """Gets the monitored_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501

        Student is monitored on content achievement who are no longer receiving services.  # noqa: E501

        :return: The monitored_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :rtype: str
        """
        return self._monitored_descriptor

    @monitored_descriptor.setter
    def monitored_descriptor(self, monitored_descriptor):
        """Sets the monitored_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.

        Student is monitored on content achievement who are no longer receiving services.  # noqa: E501

        :param monitored_descriptor: The monitored_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                monitored_descriptor is not None and len(monitored_descriptor) > 306):
            raise ValueError("Invalid value for `monitored_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._monitored_descriptor = monitored_descriptor

    @property
    def participation_descriptor(self):
        """Gets the participation_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501

        Field indicating the participation in the yearly English language assessment.  # noqa: E501

        :return: The participation_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :rtype: str
        """
        return self._participation_descriptor

    @participation_descriptor.setter
    def participation_descriptor(self, participation_descriptor):
        """Sets the participation_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.

        Field indicating the participation in the yearly English language assessment.  # noqa: E501

        :param participation_descriptor: The participation_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                participation_descriptor is not None and len(participation_descriptor) > 306):
            raise ValueError("Invalid value for `participation_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._participation_descriptor = participation_descriptor

    @property
    def proficiency_descriptor(self):
        """Gets the proficiency_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501

        The proficiency level for the yearly English language assessment.  # noqa: E501

        :return: The proficiency_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :rtype: str
        """
        return self._proficiency_descriptor

    @proficiency_descriptor.setter
    def proficiency_descriptor(self, proficiency_descriptor):
        """Sets the proficiency_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.

        The proficiency level for the yearly English language assessment.  # noqa: E501

        :param proficiency_descriptor: The proficiency_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                proficiency_descriptor is not None and len(proficiency_descriptor) > 306):
            raise ValueError("Invalid value for `proficiency_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._proficiency_descriptor = proficiency_descriptor

    @property
    def progress_descriptor(self):
        """Gets the progress_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501

        The yearly progress or growth from last year's assessment.  # noqa: E501

        :return: The progress_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :rtype: str
        """
        return self._progress_descriptor

    @progress_descriptor.setter
    def progress_descriptor(self, progress_descriptor):
        """Sets the progress_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.

        The yearly progress or growth from last year's assessment.  # noqa: E501

        :param progress_descriptor: The progress_descriptor of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                progress_descriptor is not None and len(progress_descriptor) > 306):
            raise ValueError("Invalid value for `progress_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._progress_descriptor = progress_descriptor

    @property
    def school_year_type_reference(self):
        """Gets the school_year_type_reference of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501


        :return: The school_year_type_reference of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :rtype: EdFiSchoolYearTypeReference
        """
        return self._school_year_type_reference

    @school_year_type_reference.setter
    def school_year_type_reference(self, school_year_type_reference):
        """Sets the school_year_type_reference of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.


        :param school_year_type_reference: The school_year_type_reference of this EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.  # noqa: E501
        :type: EdFiSchoolYearTypeReference
        """
        if self._configuration.client_side_validation and school_year_type_reference is None:
            raise ValueError("Invalid value for `school_year_type_reference`, must not be `None`")  # noqa: E501

        self._school_year_type_reference = school_year_type_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment):
            return True

        return self.to_dict() != other.to_dict()
