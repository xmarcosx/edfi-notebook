# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiInterventionStudyInterventionEffectiveness(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'diagnosis_descriptor': 'str',
        'grade_level_descriptor': 'str',
        'population_served_descriptor': 'str',
        'intervention_effectiveness_rating_descriptor': 'str',
        'improvement_index': 'int'
    }

    attribute_map = {
        'diagnosis_descriptor': 'diagnosisDescriptor',
        'grade_level_descriptor': 'gradeLevelDescriptor',
        'population_served_descriptor': 'populationServedDescriptor',
        'intervention_effectiveness_rating_descriptor': 'interventionEffectivenessRatingDescriptor',
        'improvement_index': 'improvementIndex'
    }

    def __init__(self, diagnosis_descriptor=None, grade_level_descriptor=None, population_served_descriptor=None, intervention_effectiveness_rating_descriptor=None, improvement_index=None, _configuration=None):  # noqa: E501
        """EdFiInterventionStudyInterventionEffectiveness - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._diagnosis_descriptor = None
        self._grade_level_descriptor = None
        self._population_served_descriptor = None
        self._intervention_effectiveness_rating_descriptor = None
        self._improvement_index = None
        self.discriminator = None

        self.diagnosis_descriptor = diagnosis_descriptor
        self.grade_level_descriptor = grade_level_descriptor
        self.population_served_descriptor = population_served_descriptor
        self.intervention_effectiveness_rating_descriptor = intervention_effectiveness_rating_descriptor
        if improvement_index is not None:
            self.improvement_index = improvement_index

    @property
    def diagnosis_descriptor(self):
        """Gets the diagnosis_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501

        Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.  # noqa: E501

        :return: The diagnosis_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis_descriptor

    @diagnosis_descriptor.setter
    def diagnosis_descriptor(self, diagnosis_descriptor):
        """Sets the diagnosis_descriptor of this EdFiInterventionStudyInterventionEffectiveness.

        Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.  # noqa: E501

        :param diagnosis_descriptor: The diagnosis_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and diagnosis_descriptor is None:
            raise ValueError("Invalid value for `diagnosis_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                diagnosis_descriptor is not None and len(diagnosis_descriptor) > 306):
            raise ValueError("Invalid value for `diagnosis_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._diagnosis_descriptor = diagnosis_descriptor

    @property
    def grade_level_descriptor(self):
        """Gets the grade_level_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501

        Grade level for which effectiveness is measured.  # noqa: E501

        :return: The grade_level_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :rtype: str
        """
        return self._grade_level_descriptor

    @grade_level_descriptor.setter
    def grade_level_descriptor(self, grade_level_descriptor):
        """Sets the grade_level_descriptor of this EdFiInterventionStudyInterventionEffectiveness.

        Grade level for which effectiveness is measured.  # noqa: E501

        :param grade_level_descriptor: The grade_level_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and grade_level_descriptor is None:
            raise ValueError("Invalid value for `grade_level_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                grade_level_descriptor is not None and len(grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._grade_level_descriptor = grade_level_descriptor

    @property
    def population_served_descriptor(self):
        """Gets the population_served_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501

        Population for which effectiveness is measured.  # noqa: E501

        :return: The population_served_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :rtype: str
        """
        return self._population_served_descriptor

    @population_served_descriptor.setter
    def population_served_descriptor(self, population_served_descriptor):
        """Sets the population_served_descriptor of this EdFiInterventionStudyInterventionEffectiveness.

        Population for which effectiveness is measured.  # noqa: E501

        :param population_served_descriptor: The population_served_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and population_served_descriptor is None:
            raise ValueError("Invalid value for `population_served_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                population_served_descriptor is not None and len(population_served_descriptor) > 306):
            raise ValueError("Invalid value for `population_served_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._population_served_descriptor = population_served_descriptor

    @property
    def intervention_effectiveness_rating_descriptor(self):
        """Gets the intervention_effectiveness_rating_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501

        An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.  # noqa: E501

        :return: The intervention_effectiveness_rating_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :rtype: str
        """
        return self._intervention_effectiveness_rating_descriptor

    @intervention_effectiveness_rating_descriptor.setter
    def intervention_effectiveness_rating_descriptor(self, intervention_effectiveness_rating_descriptor):
        """Sets the intervention_effectiveness_rating_descriptor of this EdFiInterventionStudyInterventionEffectiveness.

        An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.  # noqa: E501

        :param intervention_effectiveness_rating_descriptor: The intervention_effectiveness_rating_descriptor of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and intervention_effectiveness_rating_descriptor is None:
            raise ValueError("Invalid value for `intervention_effectiveness_rating_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                intervention_effectiveness_rating_descriptor is not None and len(intervention_effectiveness_rating_descriptor) > 306):
            raise ValueError("Invalid value for `intervention_effectiveness_rating_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._intervention_effectiveness_rating_descriptor = intervention_effectiveness_rating_descriptor

    @property
    def improvement_index(self):
        """Gets the improvement_index of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501

        Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.  # noqa: E501

        :return: The improvement_index of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :rtype: int
        """
        return self._improvement_index

    @improvement_index.setter
    def improvement_index(self, improvement_index):
        """Sets the improvement_index of this EdFiInterventionStudyInterventionEffectiveness.

        Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.  # noqa: E501

        :param improvement_index: The improvement_index of this EdFiInterventionStudyInterventionEffectiveness.  # noqa: E501
        :type: int
        """

        self._improvement_index = improvement_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiInterventionStudyInterventionEffectiveness, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiInterventionStudyInterventionEffectiveness):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiInterventionStudyInterventionEffectiveness):
            return True

        return self.to_dict() != other.to_dict()
