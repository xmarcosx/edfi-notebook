# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiClassPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'class_period_name': 'str',
        'school_reference': 'EdFiSchoolReference',
        'meeting_times': 'list[EdFiClassPeriodMeetingTime]',
        'official_attendance_period': 'bool',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'class_period_name': 'classPeriodName',
        'school_reference': 'schoolReference',
        'meeting_times': 'meetingTimes',
        'official_attendance_period': 'officialAttendancePeriod',
        'etag': '_etag'
    }

    def __init__(self, id=None, class_period_name=None, school_reference=None, meeting_times=None, official_attendance_period=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiClassPeriod - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._class_period_name = None
        self._school_reference = None
        self._meeting_times = None
        self._official_attendance_period = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.class_period_name = class_period_name
        self.school_reference = school_reference
        if meeting_times is not None:
            self.meeting_times = meeting_times
        if official_attendance_period is not None:
            self.official_attendance_period = official_attendance_period
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiClassPeriod.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiClassPeriod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiClassPeriod.

          # noqa: E501

        :param id: The id of this EdFiClassPeriod.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def class_period_name(self):
        """Gets the class_period_name of this EdFiClassPeriod.  # noqa: E501

        An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).  # noqa: E501

        :return: The class_period_name of this EdFiClassPeriod.  # noqa: E501
        :rtype: str
        """
        return self._class_period_name

    @class_period_name.setter
    def class_period_name(self, class_period_name):
        """Sets the class_period_name of this EdFiClassPeriod.

        An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).  # noqa: E501

        :param class_period_name: The class_period_name of this EdFiClassPeriod.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and class_period_name is None:
            raise ValueError("Invalid value for `class_period_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                class_period_name is not None and len(class_period_name) > 60):
            raise ValueError("Invalid value for `class_period_name`, length must be less than or equal to `60`")  # noqa: E501

        self._class_period_name = class_period_name

    @property
    def school_reference(self):
        """Gets the school_reference of this EdFiClassPeriod.  # noqa: E501


        :return: The school_reference of this EdFiClassPeriod.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._school_reference

    @school_reference.setter
    def school_reference(self, school_reference):
        """Sets the school_reference of this EdFiClassPeriod.


        :param school_reference: The school_reference of this EdFiClassPeriod.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and school_reference is None:
            raise ValueError("Invalid value for `school_reference`, must not be `None`")  # noqa: E501

        self._school_reference = school_reference

    @property
    def meeting_times(self):
        """Gets the meeting_times of this EdFiClassPeriod.  # noqa: E501

        An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period.  # noqa: E501

        :return: The meeting_times of this EdFiClassPeriod.  # noqa: E501
        :rtype: list[EdFiClassPeriodMeetingTime]
        """
        return self._meeting_times

    @meeting_times.setter
    def meeting_times(self, meeting_times):
        """Sets the meeting_times of this EdFiClassPeriod.

        An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period.  # noqa: E501

        :param meeting_times: The meeting_times of this EdFiClassPeriod.  # noqa: E501
        :type: list[EdFiClassPeriodMeetingTime]
        """

        self._meeting_times = meeting_times

    @property
    def official_attendance_period(self):
        """Gets the official_attendance_period of this EdFiClassPeriod.  # noqa: E501

        Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a Section.  # noqa: E501

        :return: The official_attendance_period of this EdFiClassPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._official_attendance_period

    @official_attendance_period.setter
    def official_attendance_period(self, official_attendance_period):
        """Sets the official_attendance_period of this EdFiClassPeriod.

        Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a Section.  # noqa: E501

        :param official_attendance_period: The official_attendance_period of this EdFiClassPeriod.  # noqa: E501
        :type: bool
        """

        self._official_attendance_period = official_attendance_period

    @property
    def etag(self):
        """Gets the etag of this EdFiClassPeriod.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiClassPeriod.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiClassPeriod.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiClassPeriod.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiClassPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiClassPeriod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiClassPeriod):
            return True

        return self.to_dict() != other.to_dict()
