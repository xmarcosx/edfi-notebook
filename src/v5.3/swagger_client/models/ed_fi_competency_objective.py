# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiCompetencyObjective(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'objective': 'str',
        'objective_grade_level_descriptor': 'str',
        'education_organization_reference': 'EdFiEducationOrganizationReference',
        'competency_objective_id': 'str',
        'description': 'str',
        'success_criteria': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'objective': 'objective',
        'objective_grade_level_descriptor': 'objectiveGradeLevelDescriptor',
        'education_organization_reference': 'educationOrganizationReference',
        'competency_objective_id': 'competencyObjectiveId',
        'description': 'description',
        'success_criteria': 'successCriteria',
        'etag': '_etag'
    }

    def __init__(self, id=None, objective=None, objective_grade_level_descriptor=None, education_organization_reference=None, competency_objective_id=None, description=None, success_criteria=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiCompetencyObjective - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._objective = None
        self._objective_grade_level_descriptor = None
        self._education_organization_reference = None
        self._competency_objective_id = None
        self._description = None
        self._success_criteria = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.objective = objective
        self.objective_grade_level_descriptor = objective_grade_level_descriptor
        self.education_organization_reference = education_organization_reference
        if competency_objective_id is not None:
            self.competency_objective_id = competency_objective_id
        if description is not None:
            self.description = description
        if success_criteria is not None:
            self.success_criteria = success_criteria
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiCompetencyObjective.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiCompetencyObjective.

          # noqa: E501

        :param id: The id of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def objective(self):
        """Gets the objective of this EdFiCompetencyObjective.  # noqa: E501

        The designated title of the CompetencyObjective.  # noqa: E501

        :return: The objective of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this EdFiCompetencyObjective.

        The designated title of the CompetencyObjective.  # noqa: E501

        :param objective: The objective of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and objective is None:
            raise ValueError("Invalid value for `objective`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                objective is not None and len(objective) > 60):
            raise ValueError("Invalid value for `objective`, length must be less than or equal to `60`")  # noqa: E501

        self._objective = objective

    @property
    def objective_grade_level_descriptor(self):
        """Gets the objective_grade_level_descriptor of this EdFiCompetencyObjective.  # noqa: E501

        The grade level for which the CompetencyObjective is targeted.  # noqa: E501

        :return: The objective_grade_level_descriptor of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._objective_grade_level_descriptor

    @objective_grade_level_descriptor.setter
    def objective_grade_level_descriptor(self, objective_grade_level_descriptor):
        """Sets the objective_grade_level_descriptor of this EdFiCompetencyObjective.

        The grade level for which the CompetencyObjective is targeted.  # noqa: E501

        :param objective_grade_level_descriptor: The objective_grade_level_descriptor of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and objective_grade_level_descriptor is None:
            raise ValueError("Invalid value for `objective_grade_level_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                objective_grade_level_descriptor is not None and len(objective_grade_level_descriptor) > 306):
            raise ValueError("Invalid value for `objective_grade_level_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._objective_grade_level_descriptor = objective_grade_level_descriptor

    @property
    def education_organization_reference(self):
        """Gets the education_organization_reference of this EdFiCompetencyObjective.  # noqa: E501


        :return: The education_organization_reference of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: EdFiEducationOrganizationReference
        """
        return self._education_organization_reference

    @education_organization_reference.setter
    def education_organization_reference(self, education_organization_reference):
        """Sets the education_organization_reference of this EdFiCompetencyObjective.


        :param education_organization_reference: The education_organization_reference of this EdFiCompetencyObjective.  # noqa: E501
        :type: EdFiEducationOrganizationReference
        """
        if self._configuration.client_side_validation and education_organization_reference is None:
            raise ValueError("Invalid value for `education_organization_reference`, must not be `None`")  # noqa: E501

        self._education_organization_reference = education_organization_reference

    @property
    def competency_objective_id(self):
        """Gets the competency_objective_id of this EdFiCompetencyObjective.  # noqa: E501

        The Identifier for the CompetencyObjective.  # noqa: E501

        :return: The competency_objective_id of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._competency_objective_id

    @competency_objective_id.setter
    def competency_objective_id(self, competency_objective_id):
        """Sets the competency_objective_id of this EdFiCompetencyObjective.

        The Identifier for the CompetencyObjective.  # noqa: E501

        :param competency_objective_id: The competency_objective_id of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                competency_objective_id is not None and len(competency_objective_id) > 60):
            raise ValueError("Invalid value for `competency_objective_id`, length must be less than or equal to `60`")  # noqa: E501

        self._competency_objective_id = competency_objective_id

    @property
    def description(self):
        """Gets the description of this EdFiCompetencyObjective.  # noqa: E501

        The description of the student competency objective.  # noqa: E501

        :return: The description of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdFiCompetencyObjective.

        The description of the student competency objective.  # noqa: E501

        :param description: The description of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def success_criteria(self):
        """Gets the success_criteria of this EdFiCompetencyObjective.  # noqa: E501

        One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.  # noqa: E501

        :return: The success_criteria of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._success_criteria

    @success_criteria.setter
    def success_criteria(self, success_criteria):
        """Sets the success_criteria of this EdFiCompetencyObjective.

        One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.  # noqa: E501

        :param success_criteria: The success_criteria of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                success_criteria is not None and len(success_criteria) > 150):
            raise ValueError("Invalid value for `success_criteria`, length must be less than or equal to `150`")  # noqa: E501

        self._success_criteria = success_criteria

    @property
    def etag(self):
        """Gets the etag of this EdFiCompetencyObjective.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiCompetencyObjective.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiCompetencyObjective.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiCompetencyObjective.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiCompetencyObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiCompetencyObjective):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiCompetencyObjective):
            return True

        return self.to_dict() != other.to_dict()
