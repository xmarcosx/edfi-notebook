# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiGraduationPlanCreditsByCreditCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_category_descriptor': 'str',
        'credit_type_descriptor': 'str',
        'credit_conversion': 'float',
        'credits': 'float'
    }

    attribute_map = {
        'credit_category_descriptor': 'creditCategoryDescriptor',
        'credit_type_descriptor': 'creditTypeDescriptor',
        'credit_conversion': 'creditConversion',
        'credits': 'credits'
    }

    def __init__(self, credit_category_descriptor=None, credit_type_descriptor=None, credit_conversion=None, credits=None, _configuration=None):  # noqa: E501
        """EdFiGraduationPlanCreditsByCreditCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._credit_category_descriptor = None
        self._credit_type_descriptor = None
        self._credit_conversion = None
        self._credits = None
        self.discriminator = None

        self.credit_category_descriptor = credit_category_descriptor
        if credit_type_descriptor is not None:
            self.credit_type_descriptor = credit_type_descriptor
        if credit_conversion is not None:
            self.credit_conversion = credit_conversion
        self.credits = credits

    @property
    def credit_category_descriptor(self):
        """Gets the credit_category_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501

        A categorization for the course transcript credits awarded in the course transcript.  # noqa: E501

        :return: The credit_category_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :rtype: str
        """
        return self._credit_category_descriptor

    @credit_category_descriptor.setter
    def credit_category_descriptor(self, credit_category_descriptor):
        """Sets the credit_category_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.

        A categorization for the course transcript credits awarded in the course transcript.  # noqa: E501

        :param credit_category_descriptor: The credit_category_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credit_category_descriptor is None:
            raise ValueError("Invalid value for `credit_category_descriptor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credit_category_descriptor is not None and len(credit_category_descriptor) > 306):
            raise ValueError("Invalid value for `credit_category_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credit_category_descriptor = credit_category_descriptor

    @property
    def credit_type_descriptor(self):
        """Gets the credit_type_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The credit_type_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :rtype: str
        """
        return self._credit_type_descriptor

    @credit_type_descriptor.setter
    def credit_type_descriptor(self, credit_type_descriptor):
        """Sets the credit_type_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.

        The type of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param credit_type_descriptor: The credit_type_descriptor of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                credit_type_descriptor is not None and len(credit_type_descriptor) > 306):
            raise ValueError("Invalid value for `credit_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._credit_type_descriptor = credit_type_descriptor

    @property
    def credit_conversion(self):
        """Gets the credit_conversion of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :return: The credit_conversion of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :rtype: float
        """
        return self._credit_conversion

    @credit_conversion.setter
    def credit_conversion(self, credit_conversion):
        """Sets the credit_conversion of this EdFiGraduationPlanCreditsByCreditCategory.

        Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.  # noqa: E501

        :param credit_conversion: The credit_conversion of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :type: float
        """

        self._credit_conversion = credit_conversion

    @property
    def credits(self):
        """Gets the credits of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :return: The credits of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this EdFiGraduationPlanCreditsByCreditCategory.

        The value of credits or units of value awarded for the completion of a course.  # noqa: E501

        :param credits: The credits of this EdFiGraduationPlanCreditsByCreditCategory.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")  # noqa: E501

        self._credits = credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiGraduationPlanCreditsByCreditCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiGraduationPlanCreditsByCreditCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiGraduationPlanCreditsByCreditCategory):
            return True

        return self.to_dict() != other.to_dict()
