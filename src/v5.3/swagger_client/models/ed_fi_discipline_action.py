# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiDisciplineAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'discipline_action_identifier': 'str',
        'discipline_date': 'date',
        'disciplines': 'list[EdFiDisciplineActionDiscipline]',
        'student_discipline_incident_associations': 'list[EdFiDisciplineActionStudentDisciplineIncidentAssociation]',
        'assignment_school_reference': 'EdFiSchoolReference',
        'responsibility_school_reference': 'EdFiSchoolReference',
        'student_reference': 'EdFiStudentReference',
        'actual_discipline_action_length': 'float',
        'discipline_action_length': 'float',
        'discipline_action_length_difference_reason_descriptor': 'str',
        'iep_placement_meeting_indicator': 'bool',
        'received_education_services_during_expulsion': 'bool',
        'related_to_zero_tolerance_policy': 'bool',
        'staffs': 'list[EdFiDisciplineActionStaff]',
        'student_discipline_incident_behavior_associations': 'list[EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'discipline_action_identifier': 'disciplineActionIdentifier',
        'discipline_date': 'disciplineDate',
        'disciplines': 'disciplines',
        'student_discipline_incident_associations': 'studentDisciplineIncidentAssociations',
        'assignment_school_reference': 'assignmentSchoolReference',
        'responsibility_school_reference': 'responsibilitySchoolReference',
        'student_reference': 'studentReference',
        'actual_discipline_action_length': 'actualDisciplineActionLength',
        'discipline_action_length': 'disciplineActionLength',
        'discipline_action_length_difference_reason_descriptor': 'disciplineActionLengthDifferenceReasonDescriptor',
        'iep_placement_meeting_indicator': 'iepPlacementMeetingIndicator',
        'received_education_services_during_expulsion': 'receivedEducationServicesDuringExpulsion',
        'related_to_zero_tolerance_policy': 'relatedToZeroTolerancePolicy',
        'staffs': 'staffs',
        'student_discipline_incident_behavior_associations': 'studentDisciplineIncidentBehaviorAssociations',
        'etag': '_etag'
    }

    def __init__(self, id=None, discipline_action_identifier=None, discipline_date=None, disciplines=None, student_discipline_incident_associations=None, assignment_school_reference=None, responsibility_school_reference=None, student_reference=None, actual_discipline_action_length=None, discipline_action_length=None, discipline_action_length_difference_reason_descriptor=None, iep_placement_meeting_indicator=None, received_education_services_during_expulsion=None, related_to_zero_tolerance_policy=None, staffs=None, student_discipline_incident_behavior_associations=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiDisciplineAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._discipline_action_identifier = None
        self._discipline_date = None
        self._disciplines = None
        self._student_discipline_incident_associations = None
        self._assignment_school_reference = None
        self._responsibility_school_reference = None
        self._student_reference = None
        self._actual_discipline_action_length = None
        self._discipline_action_length = None
        self._discipline_action_length_difference_reason_descriptor = None
        self._iep_placement_meeting_indicator = None
        self._received_education_services_during_expulsion = None
        self._related_to_zero_tolerance_policy = None
        self._staffs = None
        self._student_discipline_incident_behavior_associations = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.discipline_action_identifier = discipline_action_identifier
        self.discipline_date = discipline_date
        self.disciplines = disciplines
        self.student_discipline_incident_associations = student_discipline_incident_associations
        if assignment_school_reference is not None:
            self.assignment_school_reference = assignment_school_reference
        self.responsibility_school_reference = responsibility_school_reference
        self.student_reference = student_reference
        if actual_discipline_action_length is not None:
            self.actual_discipline_action_length = actual_discipline_action_length
        if discipline_action_length is not None:
            self.discipline_action_length = discipline_action_length
        if discipline_action_length_difference_reason_descriptor is not None:
            self.discipline_action_length_difference_reason_descriptor = discipline_action_length_difference_reason_descriptor
        if iep_placement_meeting_indicator is not None:
            self.iep_placement_meeting_indicator = iep_placement_meeting_indicator
        if received_education_services_during_expulsion is not None:
            self.received_education_services_during_expulsion = received_education_services_during_expulsion
        if related_to_zero_tolerance_policy is not None:
            self.related_to_zero_tolerance_policy = related_to_zero_tolerance_policy
        if staffs is not None:
            self.staffs = staffs
        if student_discipline_incident_behavior_associations is not None:
            self.student_discipline_incident_behavior_associations = student_discipline_incident_behavior_associations
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiDisciplineAction.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiDisciplineAction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiDisciplineAction.

          # noqa: E501

        :param id: The id of this EdFiDisciplineAction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def discipline_action_identifier(self):
        """Gets the discipline_action_identifier of this EdFiDisciplineAction.  # noqa: E501

        Identifier assigned by the education organization to the DisciplineAction.  # noqa: E501

        :return: The discipline_action_identifier of this EdFiDisciplineAction.  # noqa: E501
        :rtype: str
        """
        return self._discipline_action_identifier

    @discipline_action_identifier.setter
    def discipline_action_identifier(self, discipline_action_identifier):
        """Sets the discipline_action_identifier of this EdFiDisciplineAction.

        Identifier assigned by the education organization to the DisciplineAction.  # noqa: E501

        :param discipline_action_identifier: The discipline_action_identifier of this EdFiDisciplineAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and discipline_action_identifier is None:
            raise ValueError("Invalid value for `discipline_action_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                discipline_action_identifier is not None and len(discipline_action_identifier) > 20):
            raise ValueError("Invalid value for `discipline_action_identifier`, length must be less than or equal to `20`")  # noqa: E501

        self._discipline_action_identifier = discipline_action_identifier

    @property
    def discipline_date(self):
        """Gets the discipline_date of this EdFiDisciplineAction.  # noqa: E501

        The date of the DisciplineAction.  # noqa: E501

        :return: The discipline_date of this EdFiDisciplineAction.  # noqa: E501
        :rtype: date
        """
        return self._discipline_date

    @discipline_date.setter
    def discipline_date(self, discipline_date):
        """Sets the discipline_date of this EdFiDisciplineAction.

        The date of the DisciplineAction.  # noqa: E501

        :param discipline_date: The discipline_date of this EdFiDisciplineAction.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and discipline_date is None:
            raise ValueError("Invalid value for `discipline_date`, must not be `None`")  # noqa: E501

        self._discipline_date = discipline_date

    @property
    def disciplines(self):
        """Gets the disciplines of this EdFiDisciplineAction.  # noqa: E501

        An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.  # noqa: E501

        :return: The disciplines of this EdFiDisciplineAction.  # noqa: E501
        :rtype: list[EdFiDisciplineActionDiscipline]
        """
        return self._disciplines

    @disciplines.setter
    def disciplines(self, disciplines):
        """Sets the disciplines of this EdFiDisciplineAction.

        An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.  # noqa: E501

        :param disciplines: The disciplines of this EdFiDisciplineAction.  # noqa: E501
        :type: list[EdFiDisciplineActionDiscipline]
        """
        if self._configuration.client_side_validation and disciplines is None:
            raise ValueError("Invalid value for `disciplines`, must not be `None`")  # noqa: E501

        self._disciplines = disciplines

    @property
    def student_discipline_incident_associations(self):
        """Gets the student_discipline_incident_associations of this EdFiDisciplineAction.  # noqa: E501

        An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction.  # noqa: E501

        :return: The student_discipline_incident_associations of this EdFiDisciplineAction.  # noqa: E501
        :rtype: list[EdFiDisciplineActionStudentDisciplineIncidentAssociation]
        """
        return self._student_discipline_incident_associations

    @student_discipline_incident_associations.setter
    def student_discipline_incident_associations(self, student_discipline_incident_associations):
        """Sets the student_discipline_incident_associations of this EdFiDisciplineAction.

        An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction.  # noqa: E501

        :param student_discipline_incident_associations: The student_discipline_incident_associations of this EdFiDisciplineAction.  # noqa: E501
        :type: list[EdFiDisciplineActionStudentDisciplineIncidentAssociation]
        """
        if self._configuration.client_side_validation and student_discipline_incident_associations is None:
            raise ValueError("Invalid value for `student_discipline_incident_associations`, must not be `None`")  # noqa: E501

        self._student_discipline_incident_associations = student_discipline_incident_associations

    @property
    def assignment_school_reference(self):
        """Gets the assignment_school_reference of this EdFiDisciplineAction.  # noqa: E501


        :return: The assignment_school_reference of this EdFiDisciplineAction.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._assignment_school_reference

    @assignment_school_reference.setter
    def assignment_school_reference(self, assignment_school_reference):
        """Sets the assignment_school_reference of this EdFiDisciplineAction.


        :param assignment_school_reference: The assignment_school_reference of this EdFiDisciplineAction.  # noqa: E501
        :type: EdFiSchoolReference
        """

        self._assignment_school_reference = assignment_school_reference

    @property
    def responsibility_school_reference(self):
        """Gets the responsibility_school_reference of this EdFiDisciplineAction.  # noqa: E501


        :return: The responsibility_school_reference of this EdFiDisciplineAction.  # noqa: E501
        :rtype: EdFiSchoolReference
        """
        return self._responsibility_school_reference

    @responsibility_school_reference.setter
    def responsibility_school_reference(self, responsibility_school_reference):
        """Sets the responsibility_school_reference of this EdFiDisciplineAction.


        :param responsibility_school_reference: The responsibility_school_reference of this EdFiDisciplineAction.  # noqa: E501
        :type: EdFiSchoolReference
        """
        if self._configuration.client_side_validation and responsibility_school_reference is None:
            raise ValueError("Invalid value for `responsibility_school_reference`, must not be `None`")  # noqa: E501

        self._responsibility_school_reference = responsibility_school_reference

    @property
    def student_reference(self):
        """Gets the student_reference of this EdFiDisciplineAction.  # noqa: E501


        :return: The student_reference of this EdFiDisciplineAction.  # noqa: E501
        :rtype: EdFiStudentReference
        """
        return self._student_reference

    @student_reference.setter
    def student_reference(self, student_reference):
        """Sets the student_reference of this EdFiDisciplineAction.


        :param student_reference: The student_reference of this EdFiDisciplineAction.  # noqa: E501
        :type: EdFiStudentReference
        """
        if self._configuration.client_side_validation and student_reference is None:
            raise ValueError("Invalid value for `student_reference`, must not be `None`")  # noqa: E501

        self._student_reference = student_reference

    @property
    def actual_discipline_action_length(self):
        """Gets the actual_discipline_action_length of this EdFiDisciplineAction.  # noqa: E501

        Indicates the actual length in school days of a student's disciplinary assignment.  # noqa: E501

        :return: The actual_discipline_action_length of this EdFiDisciplineAction.  # noqa: E501
        :rtype: float
        """
        return self._actual_discipline_action_length

    @actual_discipline_action_length.setter
    def actual_discipline_action_length(self, actual_discipline_action_length):
        """Sets the actual_discipline_action_length of this EdFiDisciplineAction.

        Indicates the actual length in school days of a student's disciplinary assignment.  # noqa: E501

        :param actual_discipline_action_length: The actual_discipline_action_length of this EdFiDisciplineAction.  # noqa: E501
        :type: float
        """

        self._actual_discipline_action_length = actual_discipline_action_length

    @property
    def discipline_action_length(self):
        """Gets the discipline_action_length of this EdFiDisciplineAction.  # noqa: E501

        The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.  # noqa: E501

        :return: The discipline_action_length of this EdFiDisciplineAction.  # noqa: E501
        :rtype: float
        """
        return self._discipline_action_length

    @discipline_action_length.setter
    def discipline_action_length(self, discipline_action_length):
        """Sets the discipline_action_length of this EdFiDisciplineAction.

        The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.  # noqa: E501

        :param discipline_action_length: The discipline_action_length of this EdFiDisciplineAction.  # noqa: E501
        :type: float
        """

        self._discipline_action_length = discipline_action_length

    @property
    def discipline_action_length_difference_reason_descriptor(self):
        """Gets the discipline_action_length_difference_reason_descriptor of this EdFiDisciplineAction.  # noqa: E501

        Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment.  # noqa: E501

        :return: The discipline_action_length_difference_reason_descriptor of this EdFiDisciplineAction.  # noqa: E501
        :rtype: str
        """
        return self._discipline_action_length_difference_reason_descriptor

    @discipline_action_length_difference_reason_descriptor.setter
    def discipline_action_length_difference_reason_descriptor(self, discipline_action_length_difference_reason_descriptor):
        """Sets the discipline_action_length_difference_reason_descriptor of this EdFiDisciplineAction.

        Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment.  # noqa: E501

        :param discipline_action_length_difference_reason_descriptor: The discipline_action_length_difference_reason_descriptor of this EdFiDisciplineAction.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                discipline_action_length_difference_reason_descriptor is not None and len(discipline_action_length_difference_reason_descriptor) > 306):
            raise ValueError("Invalid value for `discipline_action_length_difference_reason_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._discipline_action_length_difference_reason_descriptor = discipline_action_length_difference_reason_descriptor

    @property
    def iep_placement_meeting_indicator(self):
        """Gets the iep_placement_meeting_indicator of this EdFiDisciplineAction.  # noqa: E501

        An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student's Individualized Education Program (IEP) team to determine appropriate placement.  # noqa: E501

        :return: The iep_placement_meeting_indicator of this EdFiDisciplineAction.  # noqa: E501
        :rtype: bool
        """
        return self._iep_placement_meeting_indicator

    @iep_placement_meeting_indicator.setter
    def iep_placement_meeting_indicator(self, iep_placement_meeting_indicator):
        """Sets the iep_placement_meeting_indicator of this EdFiDisciplineAction.

        An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student's Individualized Education Program (IEP) team to determine appropriate placement.  # noqa: E501

        :param iep_placement_meeting_indicator: The iep_placement_meeting_indicator of this EdFiDisciplineAction.  # noqa: E501
        :type: bool
        """

        self._iep_placement_meeting_indicator = iep_placement_meeting_indicator

    @property
    def received_education_services_during_expulsion(self):
        """Gets the received_education_services_during_expulsion of this EdFiDisciplineAction.  # noqa: E501

        An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.  # noqa: E501

        :return: The received_education_services_during_expulsion of this EdFiDisciplineAction.  # noqa: E501
        :rtype: bool
        """
        return self._received_education_services_during_expulsion

    @received_education_services_during_expulsion.setter
    def received_education_services_during_expulsion(self, received_education_services_during_expulsion):
        """Sets the received_education_services_during_expulsion of this EdFiDisciplineAction.

        An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.  # noqa: E501

        :param received_education_services_during_expulsion: The received_education_services_during_expulsion of this EdFiDisciplineAction.  # noqa: E501
        :type: bool
        """

        self._received_education_services_during_expulsion = received_education_services_during_expulsion

    @property
    def related_to_zero_tolerance_policy(self):
        """Gets the related_to_zero_tolerance_policy of this EdFiDisciplineAction.  # noqa: E501

        An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.  # noqa: E501

        :return: The related_to_zero_tolerance_policy of this EdFiDisciplineAction.  # noqa: E501
        :rtype: bool
        """
        return self._related_to_zero_tolerance_policy

    @related_to_zero_tolerance_policy.setter
    def related_to_zero_tolerance_policy(self, related_to_zero_tolerance_policy):
        """Sets the related_to_zero_tolerance_policy of this EdFiDisciplineAction.

        An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.  # noqa: E501

        :param related_to_zero_tolerance_policy: The related_to_zero_tolerance_policy of this EdFiDisciplineAction.  # noqa: E501
        :type: bool
        """

        self._related_to_zero_tolerance_policy = related_to_zero_tolerance_policy

    @property
    def staffs(self):
        """Gets the staffs of this EdFiDisciplineAction.  # noqa: E501

        An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction.  # noqa: E501

        :return: The staffs of this EdFiDisciplineAction.  # noqa: E501
        :rtype: list[EdFiDisciplineActionStaff]
        """
        return self._staffs

    @staffs.setter
    def staffs(self, staffs):
        """Sets the staffs of this EdFiDisciplineAction.

        An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction.  # noqa: E501

        :param staffs: The staffs of this EdFiDisciplineAction.  # noqa: E501
        :type: list[EdFiDisciplineActionStaff]
        """

        self._staffs = staffs

    @property
    def student_discipline_incident_behavior_associations(self):
        """Gets the student_discipline_incident_behavior_associations of this EdFiDisciplineAction.  # noqa: E501

        An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.  # noqa: E501

        :return: The student_discipline_incident_behavior_associations of this EdFiDisciplineAction.  # noqa: E501
        :rtype: list[EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation]
        """
        return self._student_discipline_incident_behavior_associations

    @student_discipline_incident_behavior_associations.setter
    def student_discipline_incident_behavior_associations(self, student_discipline_incident_behavior_associations):
        """Sets the student_discipline_incident_behavior_associations of this EdFiDisciplineAction.

        An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.  # noqa: E501

        :param student_discipline_incident_behavior_associations: The student_discipline_incident_behavior_associations of this EdFiDisciplineAction.  # noqa: E501
        :type: list[EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation]
        """

        self._student_discipline_incident_behavior_associations = student_discipline_incident_behavior_associations

    @property
    def etag(self):
        """Gets the etag of this EdFiDisciplineAction.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiDisciplineAction.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiDisciplineAction.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiDisciplineAction.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiDisciplineAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiDisciplineAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiDisciplineAction):
            return True

        return self.to_dict() != other.to_dict()
