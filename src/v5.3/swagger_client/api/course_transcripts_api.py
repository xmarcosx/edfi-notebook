# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CourseTranscriptsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_course_transcript_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_transcript_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_course_transcript_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_course_transcript_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_course_transcript_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_transcript_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_course_transcript_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_course_transcript_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletes_course_transcripts(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_course_transcripts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_course_transcripts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deletes_course_transcripts_with_http_info(**kwargs)  # noqa: E501
            return data

    def deletes_course_transcripts_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_course_transcripts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_course_transcripts" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_course_transcripts`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_course_transcripts`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts/deletes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeletedResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_course_transcripts(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_transcripts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str course_attempt_result_descriptor: The result from the student's attempt to take the course, for example:        Pass        Fail        Incomplete        Withdrawn.
        :param str course_code: A unique alphanumeric code assigned to a course.
        :param int course_education_organization_id: The identifier assigned to an education organization.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param int school_year: The identifier for the school year.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param str term_descriptor: The term for the session during the school year.
        :param int external_education_organization_id: The identifier assigned to an education organization.
        :param str course_repeat_code_descriptor: Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.
        :param str attempted_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str earned_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str when_taken_grade_level_descriptor: Student's grade level at time of course.
        :param str method_credit_earned_descriptor: The method the credits were earned (e.g., Classroom, Examination, Transfer).
        :param str alternative_course_code: The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        :param str alternative_course_title: The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        :param str assigning_organization_identification_code: The organization code or name assigning the course identification code.
        :param float attempted_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float attempted_credits: The value of credits or units of value awarded for the completion of a course.
        :param str course_catalog_url: The URL for the course catalog that defines the course identification code.
        :param str course_title: The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        :param float earned_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float earned_credits: The value of credits or units of value awarded for the completion of a course.
        :param str external_education_organization_name_of_institution: Name of the external institution where the student completed the course; to be used only when the reference ExternalEducationOrganization is not available.
        :param str final_letter_grade_earned: The final indicator of student performance in a class as submitted by the instructor.
        :param float final_numeric_grade_earned: The final indicator of student performance in a class as submitted by the instructor.
        :param str id: 
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiCourseTranscript]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_course_transcripts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_course_transcripts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_course_transcripts_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_transcripts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str course_attempt_result_descriptor: The result from the student's attempt to take the course, for example:        Pass        Fail        Incomplete        Withdrawn.
        :param str course_code: A unique alphanumeric code assigned to a course.
        :param int course_education_organization_id: The identifier assigned to an education organization.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param int school_year: The identifier for the school year.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param str term_descriptor: The term for the session during the school year.
        :param int external_education_organization_id: The identifier assigned to an education organization.
        :param str course_repeat_code_descriptor: Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.
        :param str attempted_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str earned_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str when_taken_grade_level_descriptor: Student's grade level at time of course.
        :param str method_credit_earned_descriptor: The method the credits were earned (e.g., Classroom, Examination, Transfer).
        :param str alternative_course_code: The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        :param str alternative_course_title: The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        :param str assigning_organization_identification_code: The organization code or name assigning the course identification code.
        :param float attempted_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float attempted_credits: The value of credits or units of value awarded for the completion of a course.
        :param str course_catalog_url: The URL for the course catalog that defines the course identification code.
        :param str course_title: The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        :param float earned_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float earned_credits: The value of credits or units of value awarded for the completion of a course.
        :param str external_education_organization_name_of_institution: Name of the external institution where the student completed the course; to be used only when the reference ExternalEducationOrganization is not available.
        :param str final_letter_grade_earned: The final indicator of student performance in a class as submitted by the instructor.
        :param float final_numeric_grade_earned: The final indicator of student performance in a class as submitted by the instructor.
        :param str id: 
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiCourseTranscript]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'total_count', 'course_attempt_result_descriptor', 'course_code', 'course_education_organization_id', 'education_organization_id', 'school_year', 'student_unique_id', 'term_descriptor', 'external_education_organization_id', 'course_repeat_code_descriptor', 'attempted_credit_type_descriptor', 'earned_credit_type_descriptor', 'when_taken_grade_level_descriptor', 'method_credit_earned_descriptor', 'alternative_course_code', 'alternative_course_title', 'assigning_organization_identification_code', 'attempted_credit_conversion', 'attempted_credits', 'course_catalog_url', 'course_title', 'earned_credit_conversion', 'earned_credits', 'external_education_organization_name_of_institution', 'final_letter_grade_earned', 'final_numeric_grade_earned', 'id', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_course_transcripts" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_course_transcripts`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_course_transcripts`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_attempt_result_descriptor' in params and
                                                       len(params['course_attempt_result_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `course_attempt_result_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_code' in params and
                                                       len(params['course_code']) > 60):
            raise ValueError("Invalid value for parameter `course_code` when calling `get_course_transcripts`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('student_unique_id' in params and
                                                       len(params['student_unique_id']) > 32):
            raise ValueError("Invalid value for parameter `student_unique_id` when calling `get_course_transcripts`, length must be less than or equal to `32`")  # noqa: E501
        if self.api_client.client_side_validation and ('term_descriptor' in params and
                                                       len(params['term_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `term_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_repeat_code_descriptor' in params and
                                                       len(params['course_repeat_code_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `course_repeat_code_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('attempted_credit_type_descriptor' in params and
                                                       len(params['attempted_credit_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `attempted_credit_type_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('earned_credit_type_descriptor' in params and
                                                       len(params['earned_credit_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `earned_credit_type_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('when_taken_grade_level_descriptor' in params and
                                                       len(params['when_taken_grade_level_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `when_taken_grade_level_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('method_credit_earned_descriptor' in params and
                                                       len(params['method_credit_earned_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `method_credit_earned_descriptor` when calling `get_course_transcripts`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('alternative_course_code' in params and
                                                       len(params['alternative_course_code']) > 60):
            raise ValueError("Invalid value for parameter `alternative_course_code` when calling `get_course_transcripts`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('alternative_course_title' in params and
                                                       len(params['alternative_course_title']) > 60):
            raise ValueError("Invalid value for parameter `alternative_course_title` when calling `get_course_transcripts`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('assigning_organization_identification_code' in params and
                                                       len(params['assigning_organization_identification_code']) > 60):
            raise ValueError("Invalid value for parameter `assigning_organization_identification_code` when calling `get_course_transcripts`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_catalog_url' in params and
                                                       len(params['course_catalog_url']) > 255):
            raise ValueError("Invalid value for parameter `course_catalog_url` when calling `get_course_transcripts`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_title' in params and
                                                       len(params['course_title']) > 60):
            raise ValueError("Invalid value for parameter `course_title` when calling `get_course_transcripts`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('external_education_organization_name_of_institution' in params and
                                                       len(params['external_education_organization_name_of_institution']) > 75):
            raise ValueError("Invalid value for parameter `external_education_organization_name_of_institution` when calling `get_course_transcripts`, length must be less than or equal to `75`")  # noqa: E501
        if self.api_client.client_side_validation and ('final_letter_grade_earned' in params and
                                                       len(params['final_letter_grade_earned']) > 20):
            raise ValueError("Invalid value for parameter `final_letter_grade_earned` when calling `get_course_transcripts`, length must be less than or equal to `20`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501
        if 'total_count' in params:
            query_params.append(('totalCount', params['total_count']))  # noqa: E501
        if 'course_attempt_result_descriptor' in params:
            query_params.append(('courseAttemptResultDescriptor', params['course_attempt_result_descriptor']))  # noqa: E501
        if 'course_code' in params:
            query_params.append(('courseCode', params['course_code']))  # noqa: E501
        if 'course_education_organization_id' in params:
            query_params.append(('courseEducationOrganizationId', params['course_education_organization_id']))  # noqa: E501
        if 'education_organization_id' in params:
            query_params.append(('educationOrganizationId', params['education_organization_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'student_unique_id' in params:
            query_params.append(('studentUniqueId', params['student_unique_id']))  # noqa: E501
        if 'term_descriptor' in params:
            query_params.append(('termDescriptor', params['term_descriptor']))  # noqa: E501
        if 'external_education_organization_id' in params:
            query_params.append(('externalEducationOrganizationId', params['external_education_organization_id']))  # noqa: E501
        if 'course_repeat_code_descriptor' in params:
            query_params.append(('courseRepeatCodeDescriptor', params['course_repeat_code_descriptor']))  # noqa: E501
        if 'attempted_credit_type_descriptor' in params:
            query_params.append(('attemptedCreditTypeDescriptor', params['attempted_credit_type_descriptor']))  # noqa: E501
        if 'earned_credit_type_descriptor' in params:
            query_params.append(('earnedCreditTypeDescriptor', params['earned_credit_type_descriptor']))  # noqa: E501
        if 'when_taken_grade_level_descriptor' in params:
            query_params.append(('whenTakenGradeLevelDescriptor', params['when_taken_grade_level_descriptor']))  # noqa: E501
        if 'method_credit_earned_descriptor' in params:
            query_params.append(('methodCreditEarnedDescriptor', params['method_credit_earned_descriptor']))  # noqa: E501
        if 'alternative_course_code' in params:
            query_params.append(('alternativeCourseCode', params['alternative_course_code']))  # noqa: E501
        if 'alternative_course_title' in params:
            query_params.append(('alternativeCourseTitle', params['alternative_course_title']))  # noqa: E501
        if 'assigning_organization_identification_code' in params:
            query_params.append(('assigningOrganizationIdentificationCode', params['assigning_organization_identification_code']))  # noqa: E501
        if 'attempted_credit_conversion' in params:
            query_params.append(('attemptedCreditConversion', params['attempted_credit_conversion']))  # noqa: E501
        if 'attempted_credits' in params:
            query_params.append(('attemptedCredits', params['attempted_credits']))  # noqa: E501
        if 'course_catalog_url' in params:
            query_params.append(('courseCatalogURL', params['course_catalog_url']))  # noqa: E501
        if 'course_title' in params:
            query_params.append(('courseTitle', params['course_title']))  # noqa: E501
        if 'earned_credit_conversion' in params:
            query_params.append(('earnedCreditConversion', params['earned_credit_conversion']))  # noqa: E501
        if 'earned_credits' in params:
            query_params.append(('earnedCredits', params['earned_credits']))  # noqa: E501
        if 'external_education_organization_name_of_institution' in params:
            query_params.append(('externalEducationOrganizationNameOfInstitution', params['external_education_organization_name_of_institution']))  # noqa: E501
        if 'final_letter_grade_earned' in params:
            query_params.append(('finalLetterGradeEarned', params['final_letter_grade_earned']))  # noqa: E501
        if 'final_numeric_grade_earned' in params:
            query_params.append(('finalNumericGradeEarned', params['final_numeric_grade_earned']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdFiCourseTranscript]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_course_transcripts_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_transcripts_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiCourseTranscript
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_course_transcripts_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_course_transcripts_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_course_transcripts_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_transcripts_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiCourseTranscript
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_course_transcripts_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_course_transcripts_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdFiCourseTranscript',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_course_transcript(self, course_transcript, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_course_transcript(course_transcript, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiCourseTranscript course_transcript: The JSON representation of the \"courseTranscript\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_course_transcript_with_http_info(course_transcript, **kwargs)  # noqa: E501
        else:
            (data) = self.post_course_transcript_with_http_info(course_transcript, **kwargs)  # noqa: E501
            return data

    def post_course_transcript_with_http_info(self, course_transcript, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_course_transcript_with_http_info(course_transcript, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiCourseTranscript course_transcript: The JSON representation of the \"courseTranscript\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_transcript']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_course_transcript" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_transcript' is set
        if self.api_client.client_side_validation and ('course_transcript' not in params or
                                                       params['course_transcript'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_transcript` when calling `post_course_transcript`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'course_transcript' in params:
            body_params = params['course_transcript']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_course_transcript(self, id, course_transcript, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_course_transcript(id, course_transcript, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiCourseTranscript course_transcript: The JSON representation of the \"courseTranscript\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_course_transcript_with_http_info(id, course_transcript, **kwargs)  # noqa: E501
        else:
            (data) = self.put_course_transcript_with_http_info(id, course_transcript, **kwargs)  # noqa: E501
            return data

    def put_course_transcript_with_http_info(self, id, course_transcript, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_course_transcript_with_http_info(id, course_transcript, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiCourseTranscript course_transcript: The JSON representation of the \"courseTranscript\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_transcript', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_course_transcript" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `put_course_transcript`")  # noqa: E501
        # verify the required parameter 'course_transcript' is set
        if self.api_client.client_side_validation and ('course_transcript' not in params or
                                                       params['course_transcript'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_transcript` when calling `put_course_transcript`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'course_transcript' in params:
            body_params = params['course_transcript']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courseTranscripts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
