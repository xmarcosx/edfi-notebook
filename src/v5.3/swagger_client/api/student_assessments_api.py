# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StudentAssessmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_student_assessment_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_student_assessment_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_student_assessment_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_student_assessment_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_student_assessment_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_student_assessment_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_student_assessment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_student_assessment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletes_student_assessments(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_student_assessments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_student_assessments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deletes_student_assessments_with_http_info(**kwargs)  # noqa: E501
            return data

    def deletes_student_assessments_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_student_assessments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_student_assessments" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_student_assessments`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_student_assessments`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments/deletes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeletedResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_student_assessments(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_assessments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str student_assessment_identifier: A unique number or alphanumeric code assigned to an assessment administered to a student.
        :param str assessment_identifier: A unique number or alphanumeric code assigned to an assessment.
        :param str namespace: Namespace for the Assessment.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param int school_year: The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test.
        :param str administration_environment_descriptor: The environment in which the test was administered.
        :param str event_circumstance_descriptor: An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        :param str when_assessed_grade_level_descriptor: The grade level of a student when assessed.
        :param str administration_language_descriptor: The language in which an assessment is written and/or administered.
        :param str platform_type_descriptor: The platform with which the assessment was delivered to the student during the assessment session.
        :param str reason_not_tested_descriptor: The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...
        :param str retest_indicator_descriptor: Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...
        :param datetime administration_date: The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        :param datetime administration_end_date: The date and time an assessment administration ended.
        :param str event_description: Describes special events that occur before during or after the assessment session that may impact use of results.
        :param str id: 
        :param str serial_number: The unique number for the assessment form or answer document.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiStudentAssessment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_student_assessments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_student_assessments_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_student_assessments_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_assessments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str student_assessment_identifier: A unique number or alphanumeric code assigned to an assessment administered to a student.
        :param str assessment_identifier: A unique number or alphanumeric code assigned to an assessment.
        :param str namespace: Namespace for the Assessment.
        :param str student_unique_id: A unique alphanumeric code assigned to a student.
        :param int school_year: The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test.
        :param str administration_environment_descriptor: The environment in which the test was administered.
        :param str event_circumstance_descriptor: An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        :param str when_assessed_grade_level_descriptor: The grade level of a student when assessed.
        :param str administration_language_descriptor: The language in which an assessment is written and/or administered.
        :param str platform_type_descriptor: The platform with which the assessment was delivered to the student during the assessment session.
        :param str reason_not_tested_descriptor: The primary reason student is not tested. For example:        Absent        Refusal by parent        Refusal by student        Medical waiver        Illness        Disruptive behavior        LEP Exempt        ...
        :param str retest_indicator_descriptor: Indicator if the test was retaken. For example:        Primary administration        First retest        Second retest        ...
        :param datetime administration_date: The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        :param datetime administration_end_date: The date and time an assessment administration ended.
        :param str event_description: Describes special events that occur before during or after the assessment session that may impact use of results.
        :param str id: 
        :param str serial_number: The unique number for the assessment form or answer document.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiStudentAssessment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'total_count', 'student_assessment_identifier', 'assessment_identifier', 'namespace', 'student_unique_id', 'school_year', 'administration_environment_descriptor', 'event_circumstance_descriptor', 'when_assessed_grade_level_descriptor', 'administration_language_descriptor', 'platform_type_descriptor', 'reason_not_tested_descriptor', 'retest_indicator_descriptor', 'administration_date', 'administration_end_date', 'event_description', 'id', 'serial_number', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_student_assessments" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_student_assessments`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_student_assessments`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('student_assessment_identifier' in params and
                                                       len(params['student_assessment_identifier']) > 60):
            raise ValueError("Invalid value for parameter `student_assessment_identifier` when calling `get_student_assessments`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('assessment_identifier' in params and
                                                       len(params['assessment_identifier']) > 60):
            raise ValueError("Invalid value for parameter `assessment_identifier` when calling `get_student_assessments`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('namespace' in params and
                                                       len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `get_student_assessments`, length must be less than or equal to `255`")  # noqa: E501
        if self.api_client.client_side_validation and ('student_unique_id' in params and
                                                       len(params['student_unique_id']) > 32):
            raise ValueError("Invalid value for parameter `student_unique_id` when calling `get_student_assessments`, length must be less than or equal to `32`")  # noqa: E501
        if self.api_client.client_side_validation and ('administration_environment_descriptor' in params and
                                                       len(params['administration_environment_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `administration_environment_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('event_circumstance_descriptor' in params and
                                                       len(params['event_circumstance_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `event_circumstance_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('when_assessed_grade_level_descriptor' in params and
                                                       len(params['when_assessed_grade_level_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `when_assessed_grade_level_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('administration_language_descriptor' in params and
                                                       len(params['administration_language_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `administration_language_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('platform_type_descriptor' in params and
                                                       len(params['platform_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `platform_type_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('reason_not_tested_descriptor' in params and
                                                       len(params['reason_not_tested_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `reason_not_tested_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('retest_indicator_descriptor' in params and
                                                       len(params['retest_indicator_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `retest_indicator_descriptor` when calling `get_student_assessments`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('event_description' in params and
                                                       len(params['event_description']) > 1024):
            raise ValueError("Invalid value for parameter `event_description` when calling `get_student_assessments`, length must be less than or equal to `1024`")  # noqa: E501
        if self.api_client.client_side_validation and ('serial_number' in params and
                                                       len(params['serial_number']) > 60):
            raise ValueError("Invalid value for parameter `serial_number` when calling `get_student_assessments`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501
        if 'total_count' in params:
            query_params.append(('totalCount', params['total_count']))  # noqa: E501
        if 'student_assessment_identifier' in params:
            query_params.append(('studentAssessmentIdentifier', params['student_assessment_identifier']))  # noqa: E501
        if 'assessment_identifier' in params:
            query_params.append(('assessmentIdentifier', params['assessment_identifier']))  # noqa: E501
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'student_unique_id' in params:
            query_params.append(('studentUniqueId', params['student_unique_id']))  # noqa: E501
        if 'school_year' in params:
            query_params.append(('schoolYear', params['school_year']))  # noqa: E501
        if 'administration_environment_descriptor' in params:
            query_params.append(('administrationEnvironmentDescriptor', params['administration_environment_descriptor']))  # noqa: E501
        if 'event_circumstance_descriptor' in params:
            query_params.append(('eventCircumstanceDescriptor', params['event_circumstance_descriptor']))  # noqa: E501
        if 'when_assessed_grade_level_descriptor' in params:
            query_params.append(('whenAssessedGradeLevelDescriptor', params['when_assessed_grade_level_descriptor']))  # noqa: E501
        if 'administration_language_descriptor' in params:
            query_params.append(('administrationLanguageDescriptor', params['administration_language_descriptor']))  # noqa: E501
        if 'platform_type_descriptor' in params:
            query_params.append(('platformTypeDescriptor', params['platform_type_descriptor']))  # noqa: E501
        if 'reason_not_tested_descriptor' in params:
            query_params.append(('reasonNotTestedDescriptor', params['reason_not_tested_descriptor']))  # noqa: E501
        if 'retest_indicator_descriptor' in params:
            query_params.append(('retestIndicatorDescriptor', params['retest_indicator_descriptor']))  # noqa: E501
        if 'administration_date' in params:
            query_params.append(('administrationDate', params['administration_date']))  # noqa: E501
        if 'administration_end_date' in params:
            query_params.append(('administrationEndDate', params['administration_end_date']))  # noqa: E501
        if 'event_description' in params:
            query_params.append(('eventDescription', params['event_description']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdFiStudentAssessment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_student_assessments_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_assessments_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiStudentAssessment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_student_assessments_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_student_assessments_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_student_assessments_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_student_assessments_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiStudentAssessment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_student_assessments_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_student_assessments_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdFiStudentAssessment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_student_assessment(self, student_assessment, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_student_assessment(student_assessment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiStudentAssessment student_assessment: The JSON representation of the \"studentAssessment\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_student_assessment_with_http_info(student_assessment, **kwargs)  # noqa: E501
        else:
            (data) = self.post_student_assessment_with_http_info(student_assessment, **kwargs)  # noqa: E501
            return data

    def post_student_assessment_with_http_info(self, student_assessment, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_student_assessment_with_http_info(student_assessment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiStudentAssessment student_assessment: The JSON representation of the \"studentAssessment\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_student_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_assessment' is set
        if self.api_client.client_side_validation and ('student_assessment' not in params or
                                                       params['student_assessment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_assessment` when calling `post_student_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'student_assessment' in params:
            body_params = params['student_assessment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_student_assessment(self, id, student_assessment, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_student_assessment(id, student_assessment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiStudentAssessment student_assessment: The JSON representation of the \"studentAssessment\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_student_assessment_with_http_info(id, student_assessment, **kwargs)  # noqa: E501
        else:
            (data) = self.put_student_assessment_with_http_info(id, student_assessment, **kwargs)  # noqa: E501
            return data

    def put_student_assessment_with_http_info(self, id, student_assessment, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_student_assessment_with_http_info(id, student_assessment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiStudentAssessment student_assessment: The JSON representation of the \"studentAssessment\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'student_assessment', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_student_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `put_student_assessment`")  # noqa: E501
        # verify the required parameter 'student_assessment' is set
        if self.api_client.client_side_validation and ('student_assessment' not in params or
                                                       params['student_assessment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_assessment` when calling `put_student_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'student_assessment' in params:
            body_params = params['student_assessment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/studentAssessments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
