# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CoursesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_course_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_course_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_course_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_course_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing resource using the resource identifier.  # noqa: E501

        The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_match: The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_course_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_course_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deletes_courses(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_courses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_courses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deletes_courses_with_http_info(**kwargs)  # noqa: E501
            return data

    def deletes_courses_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves deleted resources based on change version.  # noqa: E501

        The DELETES operation is used to retrieve deleted resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_courses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[DeletedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_courses" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_courses`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `deletes_courses`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses/deletes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeletedResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str course_code: A unique alphanumeric code assigned to a course.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str academic_subject_descriptor: The intended major subject area of the course.
        :param str career_pathway_descriptor: Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        :param str course_defined_by_descriptor: Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        :param str course_gpa_applicability_descriptor: An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.
        :param str minimum_available_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str maximum_available_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str course_description: A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        :param str course_title: The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        :param date date_course_adopted: Date the course was adopted by the education agency.
        :param bool high_school_course_requirement: An indication that this course may satisfy high school graduation requirements in the course's subject area.
        :param str id: 
        :param int max_completions_for_credit: Designates how many times the course may be taken with credit received by the student.
        :param float maximum_available_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float maximum_available_credits: The value of credits or units of value awarded for the completion of a course.
        :param float minimum_available_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float minimum_available_credits: The value of credits or units of value awarded for the completion of a course.
        :param int number_of_parts: The number of parts identified for a course.
        :param int time_required_for_completion: The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiCourse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_courses_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves specific resources using the resource's property values (using the \"Get\" pattern).  # noqa: E501

        This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Indicates how many items should be skipped before returning results.
        :param int limit: Indicates the maximum number of items that should be returned in the results.
        :param int min_change_version: Used in synchronization to set sequence minimum ChangeVersion
        :param int max_change_version: Used in synchronization to set sequence maximum ChangeVersion
        :param bool total_count: Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.
        :param str course_code: A unique alphanumeric code assigned to a course.
        :param int education_organization_id: The identifier assigned to an education organization.
        :param str academic_subject_descriptor: The intended major subject area of the course.
        :param str career_pathway_descriptor: Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        :param str course_defined_by_descriptor: Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        :param str course_gpa_applicability_descriptor: An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.
        :param str minimum_available_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str maximum_available_credit_type_descriptor: The type of credits or units of value awarded for the completion of a course.
        :param str course_description: A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        :param str course_title: The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        :param date date_course_adopted: Date the course was adopted by the education agency.
        :param bool high_school_course_requirement: An indication that this course may satisfy high school graduation requirements in the course's subject area.
        :param str id: 
        :param int max_completions_for_credit: Designates how many times the course may be taken with credit received by the student.
        :param float maximum_available_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float maximum_available_credits: The value of credits or units of value awarded for the completion of a course.
        :param float minimum_available_credit_conversion: Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        :param float minimum_available_credits: The value of credits or units of value awarded for the completion of a course.
        :param int number_of_parts: The number of parts identified for a course.
        :param int time_required_for_completion: The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: list[EdFiCourse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'min_change_version', 'max_change_version', 'total_count', 'course_code', 'education_organization_id', 'academic_subject_descriptor', 'career_pathway_descriptor', 'course_defined_by_descriptor', 'course_gpa_applicability_descriptor', 'minimum_available_credit_type_descriptor', 'maximum_available_credit_type_descriptor', 'course_description', 'course_title', 'date_course_adopted', 'high_school_course_requirement', 'id', 'max_completions_for_credit', 'maximum_available_credit_conversion', 'maximum_available_credits', 'minimum_available_credit_conversion', 'minimum_available_credits', 'number_of_parts', 'time_required_for_completion', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 500):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_courses`, must be a value less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_courses`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_code' in params and
                                                       len(params['course_code']) > 60):
            raise ValueError("Invalid value for parameter `course_code` when calling `get_courses`, length must be less than or equal to `60`")  # noqa: E501
        if self.api_client.client_side_validation and ('academic_subject_descriptor' in params and
                                                       len(params['academic_subject_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `academic_subject_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('career_pathway_descriptor' in params and
                                                       len(params['career_pathway_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `career_pathway_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_defined_by_descriptor' in params and
                                                       len(params['course_defined_by_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `course_defined_by_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_gpa_applicability_descriptor' in params and
                                                       len(params['course_gpa_applicability_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `course_gpa_applicability_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('minimum_available_credit_type_descriptor' in params and
                                                       len(params['minimum_available_credit_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `minimum_available_credit_type_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('maximum_available_credit_type_descriptor' in params and
                                                       len(params['maximum_available_credit_type_descriptor']) > 306):
            raise ValueError("Invalid value for parameter `maximum_available_credit_type_descriptor` when calling `get_courses`, length must be less than or equal to `306`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_description' in params and
                                                       len(params['course_description']) > 1024):
            raise ValueError("Invalid value for parameter `course_description` when calling `get_courses`, length must be less than or equal to `1024`")  # noqa: E501
        if self.api_client.client_side_validation and ('course_title' in params and
                                                       len(params['course_title']) > 60):
            raise ValueError("Invalid value for parameter `course_title` when calling `get_courses`, length must be less than or equal to `60`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'min_change_version' in params:
            query_params.append(('minChangeVersion', params['min_change_version']))  # noqa: E501
        if 'max_change_version' in params:
            query_params.append(('maxChangeVersion', params['max_change_version']))  # noqa: E501
        if 'total_count' in params:
            query_params.append(('totalCount', params['total_count']))  # noqa: E501
        if 'course_code' in params:
            query_params.append(('courseCode', params['course_code']))  # noqa: E501
        if 'education_organization_id' in params:
            query_params.append(('educationOrganizationId', params['education_organization_id']))  # noqa: E501
        if 'academic_subject_descriptor' in params:
            query_params.append(('academicSubjectDescriptor', params['academic_subject_descriptor']))  # noqa: E501
        if 'career_pathway_descriptor' in params:
            query_params.append(('careerPathwayDescriptor', params['career_pathway_descriptor']))  # noqa: E501
        if 'course_defined_by_descriptor' in params:
            query_params.append(('courseDefinedByDescriptor', params['course_defined_by_descriptor']))  # noqa: E501
        if 'course_gpa_applicability_descriptor' in params:
            query_params.append(('courseGPAApplicabilityDescriptor', params['course_gpa_applicability_descriptor']))  # noqa: E501
        if 'minimum_available_credit_type_descriptor' in params:
            query_params.append(('minimumAvailableCreditTypeDescriptor', params['minimum_available_credit_type_descriptor']))  # noqa: E501
        if 'maximum_available_credit_type_descriptor' in params:
            query_params.append(('maximumAvailableCreditTypeDescriptor', params['maximum_available_credit_type_descriptor']))  # noqa: E501
        if 'course_description' in params:
            query_params.append(('courseDescription', params['course_description']))  # noqa: E501
        if 'course_title' in params:
            query_params.append(('courseTitle', params['course_title']))  # noqa: E501
        if 'date_course_adopted' in params:
            query_params.append(('dateCourseAdopted', params['date_course_adopted']))  # noqa: E501
        if 'high_school_course_requirement' in params:
            query_params.append(('highSchoolCourseRequirement', params['high_school_course_requirement']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'max_completions_for_credit' in params:
            query_params.append(('maxCompletionsForCredit', params['max_completions_for_credit']))  # noqa: E501
        if 'maximum_available_credit_conversion' in params:
            query_params.append(('maximumAvailableCreditConversion', params['maximum_available_credit_conversion']))  # noqa: E501
        if 'maximum_available_credits' in params:
            query_params.append(('maximumAvailableCredits', params['maximum_available_credits']))  # noqa: E501
        if 'minimum_available_credit_conversion' in params:
            query_params.append(('minimumAvailableCreditConversion', params['minimum_available_credit_conversion']))  # noqa: E501
        if 'minimum_available_credits' in params:
            query_params.append(('minimumAvailableCredits', params['minimum_available_credits']))  # noqa: E501
        if 'number_of_parts' in params:
            query_params.append(('numberOfParts', params['number_of_parts']))  # noqa: E501
        if 'time_required_for_completion' in params:
            query_params.append(('timeRequiredForCompletion', params['time_required_for_completion']))  # noqa: E501

        header_params = {}
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EdFiCourse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiCourse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_courses_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).  # noqa: E501

        This GET operation retrieves a resource by the specified resource identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param str if_none_match: The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.
        :param str snapshot_identifier: Indicates the Snapshot-Identifier that should be used.
        :return: EdFiCourse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'if_none_match', 'snapshot_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_courses_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501
        if 'snapshot_identifier' in params:
            header_params['Snapshot-Identifier'] = params['snapshot_identifier']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdFiCourse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_course(self, course, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_course(course, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiCourse course: The JSON representation of the \"course\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_course_with_http_info(course, **kwargs)  # noqa: E501
        else:
            (data) = self.post_course_with_http_info(course, **kwargs)  # noqa: E501
            return data

    def post_course_with_http_info(self, course, **kwargs):  # noqa: E501
        """Creates or updates resources based on the natural key values of the supplied resource.  # noqa: E501

        The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_course_with_http_info(course, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdFiCourse course: The JSON representation of the \"course\" resource to be created or updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course' is set
        if self.api_client.client_side_validation and ('course' not in params or
                                                       params['course'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course` when calling `post_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'course' in params:
            body_params = params['course']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_course(self, id, course, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_course(id, course, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiCourse course: The JSON representation of the \"course\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_course_with_http_info(id, course, **kwargs)  # noqa: E501
        else:
            (data) = self.put_course_with_http_info(id, course, **kwargs)  # noqa: E501
            return data

    def put_course_with_http_info(self, id, course, **kwargs):  # noqa: E501
        """Updates a resource based on the resource identifier.  # noqa: E501

        The PUT operation is used to update a resource by identifier. If the resource identifier (\"id\") is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_course_with_http_info(id, course, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A resource identifier that uniquely identifies the resource. (required)
        :param EdFiCourse course: The JSON representation of the \"course\" resource to be created or updated. (required)
        :param str if_match: The ETag header value used to prevent the PUT from updating a resource modified by another consumer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `put_course`")  # noqa: E501
        # verify the required parameter 'course' is set
        if self.api_client.client_side_validation and ('course' not in params or
                                                       params['course'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course` when calling `put_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'course' in params:
            body_params = params['course']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2_client_credentials']  # noqa: E501

        return self.api_client.call_api(
            '/ed-fi/courses/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
